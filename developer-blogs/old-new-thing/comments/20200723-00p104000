紅樓鍮  July 24, 2020


  0  Collapse this comment
Copy link
Maybe Coroutines TS could have supported something like
co_await[winrt::no_flow_context, winrt::link_cancellation] ReadAsync();
— “configured co_await“, with the things in square brackets passed as additional arguments to __promise.await_transform() (or the awaitable’s operator co_await(), I’m not sure which would be a better design).  That way our code could look a bit nicer.





Gunnar Dalsnes  July 23, 2020


  0  Collapse this comment
Copy link
I don’t get it. Why isn’t the cancellation propagated by default?





Raymond Chen Author
July 23, 2020


  0  Collapse this comment
Copy link
The cancellation token is a C++/WinRT feature that is not part of the Windows Runtime. It can’t be propagated to nested IAsyncActions because GetAllWidgetsAsync() could be implemented in some other language like C# or Visual Basic or C++/CX, and they don’t know about C++/WinRT cancellation tokens. To cancel a Windows Runtime asynchronous activity, you invoke the Cancel method. So we did what we had to do: Hook up the cancellation token to the Cancel method.





Ian Yates  July 23, 2020


  0  Collapse this comment
Copy link
I don't think this is like C# where you have some kind of ambient context that can be flowed, and even in that case there's not some cancellation token that is flowed anyway - other async state & context is but not cancellation. It's possible there are bits you simply want to complete atomically and not be cancelled, so an auto flow of sorts would get in the way.
The cancellation token is being fetched from the async machinery the compiler has built for the immediate method.
Memory management in C++, rather than having a garbage collector, probably also makes...Read moreI don’t think this is like C# where you have some kind of ambient context that can be flowed, and even in that case there’s not some cancellation token that is flowed anyway – other async state & context is but not cancellation. It’s possible there are bits you simply want to complete atomically and not be cancelled, so an auto flow of sorts would get in the way.
The cancellation token is being fetched from the async machinery the compiler has built for the immediate method.
Memory management in C++, rather than having a garbage collector, probably also makes automatic flowing of such things difficult
Read less