Paulo Morgado  June 6, 2019


  0  Collapse this comment
Copy link
Although very convinient for to look at, a switch statement that requires the creation of a string is not the best practice. Using Equals with a StringComparison would be better.





Alex Cohn  April 24, 2019


  0  Collapse this comment
Copy link
same can be achieved with good old file command, can’t it?





Raymond Chen Author
April 24, 2019


  0  Collapse this comment
Copy link
'file' is not recognized as an internal or external command, operable program or batch file.





Alex Cohn  April 25, 2019


  0  Collapse this comment
Copy link
Runs perfectly from WSL bash.



Ji Luo  April 23, 2019


  0  Collapse this comment
Copy link
As an old school programmer I would use a DFA to handle the stream…





cheong00  April 22, 2019


  0  Collapse this comment
Copy link
I wonder, shouldn’t a whitelist approach be used (i.e.: only visit file extensions you want to look for different line endings)?
There are who knows how many files types on the disk which are not text files and will just produce unwanted noise.





Raymond Chen Author
April 23, 2019


  0  Collapse this comment
Copy link
I would rather have false positives than false negatives. In my case, those file types were the only binary types in the directory. This was a quick-and-dirty tool, so I could just hard-code the binary types I needed to exclude.




Henry Skoglund  April 22, 2019


  0  Collapse this comment
Copy link
Hi, found a bug, files without any line terminators are reported as being CR terminated.
Also, as @Michael Liu says above, you can simplify usig ReadAllBytes. And use the old trustworthy Split method to further simplify could give something like this:
<code>
Read moreHi, found a bug, files without any line terminators are reported as being CR terminated.
Also, as @Michael Liu says above, you can simplify usig ReadAllBytes. And use the old trustworthy Split method to further simplify could give something like this:

string bytes = System.Text.Encoding.Default.GetString(System.IO.File.ReadAllBytes(f.FullName));
int crlf = bytes.Split(new String[] { "\r\n" }, StringSplitOptions.None).Count() - 1;
int cr = bytes.Split('\r').Count() - 1 - crlf;
int lf = bytes.Split('\n').Count() - 1 - crlf;
if (0 == crlf + cr + lf)
    Console.WriteLine("{0}, {1}", f.FullName, "None");
else if (0 == cr + lf)
    Console.WriteLine("{0}, {1}", f.FullName, "CRLF");
else if (0 == crlf + lf)
    Console.WriteLine("{0}, {1}", f.FullName, "CR");
else if (0 == crlf + cr)
    Console.WriteLine("{0}, {1}", f.FullName, "LF");
else
    Console.WriteLine("{0}, {1}, {2}, {3}, {4}",
                         f.FullName, "Mixed", cr, lf, crlf);

Read less







Raymond Chen Author
April 23, 2019


  0  Collapse this comment
Copy link
I had no zero-line files, so that issue never arose. I like your Split trick, especially over-splitting and subtracting out the crlfs. Not particularly efficient, but efficiency wasn’t the goal here.





Henry Skoglund  April 23, 2019


  0  Collapse this comment
Copy link
Thanks! And thank you for restoring the formatting of the code to a readable state.




Andrew Cook  April 22, 2019


  0  Collapse this comment
Copy link
While stringifying everything might result in fewer lines of code, Raymond’s method only has a single string of residue per file, and only works on a single in-memory copy of the file, rather than creating several stringified copies only to immediately throw them away. Thankfully, the CLR doesn’t automatically intern all strings like some languages do, or else you’d have five copies of each file forever.




Michael Liu  April 22, 2019


  0  Collapse this comment
Copy link
You can just use File.ReadAllBytes instead of having to deal with FileStream and BinaryReader.