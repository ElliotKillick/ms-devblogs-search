Flux  February 6, 2023
· Edited

  0  Collapse this comment
Copy link
This time, the customer is right.
While Windows has remained on the generation-1 security model, in which user accounts are the security boundary and antivirus is necessary, other operating systems, including Android and iOS, have moved on to the generation-2 security model, in which each app is containerized. Apps CANNOT infect each other, read data (including saved credentials) of others, and subvert other apps' operations.
Microsoft tried to bring that security model to UWP apps, but Microsoft's version of containerization merely impacts well-behaving apps that never needed containerization. Pavel Yosifovich, the author of the 7th edition of Windows Internals has a good...Read moreThis time, the customer is right.
While Windows has remained on the generation-1 security model, in which user accounts are the security boundary and antivirus is necessary, other operating systems, including Android and iOS, have moved on to the generation-2 security model, in which each app is containerized. Apps CANNOT infect each other, read data (including saved credentials) of others, and subvert other apps’ operations.
Microsoft tried to bring that security model to UWP apps, but Microsoft’s version of containerization merely impacts well-behaving apps that never needed containerization. Pavel Yosifovich, the author of the 7th edition of Windows Internals has a good blog post on this subject.
Read less







Michael Taylor  February 6, 2023


  4  Collapse this comment
Copy link
Windows has the feature you're asking about. It exists in apps coming from the App Store (or any app running in the sandbox). Each app in the store has to list the permissions it wants from the user and the user must confirm they grant access before installing. The problem with this approach, as can be seen with Android apps easily, is that the permissions are not fine grained enough in many cases or an app asks for all permissions, which completely defeats the purpose. I can't count how many times I've refused to install an app because it wants...Read moreWindows has the feature you’re asking about. It exists in apps coming from the App Store (or any app running in the sandbox). Each app in the store has to list the permissions it wants from the user and the user must confirm they grant access before installing. The problem with this approach, as can be seen with Android apps easily, is that the permissions are not fine grained enough in many cases or an app asks for all permissions, which completely defeats the purpose. I can’t count how many times I’ve refused to install an app because it wants access to my contacts even though it doesn’t do anything with contacts. This feature, while useful from a security standpoint, only works if apps try to lock down their permissions and users actually care. In my experience neither occurs. It is easier to ask for all permissions AND users want the app and will just agree to anything the app asks for. Even worse is that an app could ask for limited permissions and then later, in an update, change their permissions to ask for more. For an update users aren’t paying any attention.
The issue with Windows is that you can run anything and you can definitely lock down the app to prevent access but Windows is so much more flexible than Android/iOS that it would be a painful process. Furthermore, unlike a stringent API like Android/iOS have, a Windows app can call any # of APIs and don’t have to be registered/validated in advance. This would make it very difficult to lock down an app because the # of options are just too large. Besides it is pretty clear from the Windows Store reception that Windows users don’t want that feature anyway.
Read less







紅樓鍮  February 6, 2023
· Edited

  0  Collapse this comment
Copy link
This problem could be solved if the operating system provides an option to expose decoy contact lists to individual apps.
Linux has the concept of "namespaces", e. g. filesystem namespaces.  A filesystem namespace is a full-fledged instance of a filesystem tree with its own root; two filesystem namespaces operates independently from each other, unless you explicitly set up mappings from one to the other.  This means you can create a new filesystem namespace, set up mappings for the necessary directories (like  and ) but nothing more, and run an untrusted program in that namespace.  You've essentially presented...Read moreThis problem could be solved if the operating system provides an option to expose decoy contact lists to individual apps.
Linux has the concept of “namespaces”, e. g. filesystem namespaces.  A filesystem namespace is a full-fledged instance of a filesystem tree with its own root; two filesystem namespaces operates independently from each other, unless you explicitly set up mappings from one to the other.  This means you can create a new filesystem namespace, set up mappings for the necessary directories (like /proc and /sys) but nothing more, and run an untrusted program in that namespace.  You’ve essentially presented to that program a decoy filesystem to toy with.  Software like systemd includes functionalities to perform this technique easily.
Windows may actually have the machinery do the same already, seeing it supports things like “filesystem virtualization” and “registry virtualization”, but it doesn’t allow me to use its machinery to e. g. present a fake C:\Users\MyUsername to rogue apps yet.
Read less






Dan Bugglin  February 6, 2023


  1  Collapse this comment
Copy link
Wow whenever someone suggests a change that would break useful functionality in software because they are lazy and don’t want to be responsible for their own actions I always feel irrationally angry about it.
That said this person may be coming from a more locked-down OS like Android where all apps are sandboxed from each other, and apps are digitally signed so an attacker would be hard-pressed to get access to an app’s data outside of the app’s interface. Such OSs have their place, as do OSs which give users more freedom.





Yukkuri Reimu  February 9, 2023


  0  Collapse this comment
Copy link
Yeah it makes me angry too.




Neil Owen  February 6, 2023


  3  Collapse this comment
Copy link
It's frustrating that almost every single one of these posts could be summarized as:
Windows security model doesn't match up to many peoples expectations of what a security model should do, and doesn't match the security goals of some newer and more modern operating systems people interact with regularly. Users want their files, their passwords, their data protected from their software, whereas Windows protects itself and the underlying system from users, and users from other users. Operating systems like iOS allow them to meet their goals, I would not expect that a random iOS app would be able to delete...Read moreIt’s frustrating that almost every single one of these posts could be summarized as:
Windows security model doesn’t match up to many peoples expectations of what a security model should do, and doesn’t match the security goals of some newer and more modern operating systems people interact with regularly. Users want their files, their passwords, their data protected from their software, whereas Windows protects itself and the underlying system from users, and users from other users. Operating systems like iOS allow them to meet their goals, I would not expect that a random iOS app would be able to delete my photos unless I gave it such permissions explicitly. Not quite sure how to bridge this gap.
I completely understand that there are tons of historical, compatibility, and other complex reasons for why this is. And I’ve even seen how attempts to change this (with the newer Windows APIs) have not gone very well, due to these issues. But that doesn’t change the fact that there is a huge mismatch between these expectations and reality.
Read less







Yukkuri Reimu  February 9, 2023


  1  Collapse this comment
Copy link
Speak for yourself about your expectations. As a user I fully expect to be able to access MY data with whichever program I run, whether the OS designer thought that was okay or not.
Please stop trying to turn usable operating systems into Fischer Price locked down useless-for-real-work toys. We have those already (iOS as you mention), you can just use that.





abc def  February 6, 2023


  0  Collapse this comment
Copy link
Well summarized. It was difficult for me to wrap my head around this concept, but it truly is as you put it, Windows protects itself and the underlying system. Like some sort of HR department focused on protecting the company rather than the employee.
The Windows API is already pretty well organized, so it shouldn't be impossible to create a few groups of application types, with varying levels of access (like "Restricted", "Internet", "Debuggers and Development", "Raw disk access", "Location", etc.). Or just use the same permissions as on a mobile phone. If I download an application and run it,...Read moreWell summarized. It was difficult for me to wrap my head around this concept, but it truly is as you put it, Windows protects itself and the underlying system. Like some sort of HR department focused on protecting the company rather than the employee.
The Windows API is already pretty well organized, so it shouldn’t be impossible to create a few groups of application types, with varying levels of access (like “Restricted”, “Internet”, “Debuggers and Development”, “Raw disk access”, “Location”, etc.). Or just use the same permissions as on a mobile phone. If I download an application and run it, I don’t want it to have immediate access to the Internet, to the Credential Manager, or raw access to the disk and to the memory of other processes.
The OS is always on the other side of an airtight hatchway, apparently. Maybe it’s time to grace the user with a measly decompression chamber.
Read less







Raymond Chen Author
February 7, 2023


  0  Collapse this comment
Copy link
That classification already exists. They’re called UWP app capabilities. So stay in the UWP walled garden.