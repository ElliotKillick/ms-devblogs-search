Joshua Hudson  June 24, 2023


  0  Collapse this comment
Copy link
I find it inconvenient to be unable to unlock something from a different thread that locked it.
Most of the time, the restriction is no issue, but for some algorithms (mainly, constructing a more powerful lock from a primitive), it causes major issues.
I think SRWLock is high enough level that it shouldn't come up. But the bottom-end lock primitive is the one that matters.
Incidentally the documentation for LeaveCriticalSection is ambiguous. Does it really care that the thread the called EnterCriticalSection is the thread that called LeaveCriticalSection, or is ownership literal, which means I can hand off the ownership to another thread?
Read moreI find it inconvenient to be unable to unlock something from a different thread that locked it.
Most of the time, the restriction is no issue, but for some algorithms (mainly, constructing a more powerful lock from a primitive), it causes major issues.
I think SRWLock is high enough level that it shouldn’t come up. But the bottom-end lock primitive is the one that matters.
Incidentally the documentation for LeaveCriticalSection is ambiguous. Does it really care that the thread the called EnterCriticalSection is the thread that called LeaveCriticalSection, or is ownership literal, which means I can hand off the ownership to another thread?
Read less







skSdnW  June 25, 2023


  0  Collapse this comment
Copy link
If it works you are just getting lucky.
There are two scenarios;
Before Vista, only the checked build cares.
On newer versions the actual implementation does not follow what winnt.h tells you and it could be using a SRW etc.





Henke37  June 25, 2023


  0  Collapse this comment
Copy link
“To release its ownership, the thread must call LeaveCriticalSection once for each time that it entered the critical section.” and “If a thread calls LeaveCriticalSection when it does not have ownership of the specified critical section object, an error occurs …” suggest that LeaveCriticalSection must be called by the owning thread.




Alexander Bessonov  June 23, 2023


  0  Collapse this comment
Copy link
In this case, what is a supported lock type usable in a coroutine? `std::mutex` is explicitly prohibited from being released from a different thread, SRWLock also cannot be used.
Is the only option left `WaitOnAddress` or the same priority inversion applies to it as well?





Tokmaji, George  June 24, 2023


  1  Collapse this comment
Copy link
`std::counting_semaphore` / `std::binary_semaphore` explicitely allow being released from a different thread.