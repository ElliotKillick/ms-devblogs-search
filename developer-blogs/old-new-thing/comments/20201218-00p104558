Neil Rashbrook  December 19, 2020


  0  Collapse this comment
Copy link
Would it make sense for compilers to warn if you try to read from a variable that you used std::move on? Not that programmers read compiler diagnostics, but it‚Äôs worth a shot‚Ä¶





John Schroedl  December 19, 2020


  0  Collapse this comment
Copy link
The Visual C++ static analyzer will indeed warn about use of a moved-from object.





Thiago Macieira  December 19, 2020


  0  Collapse this comment
Copy link
It could.... but only if the compiler knew what the state of the moved-from object is invalid (usually, some resources of the destination object, instead of empty). But as Raymond says, the language doesn't require the object to be in this state. It's entirely possible for a class to declare and document that its move constructor and move assignment operators leave the moved-from object in the default / empty state, in which case operating on it is completely valid.
I'd expand what Raymond said abot two categories with a third: there's the group that thinks that moved-from objects should be in...Read moreIt could‚Ä¶. but only if the compiler knew what the state of the moved-from object is invalid (usually, some resources of the destination object, instead of empty). But as Raymond says, the language doesn‚Äôt require the object to be in this state. It‚Äôs entirely possible for a class to declare and document that its move constructor and move assignment operators leave the moved-from object in the default / empty state, in which case operating on it is completely valid.
I‚Äôd expand what Raymond said abot two categories with a third: there‚Äôs the group that thinks that moved-from objects should be in a state where they can be only assigned to or destructed, but nothing else (any other operation can crash or result in unexpected behaviour).  Because this group of classes does exist, in fact the only operations you can do on a moved-from object is to destroy it or assign something new to it (or sometimes call a method ‚Äúclear()‚Äù). If such a warning exists, then it should warn about anything besides these two operations.
Read less







word merchant  December 19, 2020


  0  Collapse this comment
Copy link
This article could be titled ‚ÄúUse Rust. You know it makes sense‚Äù.
C++ is not a language I‚Äôd ever pick for a new project.





Martin Ba  December 21, 2020


  0  Collapse this comment
Copy link
ü•± ‚Ä¶ fancy language X.
Yeah.
That just leaves those ¬æ that are not working on new code.
Or on new code living around old code.
Or on new code where you‚Äôd better pick something that your team is proficient in.





Paulo Pinto  December 22, 2020


  0  Collapse this comment
Copy link
Well, it is not as if Microsoft themselves weren‚Äôt on this path.
https://blogs.windows.com/windowsdeveloper/2020/04/30/rust-winrt-public-preview/
https://msrc-blog.microsoft.com/2020/08/17/control-flow-guard-for-clang-llvm-and-rust/
https://deislabs.io/posts/still-rusting-one-year-later/
https://twitter.com/ryan_levick/status/1171830191804551168