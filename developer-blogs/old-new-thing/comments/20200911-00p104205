carranza howell  September 14, 2020


  0  Collapse this comment
Copy link
üòå





Giorgi Chakhidze  September 13, 2020


  0  Collapse this comment
Copy link
Next: ‚ÄúDeclaring COM interfaces, revisited: C# implementation‚Äù





Paulo Pinto  September 15, 2020


  0  Collapse this comment
Copy link
Yeah, it is quite unfortunate that while C++ has the ability to provide a nice C# like experience, see C++ Builder, Microsoft teams insist in forcing us into this kind of boilerplate (C++/WinRT hardly improved it, on the contrary with the primitive tooling for IDL files).





Henke37  September 13, 2020


  0  Collapse this comment
Copy link
Given that C# has COM integration, that‚Äôs actually a good idea.





MGetz  September 14, 2020


  0  Collapse this comment
Copy link
Last I checked that was literally just marking the class as [ComVisible(true)] albeit with some gotchas as far as what should and shouldn‚Äôt be done. That said‚Ä¶ there are lots of ways for the developer to control what is and isn‚Äôt exported, and how all that happens.



c_linkage  September 11, 2020


  0  Collapse this comment
Copy link
Examples like the one above showing how C++ implemented interfaces (especially the part about inline declaration of function bodies) was what I found to be confusing about COM back when I had only a year of C++ experience back in the late 90s.
The COM specification and the Don Box book go to great lengths talking about how interfaces were separated from implementation. The fact that the reference count was attached to the interface and not the implementation was repeatedly hammered into the reader, especially during the parts about being careful not to leak references.
But in my mind the C++ examples...Read moreExamples like the one above showing how C++ implemented interfaces (especially the part about inline declaration of function bodies) was what I found to be confusing about COM back when I had only a year of C++ experience back in the late 90s.
The COM specification and the Don Box book go to great lengths talking about how interfaces were separated from implementation. The fact that the reference count was attached to the interface and not the implementation was repeatedly hammered into the reader, especially during the parts about being careful not to leak references.
But in my mind the C++ examples blended the implementation and interface because the C++ object instance was both the interface and the implementation. After all, how could the interface IUnknown have a reference count if there wasn‚Äôt an object instance to hold that reference count?
Coming from a C background (and assembly before that), the C implementation of COM just ended up making more sense to me. I could see where the actual functions lived, and I could see that the interface ‚Äúvtable‚Äù was just a struct with function pointers.  I could even see how the interface could be separated from the implementation via tiny structs with interface pointers and reference counts. And that really made understanding how tear-off interfaces could be implemented, and that was cool!
Read less