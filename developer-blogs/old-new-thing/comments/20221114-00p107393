大狗皇帝  November 18, 2022


  0  Collapse this comment
Copy link
in winnt.h:
//
// Return the number of elements in a statically sized array.
//   DWORD Buffer[100];
//   RTL_NUMBER_OF(Buffer) == 100
// This is also popularly known as: NUMBER_OF, ARRSIZE, _countof, NELEM, etc.
//
#define RTL_NUMBER_OF_V1(A) (sizeof(A)/sizeof((A)[0]))





Dennis Mabrey  November 15, 2022


  0  Collapse this comment
Copy link
I still would probably use sizeof(“wazzup”)-1 just because it is more readable.
As a side note one of my C/C++ gotcha questions to students is to ask what is the value of i.
int i=42;
int j = sizeof(i++);






Raymond Chen Author
November 16, 2022


  0  Collapse this comment
Copy link
But sizeof("wazzup") requires an embedded literal.

constexpr int tmplen(char const* prefix)
{
    return std::char_traits::length(prefix) + 5;
}

void mktemp(char* buffer, char const* prefix)
{
    strcpy(buffer, prefix);
    strcat(buffer, "temp");
}

void test()
{
    constexpr char const* prefix = "hello";
    char buffer[tmplen(prefix)];
    mktemp(buffer, prefix);
}

The corresponding sizeof(s) - 1 produces the wrong answer.




some thing  November 15, 2022


  2  Collapse this comment
Copy link
constexpr auto a = std::string_view(“hello”).size();





Nikl Kelbon  November 14, 2022


  0  Collapse this comment
Copy link
Please next article “don’t use clang and gcc extensions with variable arrays along with coroutines”, i dont rly know why it is not ill-formed in clang





Martin “KeyJ” Fiedler  November 14, 2022


  0  Collapse this comment
Copy link
The problem with std::char_traits::length() is that it’s only constexpr since C++17 (at least according to https://en.cppreference.com/w/cpp/string/char_traits/length).
If C++11-to-14 compatibility is desired, there’s no way around something like
constexpr std::size_t constexpr_strlen(const char* s) {
    return (s && s[0]) ? (constexpr_strlen(&s[1]) + 1) : 0;
}





Joshua Hudson  November 14, 2022
· Edited

  0  Collapse this comment
Copy link
> In fact, gcc goes further and accepts all three statements!
As far as I can tell, gcc is smart enough to treat strlen as constexpr until told otherwise. (By telling it strlen is not an intrinsic.) This property also allows gcc to hoist strlen() invocations out of loop tests most of the time.
Older way of getting the length of a string at compile time: (sizeof("hello") - 1)
Wait isn't the first one just C99 variable length arrays on the stack? Oh right C++. It's probably just active in g++ because the standard libraries use it (built a second time by g++...Read more> In fact, gcc goes further and accepts all three statements!
As far as I can tell, gcc is smart enough to treat strlen as constexpr until told otherwise. (By telling it strlen is not an intrinsic.) This property also allows gcc to hoist strlen() invocations out of loop tests most of the time.
Older way of getting the length of a string at compile time: (sizeof(“hello”) – 1)
Wait isn’t the first one just C99 variable length arrays on the stack? Oh right C++. It’s probably just active in g++ because the standard libraries use it (built a second time by g++ to get them into the std namespace).
Read less