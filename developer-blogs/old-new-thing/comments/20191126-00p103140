Vasilios Magriplis  November 27, 2019


  0  Collapse this comment
Copy link
That’s one heck of an old meme in the title, but apt nonetheless!





Ryan P  November 27, 2019


  0  Collapse this comment
Copy link
I have been coding COM objects for years, but I never knew this context feature existed.  In my NT service that hosts a COM server, I simply keep track of the number of COM objects that have been requested by clients and have not been released yet, and then I have the service reject SERVICE_CONTROL_STOP requests if there are any active COM objects.





Thad House  November 27, 2019


  0  Collapse this comment
Copy link
Unrelated to this post (Although awesome read), but can you fix up the links on this page?
https://devblogs.microsoft.com/oldnewthing/20060727-04/?p=30333
It would awesome to read through all of those, I want to learn more, but all the links are broken, and I can’t find them manually.





Nick Allmaker  November 27, 2019


  0  Collapse this comment
Copy link
Hover over the archive links down at the bottom of the page and they’re all in the format `https://devblogs.microsoft.com/oldnewthing/year/month`. That post has links which also has dates in them, so check the July 2006 archives for the posts you’re looking for: https://devblogs.microsoft.com/oldnewthing/2006/07




Henke37  November 26, 2019


  0  Collapse this comment
Copy link
I think there is something missing from this post. That COM will automatically disconnect the proxies when COM is shutting down for the process. The keyword here being “the process”. If you are doing a service that is doing traditional svchost process sharing then you can’t do that. That’s what contexts solve here.





Daniel Sturm  November 28, 2019


  0  Collapse this comment
Copy link
That explains it, I was confused why they needed to do anything extra since disconnecting at process destruction seems like the obvious default anyhow.




Alex Martin  November 26, 2019


  0  Collapse this comment
Copy link
I wonder how many services there are out there that just don’t respond to shutdown requests.





Harry Johnston  November 26, 2019


  0  Collapse this comment
Copy link
Provided they don’t register to receive them, they don’t have to.  They can continue to run until Windows actually turns the power off, and in fact this is the recommended behaviour per the documentation, I assume because exiting the process would typically consume more resources than just allowing it to keep running.
(This was even more curious back in the days before ACPI; you could write a service and have it continue to run, and potentially even interact with the user, while the “It is now safe to turn off your computer” screen was up.)