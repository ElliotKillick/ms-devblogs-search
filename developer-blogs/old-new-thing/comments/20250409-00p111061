Solomon Ucko  April 11, 2025


  0  Collapse this comment
Copy link
Are the “max. object size” and “buffer size” comments from https://learn.microsoft.com/en-us/windows/win32/memory/creating-a-file-mapping-using-large-pages accurate? The documentation for CreateFileMapping (https://learn.microsoft.com/en-us/windows/win32/api/winbase/nf-winbase-createfilemappinga) calls those parameters “dwMaximumSizeHigh” and “dwMaximumSizeLow”.

 Log in to Vote or Reply






Joshua Hudson  April 9, 2025


  0  Collapse this comment
Copy link
I had a use case for that, once upon a time. It wasn’t a file. It was a disk partition. Paging it would be the desired behavior, as would large pages. So I got to write it the long way around.

 Log in to Vote or Reply






Jan Ringoš  April 9, 2025
· Edited

  0  Collapse this comment
Copy link
A time will come, and maybe it’s not that far in the future, when overhead of all the 4k page PTEs (and other bookkeeping) will exceed just using 2MB pages. For code and data sections at least, stacks are still quite small generally. That’s going to be interesting.
On the topic. What’s with the SEC_HUGE_PAGES?
It seems to fail even on latest Windows Insider builds with plenty of unfragmented free memory.

 Log in to Vote or Reply






Danielix Klimax  April 11, 2025


  0  Collapse this comment
Copy link
Just to make sure: Do you have right privilege assigned to account under which application runs?

 Log in to Vote or Reply






Jan Ringoš  April 11, 2025


  0  Collapse this comment
Copy link
Absolutely.
SEC_LARGE_PAGES works, but SEC_HUGE_PAGES doesn’t.
At the same time VirtualAlloc2 with MEM_EXTENDED_PARAMETER_NONPAGED_HUGE works to provide 1GB page.