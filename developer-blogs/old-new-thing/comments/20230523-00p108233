Neil Rashbrook  May 24, 2023


  0  Collapse this comment
Copy link
Shouldn’t the C++14 usage examples also use `make_transform_iterator`, given that you had to define it specifically?





Maria Spirito  May 23, 2023


  1  Collapse this comment
Copy link
I’m missing how *this is callable.   Seems to me that something is missing from Wrapper here.





Pierre Baillargeon  May 29, 2023


  0  Collapse this comment
Copy link
Yeah, there is no sign of the std::invoke in there…




Jacob Manaker  May 23, 2023
· Edited

  0  Collapse this comment
Copy link
I don't think your use of EBO works.  EBO leaves `transform_iterator` unpadded whenever the base class `Wrap<Transformer>` is empty…but the latter always has member `Inner m_inner;`.  For this reason, cppinsights (which I think uses GCC) gives the original iterator size 8 and the transformed one size 16 in your stateless lambda use-case.
To fix this, I think you'd need to have two different cases for `Wrap<Transformer>`: if the `Inner` admits inheritance, make it a base as well:<code>
Read moreI don’t think your use of EBO works.  EBO leaves `transform_iterator` unpadded whenever the base class `Wrap<Transformer>` is empty…but the latter always has member `Inner m_inner;`.  For this reason, cppinsights (which I think uses GCC) gives the original iterator size 8 and the transformed one size 16 in your stateless lambda use-case.
To fix this, I think you’d need to have two different cases for `Wrap<Transformer>`: if the `Inner` admits inheritance, make it a base as well:
#include <array>
#include <type_traits>

template<typename, bool heritable>
struct Wrap;

template<typename Inner>
struct Wrap<Inner, false>
{
    Wrap(Inner const& inner) : m_inner(inner) {}
    Inner m_inner;
    Inner to_inner() const{return m_inner;}
};

template<typename Inner>
struct Wrap<Inner, true> : Inner
{
    Wrap(Inner const &inner) : Inner(inner) {}
    Inner to_inner() const{return *this;}
};

template<typename It, typename Transformer>
class transform_iterator : 
    Wrap<Transformer, 
        std::is_class_v<Transformer> && !std::is_final_v<Transformer>>
{
    It m_it;
    typedef Wrap<
        Transformer, 
        std::is_class_v<Transformer> && !std::is_final_v<Transformer>
        > wrapped_t;
public:
    transform_iterator(It const& it, Transformer const& transformer) :
        m_it(it), wrapped_t(transformer) {}
    //Other members omitted for simplicity
    auto operator*() const { return this->to_inner()(*m_it); }
};

void test()
{
  std::array<int, 2> a = { 99, 42 };
  auto orig=begin(a);
  auto transformed=transform_iterator(orig, [](int v) { return v + 1; });
  static_assert(
    sizeof(orig)==8 && 
    sizeof(transformed)==8,
    "Failure!");
}
Read less