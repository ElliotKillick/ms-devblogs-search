Mike McCarty  September 28, 2023
· Edited

  0  Collapse this comment
Copy link
Seems to me the best answer is if `RegisterCallback()` takes a `weak_ptr` argument rather than a raw pointer.  Then your "create strong reference to self" in the callback function would create an actual strong reference via `weak_ptr.lock()` which can only succeed if the destruction sequence for the object has not been initiated.  Direct, fairly efficient, and basically foolproof -- even novices are likely to get it right.  Of course, this all assumes you are in a position to change the entire callback API in the first place.
It's too bad we have to resort to reference counting to...Read moreSeems to me the best answer is if `RegisterCallback()` takes a `weak_ptr` argument rather than a raw pointer.  Then your “create strong reference to self” in the callback function would create an actual strong reference via `weak_ptr.lock()` which can only succeed if the destruction sequence for the object has not been initiated.  Direct, fairly efficient, and basically foolproof — even novices are likely to get it right.  Of course, this all assumes you are in a position to change the entire callback API in the first place.
It’s too bad we have to resort to reference counting to resolve annoying issues such as this but short of AGC there’s not much that can be done about it.
Read less







Neil Rashbrook  September 28, 2023


  0  Collapse this comment
Copy link
Normally if you’re invoking a function on an object you’re expected to have a strong reference to that object, but given that there’s a function to wait for callbacks to finish, they apparently aren’t required to have a strong reference, so I wonder why callbacks are an exception.





Ian Boyd  September 27, 2023


  0  Collapse this comment
Copy link
It’s interesting (to me) that we still have to solve these problem with multi-threaded programming.
Any time you add a thread everything in your life gets harder. And everyone has to re-invent the solution every time they try to do it.
And so many solutions look ok, but will have subtle bugs.
And after 30 years of multi-threaded programming, we still haven’t been able to solve it.





Sigge Mannen  September 27, 2023


  0  Collapse this comment
Copy link
Agreed, but it seems the problem is especially hard in c++. I mostly do horror java, and there thread programming is usually real smooth sailing. The worst thing that happens is if you sometimes manipulate UI on wrong thread but even then things work out after a while.
While this stuff is bad in c++, the whole apartment threading thing is even worse, i understand they probably had to solve a lot of hard problems, but not being to use Free Threaded Objects ™ everywhere is horrible.