Zakaria TAHRI  March 25, 2025


  0  Collapse this comment
Copy link
What a great coincidence that this blog came out just as I was trying to find a way to simulate keyboard input without changing the keyboard layout! I was using keybd_event, but after coming across this commit, it looks like using SendInput is the best way to do it. Thanks for sharing this!





Georg Rottensteiner  March 19, 2025


  0  Collapse this comment
Copy link
Using UI Automation is the preferred method, obviously. However at least with .NET 8.0 Forms (and probably also 6.0) you can’t use it for everything. Clicking a button waits until the button handler returns. Which is unfortunate for automation, when the button click opens a modal dialog which you also want to control. This didn’t happen with an older version of Forms.
These are the cases when I didn’t find anything better than using PostMessage to place a mouse click on the button and hope for the best.





許恩嘉  March 19, 2025
· Edited

  1  Collapse this comment
Copy link
You can’t simulate keyboard input with PostMessage perfectly. But there are indeed many programs that can be fooled by this trick.
I once came across an application where I could simulate keyboard input via PostMessage only if it had keyboard focus.
In order to simulate input to the application while it is in the background, I sent it a fake WM_SETFOCUS message, which successfully fooled it.





skSdnW  March 19, 2025


  0  Collapse this comment
Copy link
SendInput takes an array so you can perform “atomic” up/down events etc. without it getting mixed with real user input that might be happening at the same time.





Sigge Mannen  March 19, 2025
· Edited

  0  Collapse this comment
Copy link
Keyboard hooks and SendInput takes me back in time, i wrote a little utility which took the selected text from any program and could list files and other things matching the text string.
It used keyboard hooks to register a global hotkey, and i think SendInput was used to do Ctrl-C to put the selected text into Clipboard from where it was later read, although it might have been too brittle so it just resorted to read from Clipboard directly and it was up to the user to put it there.
It also used Raymond's favourite AttachThreadInput function to be...Read moreKeyboard hooks and SendInput takes me back in time, i wrote a little utility which took the selected text from any program and could list files and other things matching the text string.
It used keyboard hooks to register a global hotkey, and i think SendInput was used to do Ctrl-C to put the selected text into Clipboard from where it was later read, although it might have been too brittle so it just resorted to read from Clipboard directly and it was up to the user to put it there.
It also used Raymond’s favourite AttachThreadInput function to be able to steal the foreground love as well as Always On top tricks to keep it there. Also, it had to be ran as admin, cause it used some arcane NTFS indexing for speed.
Luckily for the world, i was the only client together with a couple of colleagues and it worked pretty well, but sometimes the hook chain got thrashed and it made the “dead” keyboard characters work incorrectly. C’est la vie!
Read less







LOST  March 19, 2025
· Edited

  2  Collapse this comment
Copy link
I know I can’t simulate keyboard input with PostMessage, and yet I still resort to trying to do so (with extra pains to simulate raw input and other fun bits like the mentioned here keyboard hooks). The reason? Windows does not provide a supported way to simulate input for programs that are not in the foreground. I can't run multiple programs in parallel and simulate input in each, unless they are cooperative. The only supported options that I can think of are prohibitively expensive: run each in its own VM (Windows license per program instance) or use Windows Server and...Read moreI know I can’t simulate keyboard input with PostMessage, and yet I still resort to trying to do so (with extra pains to simulate raw input and other fun bits like the mentioned here keyboard hooks). The reason? Windows does not provide a supported way to simulate input for programs that are not in the foreground. I can’t run multiple programs in parallel and simulate input in each, unless they are cooperative. The only supported options that I can think of are prohibitively expensive: run each in its own VM (Windows license per program instance) or use Windows Server and multiple sessions (Server + terminal services license per instance).
Read less







BENOIT Frederic  March 24, 2025


  0  Collapse this comment
Copy link
Yes, this is the big problem with SendInput(): You can’t specify whom you’re sending input to, so if a program does not support UI automation, you have no good option.




Piotr Siódmak  March 19, 2025


  0  Collapse this comment
Copy link
I still have an application I wrote years ago that uses mouse_event. Now that I look at the documentation for mouse_event and keybd_event it says “This function has been superseded. Use SendInput instead.”. Should I update my application before a Windows update breaks it or is SendInput just a wrapper for those two functions or does it do something more? The documentation for SendInput mentions these two only in context of “These events are not interspersed with other (…)”.





alan robinson  March 20, 2025


  0  Collapse this comment
Copy link
I still use keybd_event without problems on several Win10 machines. Much easier API than SendInput IMHO.