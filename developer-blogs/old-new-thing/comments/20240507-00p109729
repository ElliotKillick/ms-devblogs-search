Pierre Bisaillon  May 8, 2024


  0  Collapse this comment
Copy link
Couldn’t we simply use std::distance(first, last) and not have to worry about the type of the iterators ?





Raymond Chen Author
May 8, 2024


  0  Collapse this comment
Copy link
Yes, but in the case of non-subtractable iterators, you’re probably better off just letting the vector resize instead of walking the collection twice (which will probably churn L1 cache).




Ismo Salonen  May 7, 2024


  0  Collapse this comment
Copy link
How much space does std::vector preallocate ( if any, I’m too lazy to lookup myself ) ? Is the resize call necessary at all, you could just loop from start to end and push_back to the vector. If the preallocated space is enough then that might be even faster.





紅樓鍮  May 8, 2024
· Edited

  0  Collapse this comment
Copy link
The growth strategy of  is implementation-defined. (If you mean how much space a default-constructed  allocates: zero, but it will allocate an implementation-defined amount of space on the first push. This behavior is considered part of the growth strategy.)
In any case it's normally impossible for a non-'ing implementation to beat a 'ing one, because the latter will always allocate exactly the right amount of memory up front unless the iterator's  is wonky, whereas the former may preallocate not enough, just enough, or too much memory depending on  and on the vector's growth strategy. Needless to say, the...Read moreThe growth strategy of std::vector is implementation-defined. (If you mean how much space a default-constructed std::vector allocates: zero, but it will allocate an implementation-defined amount of space on the first push. This behavior is considered part of the growth strategy.)
In any case it’s normally impossible for a non-resize‘ing implementation to beat a resize‘ing one, because the latter will always allocate exactly the right amount of memory up front unless the iterator’s operator- is wonky, whereas the former may preallocate not enough, just enough, or too much memory depending on count and on the vector’s growth strategy. Needless to say, the chance the growth strategy happens to hit the jackpot doesn’t look pretty.
(If you’re worried that default constructing resume_all_states via the use of resize, only to overwrite them immediately, is a potential pessimization: replace resize with reserve, and replace the assignment with push_back, although note that most fields of resume_all_state are intended to be zero-initialized anyway.)
Read less






Henry Skoglund  May 7, 2024


  0  Collapse this comment
Copy link
When filling the handles in the new ctor, shouldn’t the loop be:
for (auto& s : m_states) {
    s.m_handle = *first++;
}






Csaba Varga  May 7, 2024


  0  Collapse this comment
Copy link
It should be, if you’re playing code golf. Otherwise, you usually want to avoid the postfix ++ on iterators because it needs to return a new copy, which could be expensive. Or now that I think about it, there could be iterators where making a copy is impossible, so they don’t implement postfix ++ at all.





Henry Skoglund  May 7, 2024


  0  Collapse this comment
Copy link
I was thinking more of the leftmost part (i.e. replacing m_states.m_handle with s..m_handle).