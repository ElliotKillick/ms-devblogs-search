Igor Levicki  February 26, 2025


  0  Collapse this comment
Copy link
This comment system is broken. Instead of replying to specific comments and indenting under them (which works only one level deep), how about adding a quote ability?
> This isn’t a series of posts about “how to correctly inherit from a WinRT interface”. This is a series of posts about what goes on under the surface.
And the reason you have to explain what goes under the surface is because people try to do things that Raymond is explaining, fail, and complain to Microsoft via support ticket asking why it doesn't work the way they expect it to work.
Same difference.
> Also, this...Read moreThis comment system is broken. Instead of replying to specific comments and indenting under them (which works only one level deep), how about adding a quote ability?
> This isn’t a series of posts about “how to correctly inherit from a WinRT interface”. This is a series of posts about what goes on under the surface.
And the reason you have to explain what goes under the surface is because people try to do things that Raymond is explaining, fail, and complain to Microsoft via support ticket asking why it doesn’t work the way they expect it to work.
Same difference.
> Also, this is also not really a series for beginners or those who just want to implement simple components. Most cases with C++/WinRT will see you using the executable, either directly or indirectly, generate a source and header file for you and you just use that. Figuring out how to use the implements template is an advanced topic.
I guess opening FolderBrowseDialog at specific root folder must be an advanced topic too? Because .Net class doesn’t support this properly and you have to use P/Invoke just like you have to do with pretty much any other Windows or Shell control in .Net if you want anything but very basic behavior.
So what I am saying here is — what’s the point of yet another half-baked runtime which again doesn’t implement any advanced stuff that people really need and implementing them requires knowledge of the arcane to implement?
ATL, MFC, WTL, ActiveMovie, Video For Windows, DirectShow, Windows Media Foundation, .Net Framework, .Net Standard, .Net Core, WCF, WPF, XAML, WinUI, WinRT… what’s common for all of those?
They are all incomplete and the implemented part is half-broken.
Read less







Dmitry  February 25, 2025
· Edited

  0  Collapse this comment
Copy link
@Igor Levicki
Never say ”never” or ”nobody”. You’ll feel the value of fat-free software sitting on a tree in the middle of a forest with very slow mobile internet connection trying to download an app that claims to help with your problem — a hungry bear climbing up to you.
While funny, software size is a thing to consider. Ease of updates, cache-friendliness, and all that apart from the root causes like overuse of bloated third-party junk instead of hiring a programmer.
Still I do agree with the main point. C++ is the best source code obfuscation tool I’ve ever seen, and it...Read more@Igor Levicki
Never say ”never” or ”nobody”. You’ll feel the value of fat-free software sitting on a tree in the middle of a forest with very slow mobile internet connection trying to download an app that claims to help with your problem — a hungry bear climbing up to you.
While funny, software size is a thing to consider. Ease of updates, cache-friendliness, and all that apart from the root causes like overuse of bloated third-party junk instead of hiring a programmer.
Still I do agree with the main point. C++ is the best source code obfuscation tool I’ve ever seen, and it has zero overhead to do the job: it just comes out obfuscated with no effort.
P.S. Sorry, I won’t try to fight the commenting system anymore, it’s just broken. No way to edit a comment without having it fly out of the target discussion branch.
Read less







Igor Levicki  February 25, 2025


  0  Collapse this comment
Copy link
Updates nowadays are automated and often even forced so the users have no choice aside from not using your application if they are unhappy with its size.
My main point was that it shouldn’t be necessary to have 5 blog articles from an expert C++ programmer just to explain how to correctly inherit from a WinRT interface.





Me Gusta  February 25, 2025
· Edited

  0  Collapse this comment
Copy link
This isn't a series of posts about "how to correctly inherit from a WinRT interface". This is a series of posts about what goes on under the surface. Raymond is explaining the TMP that is going on to get C++/WinRT to do what it does.
Also, this is also not really a series for beginners or those who just want to implement simple components. Most cases with C++/WinRT will see you using the executable, either directly or indirectly, generate a source and header file for you and you just use that. Figuring out how to use the implements template is an...Read moreThis isn’t a series of posts about “how to correctly inherit from a WinRT interface”. This is a series of posts about what goes on under the surface. Raymond is explaining the TMP that is going on to get C++/WinRT to do what it does.
Also, this is also not really a series for beginners or those who just want to implement simple components. Most cases with C++/WinRT will see you using the executable, either directly or indirectly, generate a source and header file for you and you just use that. Figuring out how to use the implements template is an advanced topic.
Read less





Igor Levicki  February 24, 2025


  0  Collapse this comment
Copy link
@Me Gusta
The thing is, nobody cares about application sizes today -- I am not saying that's good or that's how it should be, just stating a fact. For example, Microsoft Teams folder is 266 MB, who cares whether .exe is 266 MB or 21.80 MB with the rest being DLLs and resources? Nobody, that's who -- end user only sees the folder size if even that.
As for your statement "Why not? Conditional compilation exists." it is totally absurd on its head. Major software vendors just aren't using WinRT. Should they? Perhaps, but they won't because they want to have a...Read more@Me Gusta
The thing is, nobody cares about application sizes today — I am not saying that’s good or that’s how it should be, just stating a fact. For example, Microsoft Teams folder is 266 MB, who cares whether .exe is 266 MB or 21.80 MB with the rest being DLLs and resources? Nobody, that’s who — end user only sees the folder size if even that.
As for your statement “Why not? Conditional compilation exists.” it is totally absurd on its head. Major software vendors just aren’t using WinRT. Should they? Perhaps, but they won’t because they want to have a single code base for Windows, Linux, and Mac. That’s why using Qt 5 and CEF or WebView2 are the most common scenarios in Windows desktop apps today.
You bring up Bluetooth API as if there are any widely used desktop apps that use it directly. Truth is, most use BT connected devices, be it audio or input, totally unaware of the connection type.
Finally, I don’t know if you noticed, but Raymond has been publishing a series of articles which boil down to “How to correctly use STL for X” and “How to correctly do X in WinRT” with some heavy C++ wizardry in both. If it takes a seasoned professional like Raymond to point out all the pitfalls and edge cases developers run into while working with those frameworks, what chance do you think new developers have to get things right?
Don’t get me wrong, this isn’t me advocating against use of C++, it’s just putting things in perspective. WinRT is too little, too late to the game. It should have been here 20 years ago before the scourge of HTML-based UI apps has taken off. All those cross-platform frameworks exist and are in use exactly because Microsoft didn’t have a native solution when it counted and because they were so focused on .Net.
Read less







Igor Levicki  February 22, 2025
· Edited

  0  Collapse this comment
Copy link
So if I am getting this right, you guys are effectively using modern C++17(+) templating features to break the C++ language OOP model of multiple inheritance, polymorphism, and direct class composition?
I guess nobody thought of, you know, using C# instead of trying to emulate its inheritance model in C++.





Me Gusta  February 22, 2025


  0  Collapse this comment
Copy link
C++/WinRT is a native C++ projection for the Windows Runtime, for use in C++ applications. Are you suggesting that the design should have forced a dependency on .NET and bloated a C++ application’s install size?





Me Gusta  February 23, 2025


  0  Collapse this comment
Copy link
@Igor Levicki
"No, C++/WinRT is C#-ized C++, nothing else."
Nope, there is so much more going on here. TMP, constexpr/consteval allows much more than what C# allows. One of the biggest things is that almost everything is zero runtime overhead. Almost everything will optimise away and what is left is close to just the ABI calls. Then there is the fact that it is almost zero space overhead, so all of those templates will just evaporate into nothing if not used. C# Generics can't do this, and in fact, the C# WinRT projection is over 30MiB. Even IL trimming and AoT cannot...Read more@Igor Levicki
“No, C++/WinRT is C#-ized C++, nothing else.”
Nope, there is so much more going on here. TMP, constexpr/consteval allows much more than what C# allows. One of the biggest things is that almost everything is zero runtime overhead. Almost everything will optimise away and what is left is close to just the ABI calls. Then there is the fact that it is almost zero space overhead, so all of those templates will just evaporate into nothing if not used. C# Generics can’t do this, and in fact, the C# WinRT projection is over 30MiB. Even IL trimming and AoT cannot compare to what the C++ compiler/linker is able to do here.
The use of templates here allows some really interesting things to happen. Like choosing between different base classes depending on known compile time criteria, selectively adding or removing base classes based upon known compile time criteria, and allowing a base class’ member function to call a more derived class’ member functions without declaring them as virtual and without the base class knowing about the derived class. The base template doesn’t need to care, and as long as the derived class has at least been declared by the time the template is instantiated, then the compiler is happy.
“relevant desktop apps aren’t using it and can’t use it anyway if they want to be portable”
Why not? Conditional compilation exists.
“so when you are not using XAML and not restricted to UWP since you aren’t targetting Microsoft Store what’s exactly the point of using C++/WinRT?”
What does targetting the store have anything to do with this? One example is the Bluetooth API in Windows.Devices.Bluetooth. This has always been an API usable by desktop applications and is more advanced than the Windows API Bluetooth API. It allows for Bluetooth LE that the Windows API version doesn’t support. This is marked as DualApiPartition in the Windows metadata, and has always been, even as far back as Windows 8. The DualApiPartition attribute was the original method to indicate that something is callable from desktop applications, but as time has gone on, this has stopped being used. Especially since the restrictions around packaging and appcontainers has been loosened.
“As for your claim that .Net runtime would bloat install size?”
Where did I claim that it was the .NET runtime that would bloat the install size? I have gone over most of it, like how templates don’t exist until they are instantiated, and then the compiler/linker can optimise most of them away. Also, similar functionality for C# uses up more than 30MiB. For the usage of Boost and how it bloats things, that completely depends on what components are used. If the component is header only then it adds almost nothing to the application, and the compiler/linker has access to the source and can therefore discard what isn’t needed.
There is no surprise that when using WinUI 3 in a desktop application, the C# version is MASSIVE in comparison to the C++ version, even with AoT enabled. For a similar application, the C# version is 7.38MiB with AoT compilation. This contains a single C++ component (36KiB), overhead from the Windows App SDK (1.69MiB), application support files (40.9KiB) and the application’s executable (5.18MiB!!!). Without AoT, the DLL is 40KiB, but this also requires the 136KiB host application and the various WinRT support files (>25MiB).
The C++ version contains the same C++ component, overhead from the Windows App SDK(1.25MiB), application support files (5.75KiB) and the application’s executable (171KiB). So the .NET overhead is not a nice thing, and it certainly isn’t worth it. If someone had the bright idea of trying to use C# for the C++ projection then using the ABI from C++ would definietely be a much more desirable option.
Read less







Igor Levicki  February 23, 2025


  0  Collapse this comment
Copy link
No, C++/WinRT is C#-ized C++, nothing else.
Besides, biggest / most relevant desktop apps aren't using it and can't use it anyway if they want to be portable and nowadays most do -- it's either Chrome Electron Framework, Microsoft Edge WebView2, or Qt Framework for UI so when you are not using XAML and not restricted to UWP since you aren't targetting Microsoft Store what's exactly the point of using C++/WinRT?
As for your claim that .Net runtime would bloat install size? .Net runtime could have been bundled into the OS just like they did with .Net Framework 4.8(.1). Most C++ developers...Read moreNo, C++/WinRT is C#-ized C++, nothing else.
Besides, biggest / most relevant desktop apps aren’t using it and can’t use it anyway if they want to be portable and nowadays most do — it’s either Chrome Electron Framework, Microsoft Edge WebView2, or Qt Framework for UI so when you are not using XAML and not restricted to UWP since you aren’t targetting Microsoft Store what’s exactly the point of using C++/WinRT?
As for your claim that .Net runtime would bloat install size? .Net runtime could have been bundled into the OS just like they did with .Net Framework 4.8(.1). Most C++ developers bloat their application install and runtime size by using Boost for even the simplest of things anyway.
Read less