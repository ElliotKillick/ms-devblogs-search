Ian Yates  December 6, 2019


  0  Collapse this comment
Copy link
Reminds me a bit of JavaScript
Nice way to get that contextual conversion, which I suspect would work here, is
var isTrue ==!!o;
(disclaimer, typed on a phone keyboard fighting autocorrect, and thus definitely not tested)





GL  December 5, 2019


  0  Collapse this comment
Copy link
Curious: How does COM with generics (e.g., IReference) look like in plain C? What is the interface ID for that? (Where can I find the docs for them…?)





Tautvydas Žilys  December 6, 2019


  0  Collapse this comment
Copy link
The types just get inflated in the headers. IReference int becomes (taken from Windows.Foundation.h):
typedef struct __FIReference_1_intVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface )(__RPC__in __FIReference_1_int * This,
        /* [in] */ __RPC__in REFIID riid,
        /* [annotation][iid_is][out] */
        _COM_Outptr_  void **ppvObject);
    ULONG ( STDMETHODCALLTYPE *AddRef )( __RPC__in __FIReference_1_int * This );
    ULONG ( STDMETHODCALLTYPE *Release )( __RPC__in __FIReference_1_int * This );
 ...Read moreThe types just get inflated in the headers. IReference int becomes (taken from Windows.Foundation.h):
typedef struct __FIReference_1_intVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface )(__RPC__in __FIReference_1_int * This,
        /* [in] */ __RPC__in REFIID riid,
        /* [annotation][iid_is][out] */
        _COM_Outptr_  void **ppvObject);
    ULONG ( STDMETHODCALLTYPE *AddRef )( __RPC__in __FIReference_1_int * This );
    ULONG ( STDMETHODCALLTYPE *Release )( __RPC__in __FIReference_1_int * This );
    HRESULT ( STDMETHODCALLTYPE *GetIids )( __RPC__in __FIReference_1_int * This,
                                            /* [out] */ __RPC__out ULONG *iidCount,
                                            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
    HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( __RPC__in __FIReference_1_int * This, /* [out] */ __RPC__deref_out_opt HSTRING *className);
    HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( __RPC__in __FIReference_1_int * This, /* [out] */ __RPC__out TrustLevel *trustLevel);
    /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Value )(__RPC__in __FIReference_1_int * This, /* [retval][out] */ __RPC__out int *value);
    END_INTERFACE
} __FIReference_1_intVtbl;
interface __FIReference_1_int
{
    CONST_VTBL struct __FIReference_1_intVtbl *lpVtbl;
};
Each generic interface has “base IID” (or w/e it’s called), and then the actual inflation IID can be calculated algorithm described here: https://docs.microsoft.com/en-us/uwp/winrt-cref/winrt-type-system
Read less






Alex Martin  December 5, 2019


  0  Collapse this comment
Copy link
This is why I stick with either plain C or C#…