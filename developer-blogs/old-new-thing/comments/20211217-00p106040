Henke37  December 17, 2021


  0  Collapse this comment
Copy link
Doesn‚Äôt fibers and such involve messing with the stack layout? Oh well, they are all in cohorts anyway.





Antonio Rodr√≠guez  December 17, 2021


  0  Collapse this comment
Copy link
"Now, you (the person who wants to extract every last drop out of your stack before it overflows) might say, ‚ÄúWell, the kernel could just allocate a special emergency stack for stack overflow exceptions.‚Äù"
Above that, it would be a big contradiction. You want to squeeze those extra 12 KB at the end of your memory-hungry stacks. Well, allocating an emergency stack of at least 12 KB for *every* thread on the system would waste more memory by definition, because most threads wouldn't need it. And if it's an emergency stack for processing exceptions, maybe it should be committed at thread...Read more‚ÄúNow, you (the person who wants to extract every last drop out of your stack before it overflows) might say, ‚ÄúWell, the kernel could just allocate a special emergency stack for stack overflow exceptions.‚Äù‚Äù
Above that, it would be a big contradiction. You want to squeeze those extra 12 KB at the end of your memory-hungry stacks. Well, allocating an emergency stack of at least 12 KB for *every* thread on the system would waste more memory by definition, because most threads wouldn‚Äôt need it. And if it‚Äôs an emergency stack for processing exceptions, maybe it should be committed at thread creation, because otherwise, on low memory situations, it could lead to a ‚Äúdomino effect‚Äù where threads would start to fail hard with exceptions which could not be processed. In no time, the system would be unstable and unresponsive.
In other words, for a typical system with thousands of threads, you would end wasting tens or hundreds of megabytes of memory to handle an edge case. All because your process wanted to squeeze an extra 12 KB. *That* is inefficient.
Read less







Joshua Hudson  December 17, 2021


  0  Collapse this comment
Copy link
On a completely unrelated note, it‚Äôs not documented anywhere how much stack you‚Äôre supposed to leave for kernel functions (kernel32.dll, advapi32.dll). This comes up quite a bit when the plan is to allocate hundreds of KB of RAM on the worker thread stack because it‚Äôs faster than heap allocation and trivially provable that it‚Äôs leak free. I‚Äôve been assuming 32KB is enough (including the frames below the start of thread entry ‚Äî now why that‚Äôs more than 1 dword on x86 or 5 qwords on x64 (calling convention) is anybody‚Äôs guess).





Antonio Rodr√≠guez  December 17, 2021
¬∑ Edited

  0  Collapse this comment
Copy link
I suppose it's not documented because it's an implementation detail. If they said "32 KB" now, and then needed to grow it later (say, in Windows 12 they introduce Win128, where WOW64 runs under WOW128 :-P ), they would have their hands tied.
This is one of these cases where if you have to ask where the limit is, you are doing something wrong (like thread number or filesystem handles limits). Stack allocation can be convenient, but you should use it wisely: do not allocate on the stack in recursive functions, and limit it to small chunks (the ones that work...Read moreI suppose it‚Äôs not documented because it‚Äôs an implementation detail. If they said ‚Äú32 KB‚Äù now, and then needed to grow it later (say, in Windows 12 they introduce Win128, where WOW64 runs under WOW128 üòõ ), they would have their hands tied.
This is one of these cases where if you have to ask where the limit is, you are doing something wrong (like thread number or filesystem handles limits). Stack allocation can be convenient, but you should use it wisely: do not allocate on the stack in recursive functions, and limit it to small chunks (the ones that work worst with heap allocations). To me, ‚Äúhundreds of KB‚Äù does not sound so small, at least for a stack allocation.
Read less







Joshua Hudson  December 17, 2021
¬∑ Edited

  0  Collapse this comment
Copy link
I‚Äôm already calling CreateThread() and telling it how much stack to allocate because I know how much that thread‚Äôs going to use (and it‚Äôs more than the default value). What more do you want?
Hands are tied anyway; it just without documenting a reserve value they‚Äôre tied empirically by whoever took the lowest guess that worked.





Á¥ÖÊ®ìÈçÆ  December 17, 2021


  0  Collapse this comment
Copy link
Can‚Äôt you use VirtualAlloc?  I think if you ask the heap manager for some hundred KBs it will pass your request directly to VirtualAlloc anyways (20110930-00/?p=9513).



Joshua Hudson  December 17, 2021


  0  Collapse this comment
Copy link
I do recall one system that had emergency stack, and it worked rather differently. All kernel-mode callbacks were raised on it including stackoverflow. Guess what happened if you overflowed the emergency stack. (I never found out but probably just dead.) This did have an upside of trivial red-zone though. The emergency stack was pretty small; you were supposed to set some flags and potentially call longjmp() to get out of there or exit() to terminate.