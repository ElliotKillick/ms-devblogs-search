GL  December 23, 2024


  0  Collapse this comment
Copy link
Once compiled into DLL/EXE, I don’t think C++ could have a say about what happens if a process loads two modules, because it’s beyond the scope of abstraction C++ standard works on.
Consider a simple case where a C++ program and a manually-written DLL are dynamically linked, clearly C++ standard would have no say about the interaction. It’s the ABI that governs. Now suppose two DLL’s are compiled using the same compiler of the same version, I argue that C++ standard still has no governance of the behavior, because each instance can believe the other DLL could have been manually created...Read moreOnce compiled into DLL/EXE, I don’t think C++ could have a say about what happens if a process loads two modules, because it’s beyond the scope of abstraction C++ standard works on.
Consider a simple case where a C++ program and a manually-written DLL are dynamically linked, clearly C++ standard would have no say about the interaction. It’s the ABI that governs. Now suppose two DLL’s are compiled using the same compiler of the same version, I argue that C++ standard still has no governance of the behavior, because each instance can believe the other DLL could have been manually created by a human (less extremely, each pretends the other is made from another language that happens to be identical to C++ except for its name).
Read less







GL  December 23, 2024


  0  Collapse this comment
Copy link
On a side note, I recently realized the following common pattern in COM might be undefined behavior:
<code>
because `ppv` is `void **`, which cannot be used to access the `IUnknown *`. However I am not sure if this is indeed undefined, or that there might be a clause that permits it. A correct version is
<code>
Of course, I have no doubt that it works in real life (in the same module) and it definitely works when `ppv` comes from another module, in which case the governing rule is ABI, not C++.
Read moreOn a side note, I recently realized the following common pattern in COM might be undefined behavior:
*ppv = static_cast<IUnknown *>(this);
because `ppv` is `void **`, which cannot be used to access the `IUnknown *`. However I am not sure if this is indeed undefined, or that there might be a clause that permits it. A correct version is
*(IUnknown **)ppv = this;
Of course, I have no doubt that it works in real life (in the same module) and it definitely works when `ppv` comes from another module, in which case the governing rule is ABI, not C++.
Read less







GL  December 24, 2024


  0  Collapse this comment
Copy link
Re: Neil. According to C++ specs, casting &punk to void ** is fine (pointers can be freely reinterpreted), but using it to access the punk is invalid (but only the correctly or similarly typed pointers, where “similarly” refers to cv-qualifications, can be used to access the underlying object).
Re: Raymond. Sure, though my point is less about storage size, but more about object type-accessibility.





Neil Rashbrook  December 24, 2024
· Edited

  0  Collapse this comment
Copy link
Writing into ppv is fine, because your IUnknown * gets cast into a void *; it’s the caller passing in the address of the IUnknown * in the first place that’s invalid C++. (Well, they could pass in the address of a void * and then cast the result to IUnknown *, but who wants to do that?)





Raymond Chen Author
December 23, 2024


  0  Collapse this comment
Copy link
Even if it t is disallowed by C++, Windows imposes additional constraints on an implementation, such as “all pointers are 64 bits wide on 64-bit systems”.