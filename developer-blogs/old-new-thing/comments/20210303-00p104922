Jason Cobb  March 3, 2021


  0  Collapse this comment
Copy link
I think there’s a potential data race on signaled. If await_ready() and set() execute concurrently, there can be a concurrent read and write to signaled, giving UB.





Raymond Chen Author
March 16, 2021


  0  Collapse this comment
Copy link
You’re right. Changed to a std::atomic with explicitly relaxed access.





Sunil Joshi  March 3, 2021


  0  Collapse this comment
Copy link
I think the lock orders it. Signaled is only changed when the lock is held. await_ready is just an optimisation anyway. If await_ready returns false, await_suspend will be called. That is protected by the lock. And signalled is again checked. So even if set and await_ready race, the lock ensures the correct outcome.





Jason Cobb  March 5, 2021


  0  Collapse this comment
Copy link
If the program has a data race, you can’t say it just works; the presence of a data race is UB. You cannot reason about the behavior of a program when a data race is present. And it doesn’t matter if signaled is only changed by one thread concurrently if it can be read while it’s being changed; that’s still a data race.





Akash Bagh  March 3, 2021


  0  Collapse this comment
Copy link
This comment has been deleted.