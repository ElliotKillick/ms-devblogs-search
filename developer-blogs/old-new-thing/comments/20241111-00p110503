alan robinson  November 12, 2024


  0  Collapse this comment
Copy link
Maybe I don’t uses a debugger often enough (guilty!) but how “easy” is it to place a breakpoint in data? Other than when debugging ASM code I don’t see how that could occur.
Still, an interesting point to ponder.





Me Gusta  November 12, 2024


  0  Collapse this comment
Copy link
@alan robinson
This is from the processor, it also requires kernel mode support. The debug registers 0-3 allow a virtual address to be written to it, and then set it so that the processor raises an exception when the address is modified. I know the AMD references better, and you can find information on this in the AMD64 Architecture Programmer Reference volume 2 chapter 13 (page 389).
@Joe Beans
It shouldn't need to do anything different than native code. Managed code will be compiled into native code and once it is compiled then it will stay in memory. Once that happens then native...Read more@alan robinson
This is from the processor, it also requires kernel mode support. The debug registers 0-3 allow a virtual address to be written to it, and then set it so that the processor raises an exception when the address is modified. I know the AMD references better, and you can find information on this in the AMD64 Architecture Programmer Reference volume 2 chapter 13 (page 389).
@Joe Beans
It shouldn’t need to do anything different than native code. Managed code will be compiled into native code and once it is compiled then it will stay in memory. Once that happens then native rules apply.
Read less







Joe Beans  November 12, 2024


  0  Collapse this comment
Copy link
How does managed code do it? Does the JIT reserve a NOOP in between every source line?




Almighty Toomre  November 11, 2024


  5  Collapse this comment
Copy link
Fun fact about the “replace the instructions with an interrupt” technique: it was patented (number 3415981) by my dad back in the 60’s when he was building big computers for RCA. And let me just say, old patents are way cooler than current ones: they have fancy ribbons and embossed seals on them





Nir Lichtman  November 11, 2024


  0  Collapse this comment
Copy link
Really cool, didn’t know this technique goes back to the 60s!





紅樓鍮  November 12, 2024


  1  Collapse this comment
Copy link
Re Antonio:
RISC-V takes it a step further, and both the “all 0’s” and “all 1’s” patterns are illegal instructions (remember that unprogrammed EEPROMs usually have the “all 1’s” pattern).





Antonio Rodríguez  November 11, 2024


  1  Collapse this comment
Copy link
In the 70s it was already in wide use: in the 6502 (from 1975) the software interruption instruction is called BRK. The Apple II “Monitor”, the debugger built into the firmware, used it to implement step by step execution and traces.
Making BRK’s opcode 0x00 was a nice choice: if there was a jump to nowhere (code not loaded, incorrect pointer or offset, return with stack out of sync…), it would not take long to find a BRK and stop execution, as 0 is easily the most frequent byte value in data. In modern terms, we would call it a “fail fast” strategy.