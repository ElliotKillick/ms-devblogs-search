switchdesktopwithfade@hotmail.com  August 16, 2021


  0  Collapse this comment
Copy link
I’m curious — the environment variable block has a number of pseudovariables that save per-drive paths for some reason — what are these used for, if not current directory?
Examples:
=C:=C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\Common7\\IDE
=E:=E:\\My Projects





Raymond Chen Author
August 16, 2021


  0  Collapse this comment
Copy link
As noted, they are for backward compatibility, so that Windows can pretend that each drive has a current directory (even though it doesn’t). Environment variables are process-global and are therefore subject to the same race conditions as the current directory.




Joshua Hudson  August 16, 2021


  0  Collapse this comment
Copy link
Glibc added per-thread current directory awhile ago for anybody who wants to use it. In the Windows world, the thing is available if you're willing to dig out the Nt Native APIs but Win32 has no such concept. Too bad.
In any case, both my GUI applications and my services set their current directory to be the application directory at startup; leaving only command line programs to not do so, in which case they never set their current directory but rather inherit it from the calling process; thus interpret relative paths on the command line or response file correctly.
Thus I can...Read moreGlibc added per-thread current directory awhile ago for anybody who wants to use it. In the Windows world, the thing is available if you’re willing to dig out the Nt Native APIs but Win32 has no such concept. Too bad.
In any case, both my GUI applications and my services set their current directory to be the application directory at startup; leaving only command line programs to not do so, in which case they never set their current directory but rather inherit it from the calling process; thus interpret relative paths on the command line or response file correctly.
Thus I can use relative paths at will and not worry about the thread race in GetFullPathName because it will not come up.
(Pedantic stupid comment: Do not inject a thread into another process and call SetCurrentDirectory. That’s not yours!)
Read less







Jan Ringoš  August 19, 2021


  0  Collapse this comment
Copy link
NT APIs can set per-thread current directory? Would you know which one?





Joshua Hudson  August 20, 2021


  0  Collapse this comment
Copy link
OBJECT_ATTRIBUTES structure; but it will not back-propagate to Win32 so don’t get your hopes up.




Antonio Rodríguez  August 16, 2021


  0  Collapse this comment
Copy link
Also, the open and save common dialogs change the current directory to the one where the selected file is, at least in classic Visual Basic.
In the beginning, I used to reset the current directory to the executable directory after each call. But then I evolved to do what Raymond recommends, and started passing only full paths to APIs and file calls. Every file path is parsed by a function called UnpackFilename(), which extends a relative path based on an explicit origin, which, depending on where the relative path is coming from, can be the executable directory, the application's directory in...Read moreAlso, the open and save common dialogs change the current directory to the one where the selected file is, at least in classic Visual Basic.
In the beginning, I used to reset the current directory to the executable directory after each call. But then I evolved to do what Raymond recommends, and started passing only full paths to APIs and file calls. Every file path is parsed by a function called UnpackFilename(), which extends a relative path based on an explicit origin, which, depending on where the relative path is coming from, can be the executable directory, the application’s directory in Program Data, or the directory containing the document opened by the user.
Classic Visual Basic is single-threaded (you can create multiple threads, but as there is no support from the runtime, you are on your own with the Windows API and must take care of synchronization yourself), but the current directory can be changed by COM objects, ActiveX controls, DLLs (injected or explicitly loaded) or even third-party modules imported into your project, so relying on it being correctly set only gives headaches and Heisenbugs. Yes, it’s rude changing the drapes of the home you are a guest to, but that doesn’t stop people from doing it…
Read less







John Elliott  August 17, 2021


  0  Collapse this comment
Copy link
Ah, happy memories of the time a printer driver decided to change the current directory out from under me…




skSdnW  August 16, 2021


  0  Collapse this comment
Copy link
GetOpenFilename is documented to ignore the NOCHANGEDIR flag and might change the current directory.





Joshua Hudson  August 16, 2021


  0  Collapse this comment
Copy link
I am one more fault from a bad explorer extension away from calling GetOpenFileName out-of-process anyway.