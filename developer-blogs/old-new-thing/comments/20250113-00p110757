Igor Levicki  January 20, 2025


  0  Collapse this comment
Copy link
Raymond,
I am looking at this new if syntax, it’s mind boggling that no one thought of adding a new keyword (e.g. when) instead of using a semicolon:
if (auto found = m.find(k) when found != m.end()) {
    // do something with it
}
It helps differentiate new if syntax from existing loop (for / do / while) syntax, better visually separates initialization from conditional expression all while clearly labelling said conditional expression. It would’ve been so much more readable.





Georg Rottensteiner  January 13, 2025


  0  Collapse this comment
Copy link
I wonder how much compiler optimization comes into play here.
I was under the impression, that yes, the m[k] = v  would cause a construction plus assignment, but the compiler would optimize that away?
One of the reasons there’s such a performance difference between debug and release builds with STL container usage.





Kevin Norris  January 13, 2025


  0  Collapse this comment
Copy link
Frankly, the compiler is just not very good at optimizing out things like this. In order to remove the default construction, the compiler needs to prove that the constructor has no side effects that escape. If LTO is disabled, then this never gets off the ground, unless the constructor happens to be in the same TU as the callsite. But even when LTO is enabled, the default constructor will usually recursively construct all fields of the class or struct, and proving that none of those constructors go on to have any side effects may be too hard for big or...Read moreFrankly, the compiler is just not very good at optimizing out things like this. In order to remove the default construction, the compiler needs to prove that the constructor has no side effects that escape. If LTO is disabled, then this never gets off the ground, unless the constructor happens to be in the same TU as the callsite. But even when LTO is enabled, the default constructor will usually recursively construct all fields of the class or struct, and proving that none of those constructors go on to have any side effects may be too hard for big or complicated classes.
This is the same reason that copy elision was invented – just like it’s hard to prove that default constructors don’t have side effects, it is also hard to prove that copy and move constructors don’t have side effects.
Read less







Igor Levicki  January 20, 2025


  0  Collapse this comment
Copy link
The MSVC compiler isn’t good at optimizing pretty much anything. It still can’t vectorize almost any loops apart from the simplest memset or SAXPY types.