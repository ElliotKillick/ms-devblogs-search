Baltasar García  December 5, 2023


  0  Collapse this comment
Copy link
When I studied computer science with Pascal as the programming language, inner functions were a Big Thing. They faded with time and especially after OO. Nowadays, apart from Pascal there is only one modern language I know that allows inner functions: Python (though, well, it was designed in the 90’s).
Go allows them, but more as a “lambda” than a true inner function.
It seems that the Zig people is considering it.





紅樓鍮  December 5, 2023


  0  Collapse this comment
Copy link
Well if you think about it, Pascal-style inner functions work in functionally the same way as C++ lambdas that capture by reference do: they both refer to objects that live on their (lexical) parent's stack frame, without causing them to be spilled onto the heap. And in principle, the data part of  in C++ can consist of just the parent's frame pointer, regardless of how many distinct variables are captured (although I'm not aware of any compiler that actually does this).
And since lambdas are equivalent to objects, you can say that Pascal inner functions are in fact very closely...Read moreWell if you think about it, Pascal-style inner functions work in functionally the same way as C++ lambdas that capture by reference do: they both refer to objects that live on their (lexical) parent’s stack frame, without causing them to be spilled onto the heap. And in principle, the data part of [&](...) { ... } in C++ can consist of just the parent’s frame pointer, regardless of how many distinct variables are captured (although I’m not aware of any compiler that actually does this).
And since lambdas are equivalent to objects, you can say that Pascal inner functions are in fact very closely related to objects; the only thing holding back Pascal’s inner functions is that vanilla Pascal doesn’t support first class functions. (Free Pascal seems to support first-class functions as sugar on top of its objects-oriented system, similar to how Java does it.)
Read less







Dmitry  December 5, 2023


  0  Collapse this comment
Copy link
I guess, we should define the ”vanilla Pascal” and ”first-class functions” more precisely, ’cause function pointers are a thing since at least Borland/Turbo Pascal, they are assignable, can be passed as parameters to subroutines (with all methods of passing parameters normal types have), can be returned from functions, compared, etc. That seems to be enough in general to be considered first-class citizens. Catching scopes seems to be a separate feature.
And passing procedures as parameters is mentioned in Wirth’s recollections about the development of Pascal, so the first-class-ness seems to have been there like for ages.





紅樓鍮  December 5, 2023


  0  Collapse this comment
Copy link
I do remember Pascal supporting pointers, though my knowledge of it was limited and I wasn’t aware of it supporting function pointers. However, function pointers are not quite the same as first-class functions in functional programming languages since the latter can capture free variables, and will need to be implemented either as C++-style objects with vtables or Rust-style fat pointers at low level. Both implementation strategies require the function pointer part of the function object to take a context pointer as an argument that’s not reflected at the language level.



Dmitry  December 4, 2023


  0  Collapse this comment
Copy link
Skipping semicolons right before end’s is not necessary, BTW, and is not quite convenient except for maybe a few cases. Pascal and Delphi do have the concept of empty statement which lets one still put semicolons there without breaking the syntax rules.