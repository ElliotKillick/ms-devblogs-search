Neil Rashbrook  December 13, 2019


  0  Collapse this comment
Copy link
Sorry if I’m overlooking something obvious, but what has the type of the Async got to do with whether it has a Completed function?





Raymond Chen Author
December 13, 2019


  0  Collapse this comment
Copy link
This is specifically about overriding the C++/WinRT behavior of resuming in the same context. If you want the default behavior, you could just use the awaiter built into C++/WinRT and not bother writing a custom awaiter. So yes, this technique works for anything that has a Completed function, but in practice the object is a C++/WinRT object because that’s why you’re writing it.





Neil Rashbrook  December 14, 2019


  0  Collapse this comment
Copy link
Ah, so the object has a Completed function because you’re writing it, but it’s one of those Async types because those would normally resume in the same context?





Raymond Chen Author
December 16, 2019


  0  Collapse this comment
Copy link
The IAsyncInfo interface has a Completed method. The C++/WinRT library provides a default awaiter for IAsyncInfo that resumes in the same context. This article is using what we learned to create a custom awaiter that resumes in any context.