David Haim  October 20, 2022
· Edited

  0  Collapse this comment
Copy link
There's also a philosophical aspect to this question.
Pointers always have a bi-polar character - there's the pointer, which is the variable itself holding the memory address, and there's the pointee, which is the actual object that the pointer points to.
when we talk about pointers, we need to make the distinction between the pointer-variable and the pointee.
In traditional C++ (pre c++11), we create the pointee (by allocating the object on the stack or heap, usually), then we assign the actual pointer-variable to point to it - we build the pointee and then assign the pointer.
unique_ptr and shared_ptr imitate...Read moreThere’s also a philosophical aspect to this question.
Pointers always have a bi-polar character – there’s the pointer, which is the variable itself holding the memory address, and there’s the pointee, which is the actual object that the pointer points to.
when we talk about pointers, we need to make the distinction between the pointer-variable and the pointee.
In traditional C++ (pre c++11), we create the pointee (by allocating the object on the stack or heap, usually), then we assign the actual pointer-variable to point to it – we build the pointee and then assign the pointer.
unique_ptr and shared_ptr imitate this behavior – their constructor deals with the pointer-variable and not the pointee, just like a raw pointer is always constructed/assigned, but never creates the pointee itself, unique_ptr and shared_ptr are always constructed/assigned, never create the pointee themselves.
Those who suggest to have a constructor which builds the pointee are opening a pandora box to a world where the distinction between the pointer and the pointee are blurred. If you can write unique_ptr p(…) and make the pointer create the pointee, you should be also able to write int* p{4} and expect it to be compiled to int* p = new int(4); if the latter doesn’t make sense, the first one shouldn’t either.
Read less