Alex Nesemann  August 12, 2019


  0  Collapse this comment
Copy link
The comparison mnemonics come from the Motorola 68000's branch instructions. Hitachi was a major second source of 68Ks, so it's not much of a suprise that they borrowed from it.
CMP/STR is handy when searching for any byte, not just zeroes. Just replicate the byte value in the register. If you're looking for ASCII 'a', you would compare with 0x61616161.
Answer to exercise 1:
SETT -> CMP/EQ R0, R0
CLRTT -> CMP/NE R0, R0
Answer to excercise 2:
SUBC R0, R0 (R0 = T ? -1 : 0)
ADD #1, R0
(On the SH2A you can cheat and use the...Read moreThe comparison mnemonics come from the Motorola 68000’s branch instructions. Hitachi was a major second source of 68Ks, so it’s not much of a suprise that they borrowed from it.
CMP/STR is handy when searching for any byte, not just zeroes. Just replicate the byte value in the register. If you’re looking for ASCII ‘a’, you would compare with 0x61616161.
Answer to exercise 1:
SETT -> CMP/EQ R0, R0
CLRTT -> CMP/NE R0, R0
Answer to excercise 2:
SUBC R0, R0 (R0 = T ? -1 : 0)
ADD #1, R0
(On the SH2A you can cheat and use the MOVRT instruction (move reverse T))
Read less







Kasper Brandt  August 11, 2019


  0  Collapse this comment
Copy link
> T receives signed underflowAn underflow is when a floating point number is too small to be representable. A negative overflow is still an overflow.





Neil Rashbrook  August 9, 2019


  0  Collapse this comment
Copy link
> It took me a while to come up with a plausible explanation for HS.
I think ARM uses HS as a synonym for CS (carry set). (But then again it use a single comparison operator corresponding to (most of) these with multiple conditions on instructions.)





Harry Johnston  August 8, 2019


  0  Collapse this comment
Copy link
I think this will work for exercise 2, but I’m not certain that I’ve understood the meaning of “borrow” correctly:
CLRT
NEGC R0, R0
NEG R0, R0





Daniel Sturm  August 8, 2019


  0  Collapse this comment
Copy link
I had to look up the exact semantics too. The ISA description gives it as follows (this will look awful I’m sure but I hope it’ll be readable)
NEGC(long m,long n) /* NEGC Rm,Rn */
{
    unsigned long temp;
    temp=0-R[m];
    R[n]=temp-T;
    if (0<temp) T=1; else T=0;
    if (temp<R[n]) T=1;
    PC+=2;
}




Zak Larue-Buckley  August 8, 2019


  0  Collapse this comment
Copy link
Exercise 1:
CMP/EQ r0, r0 => T = 1
CMP/HI r0, r0 => T = 0
Exercise 2:
CMP/PL Rx => T = Rx > 0…but won’t work for negative Rx. Can’t think of way to solve without destroying Rx.