Neil Rashbrook  September 20, 2019


  0  Collapse this comment
Copy link
> When git traces the history of the foods-new file, it’ll see that the file was created via rename from foods, so git will use food‘s history to build the line history.
If only it would. Just this week, I wanted to merge master into a branch which had been forked 443 commits ago. The merge failed because of a modify/delete conflict, although this was really a rename. To save time I simply merged in both the parent of and the commit that performed the rename, at which point the file was now renamed locally, so I could merge in master.
Read more> When git traces the history of the foods-new file, it’ll see that the file was created via rename from foods, so git will use food‘s history to build the line history.
If only it would. Just this week, I wanted to merge master into a branch which had been forked 443 commits ago. The merge failed because of a modify/delete conflict, although this was really a rename. To save time I simply merged in both the parent of and the commit that performed the rename, at which point the file was now renamed locally, so I could merge in master.
Read less







Daniel Sturm  September 20, 2019


  0  Collapse this comment
Copy link
You probably ran into the changed file limit where git uses a simpler algorithm tutto figure out renames. You can increase the limit to give git more time to figure it out.
Don’t remember the command-line argument for that anymore





Neil Rashbrook  September 21, 2019


  0  Collapse this comment
Copy link
Actually the file hadn’t been changed, but just to be sure, I tried it with find-renames=100 and that worked…



cheong00  September 19, 2019


  1  Collapse this comment
Copy link
I suggest to add “git” tag to this series. These posts contains useful tricks that I would very likely want to revisit later.