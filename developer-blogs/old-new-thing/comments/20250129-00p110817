Lucian Jalba  January 29, 2025


  0  Collapse this comment
Copy link
Of course, this being C++: the pointer should be a std::optional of std::reference_wrapper.





Jacob Manaker  January 30, 2025


  1  Collapse this comment
Copy link
I get that your comment is a joke, but I feel obliged to point out that C++ style already eschews std::optional<std::reference_wrapper> because it is less space-efficient.




Bwmat  January 29, 2025


  1  Collapse this comment
Copy link
Any reason that operator= wasn’t templated on the operand type & using std::forward?





Jacob Manaker  January 30, 2025
· Edited

  0  Collapse this comment
Copy link
Templating doesn’t add generality, because the container->insert call still must convert the parameter to a Container::value_type.  It also doesn’t add speed, because the result of the conversion is an xvalue, and so gets moved into the container (as would need to happen inside container->insert).
But templating does add debugging complexity.  Suppose operator= is templated, but the user screws up and passes a value that could not be converted to Container::value_type.  Then the “missing conversion” error would appear in our call to container->insert, not the user’s assignment.





Bwmat  January 30, 2025


  0  Collapse this comment
Copy link
You _could_ add a requires clause… but I see your point
It also could increase speed if the container happened to have an emplace method…



LB  January 29, 2025


  0  Collapse this comment
Copy link
I think you might need to explicitly default the default constructor since the compiler doesn’t generate an implicit one if you provide any constructors yourself