Daniel Marschall  July 4, 2019


  0  Collapse this comment
Copy link
Hello, I have a question in regards Version-Information. I have looked at the version information of the SQL Server 2017 setup (original filename ‚ÄúSqlSetupBootstrapper.exe‚Äù) which has the version attribute ‚ÄúGoldenBits‚Äù with value ‚ÄúTrue‚Äù. I did not find any information about ‚ÄúGoldenBits‚Äù. I am curious what purpose it has, or if it is just some kind of easteregg üôÇ





John Elliott  July 1, 2019


  0  Collapse this comment
Copy link
Thought I‚Äôd posted this before, but perhaps it got filtered as spam.
I suspect, based on comments in the published MS-DOS 2.0 source, that MS-DOS (2.x+) returns the major version in AL for compatibility with MS-DOS 1, which doesn‚Äôt implement that function, and returns AL=0 leaving AH unchanged. In practice this means it returns 3000h. So if MS-DOS 2 had returned the major version in AH, there would have had to be special case checks for a major version of 30h; but by returning the major version in AL, checks for ‚ÄòAL >= 2‚Äô will work as expected.





Raymond Chen Author
July 2, 2019


  0  Collapse this comment
Copy link
Sorry, it got held for too many links. I fixed the formatting and approved it.




John Elliott  June 28, 2019


  0  Collapse this comment
Copy link
The published MSDOS 2.x source code for the Get_Version function says:
<code>
And looking at the MS-DOS 1.25 source in the same release:
<code>
So... that suggests MSDOS 2.0 returned the major version in AL for backward compatibility: MSDOS 1.x would return AH=30h, AL=00h. And if you're checking for 'major version >= 2' you don't want to be special-casing 'except if major version = 30h'.
Read moreThe published MSDOS 2.x source code for the Get_Version function says:
; Outputs:
;       OEM number in BH
;       User number in BL:CX (24 bits)
;       Version number as AL.AH in binary
;       NOTE: On pre 1.28 DOSs AL will be zero
And looking at the MS-DOS 1.25 source in the same release:
COMMAND: ;Interrupt call entry point
        CMP     AH,MAXCOM
        JBE     SAVREGS
BADCALL:
        MOV AL,0
IRET:  IRET
So‚Ä¶ that suggests MSDOS 2.0 returned the major version in AL for backward compatibility: MSDOS 1.x would return AH=30h, AL=00h. And if you‚Äôre checking for ‚Äòmajor version >= 2‚Äô you don‚Äôt want to be special-casing ‚Äòexcept if major version = 30h‚Äô.
Read less







Yuhong Bao  June 27, 2019


  0  Collapse this comment
Copy link
This reminds me of the ‚ÄúWindows 3.95‚Äù debacle. I wonder how many software required Windows 3.1 in 1993 and 1994.





Jernej Simonƒçiƒç  July 4, 2019


  0  Collapse this comment
Copy link
That was done because programs did comparisons like `if (version.major >= 3 && version.minor >=1)`




Keith Patrick  June 27, 2019


  0  Collapse this comment
Copy link
Was any though given to having a comparison API instead of the built-in operators? (immediately, I‚Äôm asking myself questions like is this like CompareTo where you return -1, 0, 1?  Was anyone doing CompareTo like that in those days?)





Henrik Andersson  June 27, 2019


  0  Collapse this comment
Copy link
I must be getting too used to this, because I instinctively guessed ‚Äúbecause that‚Äôs what DOS did‚Äù when I read the title.





Ian Boyd  June 27, 2019


  0  Collapse this comment
Copy link
And for those who don‚Äôt like old version checking API, they can use current version checking API. Which you should use anyway, since so many people get it wrong.
We all remember the Java that mistook Windows 9 for Windows 95.
And the  asp.net framework that mistook Internet Explorer 10 for ie 1.





David Walker  June 28, 2019


  0  Collapse this comment
Copy link
‚ÄúMistook Windows 9 for Windows 95‚Äù???  What was Windows 9?  I never saw such a thing.





Jernej Simonƒçiƒç  July 4, 2019


  0  Collapse this comment
Copy link
IIRC, there was one public beta (of what later became Windows 10) that had a 9.x version number, and identified itself as Windows 9.



cricwood@nerdshack.com  June 27, 2019


  0  Collapse this comment
Copy link
What a conincidence! I was using GetVersion just the other day, so all of you will be blessed with a pile of useless trivia.
First of all, that major version check was only sufficient until maybe Windows XP(?) but incorporating the minor check was still pretty size-effective:
<code>
If you just wanted to detect major Windows releases, this served you well until Windows 10 appeared. Now you could keep that check, but in order to detect Windows 10 as 0xA00, you had to add a pretty huge application compatibility manifest to your executable (350 B, probably?). It would be unfair...Read moreWhat a conincidence! I was using GetVersion just the other day, so all of you will be blessed with a pile of useless trivia.
First of all, that major version check was only sufficient until maybe Windows XP(?) but incorporating the minor check was still pretty size-effective:
// ror ax
if(_bswap_ushort((USHORT)GetVersion()) >= 0x501) // Windows XP or later
If you just wanted to detect major Windows releases, this served you well until Windows 10 appeared. Now you could keep that check, but in order to detect Windows 10 as 0xA00, you had to add a pretty huge application compatibility manifest to your executable (350 B, probably?). It would be unfair to count that against version detection because you should have done that anyway, but if you hadn‚Äôt this was your last call!
And now Windows 10 is here to stay forever. And you can only differentiate individual releases by their build number. This could be done pretty size-effective in theory:
bswap eax
ror ax
but I couldn‚Äôt get a single compiler to emit this code. The closest candidate was
DWORD BbmM = GetVersion();
DWORD OOmM = 0xFFFF & BbmM;
DWORD MmOO = _bswap_ulong(OOmM);
DWORD OOBb = BbmM >> 16;
DWORD version = MmOO | OOBb;
if(version >= 0x0A0047BA) // Windows 10 1903 or later
‚Ä¶ which is a magnitude larger, but 2019 bytes are a lot smaller than 1993 bytes!
Snarky comment: The Windows 10 build number was 10240 in 2015 and is now 18362 (1903). Extrapolating this pace, GetVersion() and GetVersionEx() will break in 16 years (the highest bit in the build is reserved). EVERYBODY PANIC!
‚Äì You have been thinking a lot about this function call, haven‚Äôt you?
Yes.
‚Äì Why not just use IsWindowsVersionOrGreater()?
Come on, just look at the assembly it generates! The purity of my beautiful program will not be tainted by such wrappers! I‚Äôll be darned if I include a 100-B wrapper function where I can also generate a 15-B call by typing six lines of incomprehensible bit twiddling! Zere vill be order in mein Burger!
‚Äì But GetVersion() is REALLY deprecated and forbidden in SDL! And what are you trying to achieve anyway!
I‚Äôm just trying to detect Dark Mode in Windows 10, which MS decided
1) to not (yet) to port to native Win32 applications even though there are two theme APIs already and
2) to not even offer a native API call to detect it.
So I‚Äôm left clueless just like everyone else and I guess, if you‚Äôre in WinAPI, do like the WinAPIians do ‚Äì use the most obscure unsupported way to re-invent the wheel there is üôÇ
Read less







John Elliott  July 1, 2019


  0  Collapse this comment
Copy link
Have the Win32 launch a UWP app and screenscrape it to find out what colours it‚Äôs using? (I kid‚Ä¶ well, mostly).





Paradice .  June 29, 2019


  0  Collapse this comment
Copy link
Hmm, I wonder if it‚Äôs the right choice to try and detect Dark Mode ‚Äì should you instead just retrieve the Foreground & Background UIColors (which is painful enough in win32, acknowledged), but then use them to paint whatever you‚Äôre painting? ATM they‚Äôre pure white & black in dark mode, but that‚Äôs probably not guaranteed. 





cricwood@nerdshack.com  June 29, 2019


  0  Collapse this comment
Copy link
I‚Äôm not sure what you mean with retrieving foreground & background colors. Dark mode affects Store apps only. All Win32 theme APIs (classic GetSysColor(), Vista‚Äôs GetThemeSysColor() and whatever there was for XP) keep returning the light colors no matter what you do.
----
This is my current main reason for still sticking to Windows 7 with my main system ‚Äì almost all programs use GetSysColor() well, so you get a perfect Dark Mode by switching to the Classic theme and customizing its colors. This worked even with websites in Internet Explorer years back (long before people talked about Dark Mode...Read moreI‚Äôm not sure what you mean with retrieving foreground & background colors. Dark mode affects Store apps only. All Win32 theme APIs (classic GetSysColor(), Vista‚Äôs GetThemeSysColor() and whatever there was for XP) keep returning the light colors no matter what you do.
‚Äî-
This is my current main reason for still sticking to Windows 7 with my main system ‚Äì almost all programs use GetSysColor() well, so you get a perfect Dark Mode by switching to the Classic theme and customizing its colors. This worked even with websites in Internet Explorer years back (long before people talked about Dark Mode APIs in browsers or started programming their own dark modes into websites).
But on Windows 8+, the Classic Theme is gone, all Win32 apps are always colored light, and my eyes burn.
I understand that the Dark Mode caused lots of problems and hat to be rushed out:
‚Äì all Common Controls need adjustment, and they only finished the few that Edge uses
‚Äì undocumented flags had to be introduced to control style bits
‚Äì plus all the usual compatibility problems we Old New Thing readers know oh so well
I understand that it made no sense to add an API to Win32 apps at this point, and I still hope and pray that it comes eventually.
But the one thing I just don‚Äôt understand, after having used a dark Classic theme on Windows XP / Vista / 7 for more than ten years with almost no problems, is: Why did MS abandon GetSysColors() and then re-invented the whole thing from scratch?!
From the bottom of my heart I hope that I can read the answer on Raymond‚Äôs blog in ten or fifteen years and that it won‚Äôt be ‚Äúpolitics‚Äù üôÇ
Read less






Jan Ringo≈°  June 27, 2019


  0  Collapse this comment
Copy link
There are still more things that can be safely detected only by checking version number: A lot of APIs don't document behavior when unknown flag is used on older version, so your safest bet is to check version/build, and use the flag only then.
Why couldn't they simply increment the minor version number, even if it needed another GUID in manifest, is beyond me. Very stupid marketing decission to keep with 10.0 if you ask me. At least Server 2019 could've been 10.1.
And mentioning manifests, fear not, there's now more mess glued on it instead of reusing existing stuff,...Read moreThere are still more things that can be safely detected only by checking version number: A lot of APIs don‚Äôt document behavior when unknown flag is used on older version, so your safest bet is to check version/build, and use the flag only then.
Why couldn‚Äôt they simply increment the minor version number, even if it needed another GUID in manifest, is beyond me. Very stupid marketing decission to keep with 10.0 if you ask me. At least Server 2019 could‚Äôve been 10.1.
And mentioning manifests, fear not, there‚Äôs now more mess glued on it instead of reusing existing stuff, maxVersionTested Id=‚Äù10.0.18298.0‚Äù in compatibility/application section. Not sure how much that actually affects though.
Read less







Jernej Simonƒçiƒç  July 4, 2019


  0  Collapse this comment
Copy link
The reason for using GUIDs to indicate Windows version compatibility was to prevent programs from doing maxVersionTested_Id=‚Äù99.99.99999.99999‚Ä≥, because you can be certain that some would do exactly this.