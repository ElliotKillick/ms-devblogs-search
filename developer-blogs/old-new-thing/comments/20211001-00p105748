Edison Hua  October 14, 2021


  0  Collapse this comment
Copy link
Thanks for the informative four part series.





Joshua Hudson  October 3, 2021


  0  Collapse this comment
Copy link
It occurs to me there are three general patterns where one would use this.
1) You are passing a stream to something that reads it. If the memory is in a pre-existing HGLOBAL you would want to retain ownership. The code structure will ensure that the memory is freed correctly. I'm kind of disappointed you can't pass it an arbitrary pointer to a blob.
2) You are passing a stream to something that reads it as a persistent stream. (The true in-memory version of a file stream.) In this case you would want to copy to a new HGLOBAL and give the...Read moreIt occurs to me there are three general patterns where one would use this.
1) You are passing a stream to something that reads it. If the memory is in a pre-existing HGLOBAL you would want to retain ownership. The code structure will ensure that the memory is freed correctly. I’m kind of disappointed you can’t pass it an arbitrary pointer to a blob.
2) You are passing a stream to something that reads it as a persistent stream. (The true in-memory version of a file stream.) In this case you would want to copy to a new HGLOBAL and give the stream ownership.
3) You are passing the stream to a geneartor. You would essentially always want to have it allocate and manage the stream, and when the generator finishes grab the HGLBOAL and do what you want with the memory, that is copy it into the middle of something else. I’m having a hard time imaging why you would want to keep the existing HGLBOAL but again if you did the code structure would protect.
An interesting API change that could be added on immediately and simplify the worst of the problems for new applications:
IStreamGlobal { /* Interfaces are immutable so we have to add one */
    HGLBOAL SwapHGlobal(HGLOBAL newMemory);
}
We extend the semantics to allow NULL as a HGLOBAL to both this function and to CreateStreamOnHGlobal; NULL is treated as a stream of zero length. The idea is you would always pass TRUE for fDeleteOnRelease and when the time comes to get your HGLOBAL back or gather it up in the first place you call SwapHGlobal to get yours and put the NULL in. There’s already an IStream::Seek interface member. (Note that I’m used to seek()-like API functions not validating their position and having a file pointer well off the end of the file not being an error condition. Fill with zeros on actual write.)
Read less