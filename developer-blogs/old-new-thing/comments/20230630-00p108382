Logan McDougall  July 1, 2023
· Edited

  1  Collapse this comment
Copy link
Seems like this will cause the awaiting_coroutine to resume inside of the final_suspend, meaning that the awaited coroutine will live as long as the awaiting coroutine. If you were to repeatedly await coroutines of this type inside an outer coroutine that contains a handler loop then this would result in ever increasing memory usage.
<code>
Is there some compiler magic that turns the above code into a proper symmetric transfer? I am not privy to such compiler internals, so I use a custom final_suspend awaiter that returns the awaiting_coroutine to accomplish this. Then I copy the result and destroy() the awaited...Read moreSeems like this will cause the awaiting_coroutine to resume inside of the final_suspend, meaning that the awaited coroutine will live as long as the awaiting coroutine. If you were to repeatedly await coroutines of this type inside an outer coroutine that contains a handler loop then this would result in ever increasing memory usage.
std::suspend_never final_suspend() noexcept {
    awaiting_coroutine.resume();
    return {};
}
Is there some compiler magic that turns the above code into a proper symmetric transfer? I am not privy to such compiler internals, so I use a custom final_suspend awaiter that returns the awaiting_coroutine to accomplish this. Then I copy the result and destroy() the awaited coroutine handle in await_resume(). But if there’s some guarantee that the compiler can transform what you’ve written into a symmetric transfer (that doesn’t leak memory), then I wouldn’t have to do all that.
Read less