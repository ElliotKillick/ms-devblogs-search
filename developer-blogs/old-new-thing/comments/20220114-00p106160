Ian Yates  January 18, 2022


  0  Collapse this comment
Copy link
If you had them split the return from the calculation, by assigning to a temporary variable, I suspect they may have seen it more obviously too.





GL  January 14, 2022
· Edited

  0  Collapse this comment
Copy link
My guess is that this syntax was chosen to align with the C# and JavaScript languages, both of which overload the return statement in this way.
I thought C# and JavaScript had the “async” marker on the method so the compiler knew which kind of “return” was being used in the body. On the other hand, can you do something like the following in C++?
IAsyncOperation<bool> HelperFunction();
IAsyncOperation<bool> MainFunction()
{
    if (condition) return HelperFunction();
    co_return false;
}





紅樓鍮  January 15, 2022
· Edited

  0  Collapse this comment
Copy link
As an unrelated side note, if the branch to  is before any  then you could factor the ing part out into a lambda:
<code>
However, you'd have to be wary about its bad implications (blog.stephencleary. com/2016/12/eliding-async-await.html):
Fixing the above problems would require code like this:
<code>
In other words, you'd be vastly better off to just .  (Coding like this buys you little if the compiler can allocate 's coroutine frame inline in 's frame, although I doubt  et al. are designed with that optimization in mind, which could encourage you to actually write code like above.)
Read moreAs an unrelated side note, if the branch to HelperFunction() is before any co_await then you could factor the co_awaiting part out into a lambda:
// do not use code in italics in production
IAsyncOperation<bool> MainFunction() {
  if (condition)
    return HelperFunction();
  return [=]() -> IAsyncOperation<bool> {
    co_await something();
    co_return false;
  }();
}
However, you’d have to be wary about its bad implications (blog.stephencleary. com/2016/12/eliding-async-await.html):

Object lifetimes are now a mess (oldnewthing/20190116-00/?p=100715):
// do not use code in italics in production
IAsyncOperation<bool> MainFunction() {
  http_client cl = make_http_client();
  if (cl.some_codition())
    return HelperFunction();
  return [cl = std::move(cl)]() mutable -> IAsyncOperation<bool> {
    co_await cl.download();
    return false;
  }(); // cl destructs as part of the lambda
}

error handling: any exceptions originating from before the async lambda will now be thrown directly out of MainFunction(), not stored in the returned IAsyncOperation.  If you need those exceptions to be stored in the returned IAsyncOperation, as an entirely async MainFunction() would do, you’ll have to catch them.

Fixing the above problems would require code like this:
template <typename T>
T rethrow_coroutine(std::exception_ptr e = std::current_exception()) {
  std::rethrow_exception(std::move(e));
  co_await std::suspend_never();
}

IAsyncOperation<bool> MainFunction() try {
  http_client cl = make_http_client();
  if (cl.some_codition())
    return HelperFunction();
  return [](http_client cl) -> IAsyncOperation<bool> {
    co_await cl.download();
    return false;
  }(std::move(cl));
} catch (...) {
  return rethrow_coroutine<IAsyncOperation<bool>>();
}
In other words, you’d be vastly better off to just co_return co_await.  (Coding like this buys you little if the compiler can allocate HelperFunction()‘s coroutine frame inline in MainFunction()‘s frame, although I doubt IAsyncAction et al. are designed with that optimization in mind, which could encourage you to actually write code like above.)
Read less







Raymond Chen Author
January 14, 2022


  0  Collapse this comment
Copy link
See paragraph that begins “You have to pick a side”. C# and JavaScript uee the “async” attribute on the function to indicate whether it is a coroutine. C++ uses the “co_” keywords inside the function body to indicate whether it is a coroutine. I suspect C++ went the way it did because “async” is not part of the function signature.





Nathan Williams  January 17, 2022


  0  Collapse this comment
Copy link
The confusion is understandable. While C# does overload the return keyword, it is not in the same way as was originally intended for C++, as the paragraph suggests. In the original C++ coroutine spec, the behavior of the return keyword was determined by the type of its argument, which is overloading in the same sense as function overloading. In C#, the behavior of the return keyword is determined by the modifiers on the method.