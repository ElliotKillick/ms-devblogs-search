alan robinson  March 7, 2024


  0  Collapse this comment
Copy link
Am I the only one who feels like C++ is trying to be a higher level language than it should be? Yikes, the ever expanding scope of the language makes it feel like it would take TWO lifetimes to master CPP23 from scratch, during which 4 more lifetimes of features would be added to the standard.  Could somebody just add classes to C (call it, umm, C with Classes) and then promise to stop the never-ending language expansion?





紅樓鍮  March 8, 2024


  0  Collapse this comment
Copy link
My personal experience learning Modern C++ is that Modern C++ is actually closer to being a functional programming language in disguise, rather than an object-oriented programming language. Modern C++ uses template-based static polymorphism (very similar to OCaml's parametric polymorphism) in place of inheritance and dynamic dispatch, and uses value semantics and move semantics to reduce sharing (and thus cross-thread sharing) of mutable data.
(Note that move semantics is not something common to FP languages; in fact, C++11 basically "invented" move semantics, in the same sense that C# "invented" async/await (the features has existed in some obscure, arcane FP languages before, but...Read moreMy personal experience learning Modern C++ is that Modern C++ is actually closer to being a functional programming language in disguise, rather than an object-oriented programming language. Modern C++ uses template-based static polymorphism (very similar to OCaml’s parametric polymorphism) in place of inheritance and dynamic dispatch, and uses value semantics and move semantics to reduce sharing (and thus cross-thread sharing) of mutable data.
(Note that move semantics is not something common to FP languages; in fact, C++11 basically “invented” move semantics, in the same sense that C# “invented” async/await (the features has existed in some obscure, arcane FP languages before, but they’re the first widely-used industrial programming languages as well as the first imperative programming languages that implemented the respective concepts).)
A lot of people (there’s been more and more of them recently) have started to become disappointed in OOP, and most languages today (more honestly, all languages since Go that I can think of) are not designed around the OOP principle anymore. They usually support something similar to OOP’s dynamic dispatch, such as Go’s interfaces and Rust’s trait objects, but I doubt you’ll find inheritance in any of the newer languages anymore.
Read less






Neil Rashbrook  March 7, 2024


  0  Collapse this comment
Copy link
Why std::remove_reference_t<T> const& rather than just T const&?





Daniel A  March 7, 2024
· Edited

  0  Collapse this comment
Copy link
Because T may be deduced to be a reference-type and reference-types are const by default (i.e. you cannot change where the reference is pointing). In such case the const keyword is ignored and you end up with a function that returns a non-const reference reference to non-const.
Here’s a comparison: https://godbolt.org/z/dYnE1nzjG
From there you can go to CppInsights to see what functions were generated from the templates.




Matt D.  March 6, 2024


  0  Collapse this comment
Copy link
Related (in C++23): auto(x): decay-copy in the language, https://wg21.link/P0849
Example: https://en.cppreference.com/w/cpp/language/explicit_cast#Example