Kasper Brandt  January 26, 2022


  0  Collapse this comment
Copy link
> (This solution won’t work for this particular customer because the class name for Windows Forms windows cannot be customized.)
You could override CreateHandle and reimplement most of the logic while registering your custom class. It seems that the existing logic only supports using system-defined classes[0].
[0] https://referencesource.microsoft.com/#System.Windows.Forms/winforms/Managed/System/WinForms/NativeWindow.cs,1883e2cdb3ad338c





Alexis Ryan  January 25, 2022
· Edited

  0  Collapse this comment
Copy link
A custom window message to tell the existing window to unhide itself seems like it would work. instead of querying the window to see if its the one and then unhide it





Frédéric B.  January 25, 2022


  0  Collapse this comment
Copy link
You may need more than one message though. You could need one custom message to localize the window so you can send, say, a file path through WM_COPYDATA.




Neil Rashbrook  January 25, 2022


  0  Collapse this comment
Copy link
This was so much easier back in 16-bit Windows when you could simply use hPrevInst to access the main window variable in your original instance’s data segment.





Harry Johnston  January 24, 2022


  0  Collapse this comment
Copy link
Typo: proceess.StartTime





Piotr Siódmak  January 24, 2022


  0  Collapse this comment
Copy link
The docs claim that “The main window is the window opened by the process that currently has the focus” (https://docs.microsoft.com/en-us/dotnet/api/system.diagnostics.process.mainwindowhandle?view=netframework-4.8#remarks). Which piece of that code checks for focus?





Me Gusta  January 24, 2022


  0  Collapse this comment
Copy link
Focus is a tricky thing. You see, that statement of "window opened by the process that currently has the focus" is technically bad.
If, as an example, you have a small dialog window with a text box and two buttons, if you are entering text into the text box then it is the text box that has focus, not the dialog window.
What's more, logically, a window doesn't stop being the main window if the window itself, or one of its children doesn't have focus. Think about the case of Visual Studio as an example, if you are developing and...Read moreFocus is a tricky thing. You see, that statement of “window opened by the process that currently has the focus” is technically bad.
If, as an example, you have a small dialog window with a text box and two buttons, if you are entering text into the text box then it is the text box that has focus, not the dialog window.
What’s more, logically, a window doesn’t stop being the main window if the window itself, or one of its children doesn’t have focus. Think about the case of Visual Studio as an example, if you are developing and then click out of the VS window into a web browser to check references, does the VS window stop being the main window for the VS process?
Read less