Henke37  August 27, 2020


  1  Collapse this comment
Copy link
That’s a neat error message. I wonder how they did that. These days you just delete the copy constructor and be done with it.





紅樓鍮  August 27, 2020


  1  Collapse this comment
Copy link
Kenny's article
 defines an additional pure virtual function in debug builds.  As long as you don't decide to aim a gun at your feet and override that function in your implementation type (which inherits from ), your implementation type is abstract and cannot be constructed.
On the other hand, instead of ing your implementation type directly,  s a type that inherits from your implementation type and does nothing other than filling in that hole in , which makes it identical to your implementation type except being constructible.
If you delete the copy constructor, then you cannot copy-construct it but you...Read moreKenny’s article
winrt::implements defines an additional pure virtual function in debug builds.  As long as you don’t decide to aim a gun at your feet and override that function in your implementation type (which inherits from winrt::implements), your implementation type is abstract and cannot be constructed.
On the other hand, instead of newing your implementation type directly, winrt::make<T> news a type that inherits from your implementation type and does nothing other than filling in that hole in winrt::implements, which makes it identical to your implementation type except being constructible.
If you delete the copy constructor, then you cannot copy-construct it but you can still default-construct it:

implementation::Class o;

Now, you cannot delete the default constructor as well if your runtime class is default constructible in the IDL since the C++ default constructor is what the IDL default constructor gets projected as!
Even if the situation allows you to delete the default constructor, it still won’t prevent other forms of construction:

implementation::Class { 1337 };
implementation::Class { std::forward<Args>(args)... };

The pure virtual function trick is much more robust, which prevents the class from being constructed from any combination of arguments.
Read less