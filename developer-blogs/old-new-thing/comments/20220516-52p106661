紅樓鍮  May 16, 2022
· Edited

  0  Collapse this comment
Copy link
Comparing two s for equality can also be a single SIMD operation if both strings are short, assuming that short string optimization applies mandatorily, that  is sufficiently aligned, and that bytes that do not currently hold live s are kept 0 (or any other invariant value, maybe).  Similarly, equality comparison for non-short strings can also be effectively SIMD-accelerated if heap allocation for  is both sufficiently aligned and subject to the same zero-padding invariant (at least in the last SIMD word that holds at least one live ).
Bonus chatter: Consequently, comparing s has the potential to be vastly...Read moreComparing two std::strings for equality can also be a single SIMD operation if both strings are short, assuming that short string optimization applies mandatorily, that std::string is sufficiently aligned, and that bytes that do not currently hold live chars are kept 0 (or any other invariant value, maybe).  Similarly, equality comparison for non-short strings can also be effectively SIMD-accelerated if heap allocation for std::string is both sufficiently aligned and subject to the same zero-padding invariant (at least in the last SIMD word that holds at least one live char).
Bonus chatter: Consequently, comparing std::string_views has the potential to be vastly more inefficient than comparing std::strings, because std::string_view loses both alignment and padding information completely.
Bonus bonus chatter: On a second thought, apparently comparison for less-than can also be SIMD-accelerated, subject to the same memory alignment and zero-padding requirements, if the processor supports comparison of unsigned integers in big endian.
Read less







Adam Rosenfield  May 18, 2022
· Edited

  0  Collapse this comment
Copy link
The assumption that non-live chars are kept at 0 is not going to be valid.  That would require e.g. the `resize()` and `erase()` methods to zero out data past the end-of-string when shrinking a string.  Even without that assumption, though, it'd still be possible to have a SIMD-accelerated implementation, but you'd just need a bit of extra logic to handle that edge case, which would reduce the performance a bit.
Microoptimizing string comparison is a complex task.  If you look at the glibc implementation of strcmp(), it's over 2000 lines of optimized assembly to handle all of the...Read moreThe assumption that non-live chars are kept at 0 is not going to be valid.  That would require e.g. the `resize()` and `erase()` methods to zero out data past the end-of-string when shrinking a string.  Even without that assumption, though, it’d still be possible to have a SIMD-accelerated implementation, but you’d just need a bit of extra logic to handle that edge case, which would reduce the performance a bit.
Microoptimizing string comparison is a complex task.  If you look at the glibc implementation of strcmp(), it’s over 2000 lines of optimized assembly to handle all of the different edge cases, using SIMD when possible.
Read less







Sukru Tikves  May 16, 2022


  0  Collapse this comment
Copy link
You’d need to compare a lot of strings to need these kinds of micro optimizations.
By then, you would probably use some sort of indexing, and hashing mechanism to avoid string comparisons anyway.




Stuart Ballard  May 16, 2022
· Edited

  0  Collapse this comment
Copy link
There's clearly a tradeoff of performance vs accuracy here, but wouldn't the most you really want would be
<code>
From my limited understanding of C++ which mainly comes from following Raymond's blog and being fascinated by programming language design, I would guess you could use templates to automatically add a spaceship operator to any type that has == and > operators. Is that possible, or is there a language rule that prevents it?
Read moreThere’s clearly a tradeoff of performance vs accuracy here, but wouldn’t the most you really want would be

bool is_partial = false; // Indicates whether to return equivalent or unordered if no comparison operator returns true

if (a == b) {
  return equal;
} else if (a > b) {
  return greater;
} else if (b > a) { // Account for the possibility of no operator <
  return less;
} else {
  return is_partial ? unordered : equivalent;
}
From my limited understanding of C++ which mainly comes from following Raymond’s blog and being fascinated by programming language design, I would guess you could use templates to automatically add a spaceship operator to any type that has == and > operators. Is that possible, or is there a language rule that prevents it?
Read less







紅樓鍮  May 16, 2022


  0  Collapse this comment
Copy link
…you could use templates to automatically add a spaceship operator to any type that has == and > operators.
My understanding is that Raymond wants to use an existing operator<=> if it’s available, or live with the old comparison operators otherwise.  If an operator<=> already exists, redefining it would be an error.





Stuart Ballard  May 17, 2022


  0  Collapse this comment
Copy link
Ahh, I was imagining it like C#, where it’s often possible for multiple implementations of the same thing to exist and the compiler will choose the most specific match. I thought it would be perfectly allowable for a definition from a template to co-exist with one on the type itself, and that the compiler would prefer the latter when it exists.
Could SFINAE be used to make the template only valid on types that don’t already have a spaceship operator?





紅樓鍮  May 17, 2022


  0  Collapse this comment
Copy link
Ah, if you mean a blanket definition of
template <typename T>
std::weak_ordering operator<=>(const T &, const T &)
    requires { /* ... */ };
then I guess yeah, it is possible.