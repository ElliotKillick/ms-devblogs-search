Martin Ba  January 8, 2025


  0  Collapse this comment
Copy link
We’re using Axiras Mrege and this is basically the ONLY thing I’ve ever complained about  … that Encoding Changes are not treated as a FIRST CLASS file change.
And, while we’re at it, adding or removing a BOM is ALSO a first class file change. (For example, just look at your post at https://devblogs.microsoft.com/oldnewthing/20241231-00/?p=110696 what a missing/added BOM can do.)
Be a nice dev diff tool: If *any* byte changes in a file, highlight it, unless the user tells you otherwise.





Kevin Norris  December 31, 2024


  0  Collapse this comment
Copy link
IMHO, the proper solution is not to be afraid of non-ASCII characters (we should not be treating non-English text as second class), but to fix an encoding and mandate that all text is in that encoding.
It then immediately follows that the only good candidate is UTF-8 without BOM, for the following reasons:
* UTF-8 is maximally compatible with standard Git tools.
* Tooling that needs the BOM is broken - such tooling is obviously encoding-aware, so it should be possible to configure it to use UTF-8 by default or exclusively.
* The Unicode standard does not recommend using a BOM for...Read moreIMHO, the proper solution is not to be afraid of non-ASCII characters (we should not be treating non-English text as second class), but to fix an encoding and mandate that all text is in that encoding.
It then immediately follows that the only good candidate is UTF-8 without BOM, for the following reasons:
* UTF-8 is maximally compatible with standard Git tools.
* Tooling that needs the BOM is broken – such tooling is obviously encoding-aware, so it should be possible to configure it to use UTF-8 by default or exclusively.
* The Unicode standard does not recommend using a BOM for UTF-8, and “dumb” tooling may not support it correctly (e.g. grep may fail to match an anchored regex against the first line of the file if there’s a BOM in the way).
* UTF-8 is a heavily restrictive format – most random byte sequences are not valid UTF-8, so a pre-commit hook that rejects invalid UTF-8 is far more useful than (e.g.) a hook that rejects invalid ISO-8859-1 (especially after you “fix” the “bug” where it “wrongly” rejects Windows-1252). Neither is perfect, but the UTF-8 hook has a higher probability of finding mistakes.
* Everyone outside of Microsoft and Oracle is already using UTF-8 without BOM for almost everything, so your tooling has to support it anyway.
Read less







Chris Warrick  December 30, 2024


  0  Collapse this comment
Copy link
Azure DevOps sometimes shows the encoding change by listing the old and new encodings in the header above the file contents.





Adam Rosenfield  December 30, 2024


  1  Collapse this comment
Copy link
Another edge case where diff tools frequently stumble is the “newline at end of file” getting added or deleted.  Sometimes they’ll show “\newline at end of file” on the left or right side of the diff, sometimes they’ll show an unspecified whitespace change, or sometimes they won’t show anything at all.
Whenever I need to really confirm the exact contents of the before or after file, I’ll run it through `git show commit:filepath | hexdump -C` to get the raw hex dump.