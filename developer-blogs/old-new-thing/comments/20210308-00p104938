David Haim  March 9, 2021


  0  Collapse this comment
Copy link
>> Bonus chatter: Lewis Baker’s excellent coroutine library doesn’t deal with the case where an awaiting coroutine is destroyed while suspended. So maybe I’m being a bit too paranoid about this?
In concurrencpp, coroutines cannot be destroyed if they are still referenced. It uses a lock free FSM to deal with inter thread synchronization and the coroutine lifetime.
What you’re looking for is the shared_result, that effectively implements what you have presented here.
So maybe cppcoro is not that great after all.
https://github.com/David-Haim/concurrencpp#shared-result-objects





紅樓鍮  March 9, 2021


  0  Collapse this comment
Copy link
Some things come at a performance price.  I want to see a benchmark of the two libraries.




Michele Giordano  March 9, 2021


  0  Collapse this comment
Copy link
hi mr chen i need an explanation on this:
if you resize the window you will not see any flicker (repaint sended by the system)
if you move mouse inside the window, severe flicker will occurr (repaint sended by me)
please try this on your pc:
<code>
why this behaviour?
thank you for your time
Read morehi mr chen i need an explanation on this:
if you resize the window you will not see any flicker (repaint sended by the system)
if you move mouse inside the window, severe flicker will occurr (repaint sended by me)
please try this on your pc:
#include 
#include 

LRESULT CALLBACK proc(HWND hwnd, UINT msg, WPARAM wparam, LPARAM lparam)
{
switch(msg)
{
case WM_ERASEBKGND: return true;break;
case WM_MOUSEMOVE: InvalidateRect(hwnd, 0, 0); break;
case WM_PAINT:
{
InvalidateRect(hwnd,0,0);

HBRUSH b= CreateSolidBrush(0x000000ff);
HBRUSH c= CreateSolidBrush(0x0000ff00);
HBRUSH d= CreateSolidBrush(0x00ff0000);
RECT r;
GetClientRect(hwnd,&r);
PAINTSTRUCT ps;
HDC hdc=BeginPaint(hwnd,&ps);
FillRect(hdc,&r, b);
Sleep(10);
FillRect(hdc,&r, c);
Sleep(10);
FillRect(hdc,&r,d);
EndPaint(hwnd,&ps);

DeleteObject(b);
DeleteObject(c);
DeleteObject(d);
}
break;
default:
return DefWindowProc(hwnd, msg, wparam, lparam);
}
return 0;
}

int main()
{
HWND hwnd=CreateWindow(WC_DIALOG,0,WS_OVERLAPPEDWINDOW|WS_VISIBLE,0,0,500,500,0,0,0,0);
SetWindowLongPtr(hwnd, GWLP_WNDPROC, (LONG_PTR)proc);

MSG msg;

while (true)
{
if (GetMessage(&msg, 0, 0, 0) != WM_CLOSE)
{
TranslateMessage(&msg);
DispatchMessage(&msg);
}
}

return 1;
}
why this behaviour?
thank you for your time
Read less







Michele Giordano  March 9, 2021


  0  Collapse this comment
Copy link
hi mr chen i need an explanation on this:
hi all,
please try this on your pc:
    #include
    #include
    #include
    #include
    #include
    bool randomBool()
    {
        static auto gen = std::bind(std::uniform_int_distribution(0,1),std::default_random_engine());
    return gen();
    }
    void testdraw(HWND hwnd,bool t)
    {
    HBRUSH b= CreateSolidBrush(0x000000ff);
    HBRUSH c= CreateSolidBrush(0x0000ff00);
...Read morehi mr chen i need an explanation on this:
hi all,
please try this on your pc:
    #include
    #include
    #include
    #include
    #include
    bool randomBool()
    {
        static auto gen = std::bind(std::uniform_int_distribution(0,1),std::default_random_engine());
    return gen();
    }
    void testdraw(HWND hwnd,bool t)
    {
    HBRUSH b= CreateSolidBrush(0x000000ff);
    HBRUSH c= CreateSolidBrush(0x0000ff00);
    HBRUSH d= CreateSolidBrush(0x00ff0000);
    RECT r;
    GetClientRect(hwnd,&r);
    PAINTSTRUCT ps;
    HDC hdc=BeginPaint(hwnd,&ps);
    FillRect(hdc,&r, b);
    Sleep(10);
    FillRect(hdc,&r, c);
    Sleep(10);
    FillRect(hdc,&r,d);
    EndPaint(hwnd,&ps);
    DeleteObject(b);
    DeleteObject(c);
    DeleteObject(d);
    }
        LRESULT CALLBACK proc(HWND hwnd, UINT msg, WPARAM wparam, LPARAM lparam)
        {
          switch(msg)
          {
           case WM_ERASEBKGND: return true;break;
          case WM_MOUSEMOVE: InvalidateRect(hwnd, 0, 0); break;
          case WM_PAINT:
                InvalidateRect(hwnd,0,0);
                testdraw(hwnd,randomBool());
         break;
         default:
return DefWindowProc(hwnd, msg, wparam, lparam);
           }
          return 0;
        }
int main()
{
    HWND hwnd=CreateWindow(WC_DIALOG,0,WS_OVERLAPPEDWINDOW|WS_VISIBLE,0,0,500,500,0,0,0,0);
SetWindowLongPtr(hwnd, GWLP_WNDPROC, (LONG_PTR)proc);
MSG msg;
while (true)
{
if (GetMessage(&msg, 0, 0, 0) != WM_CLOSE)
{
TranslateMessage(&msg);
DispatchMessage(&msg);
}
}
    return 1;
}
if you resize the window you will not see any flicker
if you move mouse inside the window, severe flicker will occurr
why this behaviour?
thank you for your time
Read less







紅樓鍮  March 8, 2021


  0  Collapse this comment
Copy link
In a singly linked list there’s no way for a node to unlink itself anyway, without knowing its referrer.