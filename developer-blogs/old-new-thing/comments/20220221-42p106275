Александр Давыдкин  February 21, 2022
· Edited

  0  Collapse this comment
Copy link
Back in 2014 you’ve written excellent explanation about default base address (0x00400000) in EXE PE for 32 bit: https://devblogs.microsoft.com/oldnewthing/20141003-00/?p=43923
However I wonder why in 64 bit linker this address is 0x140000000 – notedly bigger than 4Gb which could (possibly) explain some backward compatibility for 32-bit virtual machines (or what?).
Thanks a lot for this blog!





Scarlet Manuka  February 22, 2022


  0  Collapse this comment
Copy link
It seems pretty reasonable that the default address for a 64-bit image would be above the 4GB boundary.
No 64-bit anything is going to be running in a 32-bit VM so I’m not sure what you’re getting at with the backwards compatibility comment.





MGetz  February 22, 2022
· Edited

  0  Collapse this comment
Copy link
1. The default on x64 architectures should be relocatable in all cases
2. Assuming that a DLL or EXE is marked otherwise choosing that address would deliberately break assumptions about loading thus allowing developers to fix their code to be relocatable.
3. It allows tools to detect bad practices as a x64 binary shouldn't have a specified base address for security reasons.
4. The address is immaterial to 32bit code because that's a different entry in the GDT with a different 'address space' (even if they are linearly laid over one another) so there is no way 32bit code can interact with that....Read more1. The default on x64 architectures should be relocatable in all cases
2. Assuming that a DLL or EXE is marked otherwise choosing that address would deliberately break assumptions about loading thus allowing developers to fix their code to be relocatable.
3. It allows tools to detect bad practices as a x64 binary shouldn’t have a specified base address for security reasons.
4. The address is immaterial to 32bit code because that’s a different entry in the GDT with a different ‘address space’ (even if they are linearly laid over one another) so there is no way 32bit code can interact with that. It would have to switch the CS selector to the 64bit segment and enter long mode to do so. This only occurs in Wow64cpu.dll AFAIK.
5. Thunking to 32bit (or back to 64bit) isn’t supported on win64 outside of Wow64 and only by the OS, so while it is allegedly possible it may or may not continue to work as it requires the loader to load the pages with the right flags in the page table.
(( I expect Raymond to delete both of these comments as they are irrelevant to the post above))
Read less







Александр Давыдкин  February 22, 2022
· Edited

  0  Collapse this comment
Copy link
"(( I expect Raymond to delete both of these comments as they are irrelevant to the post above))"
I'm sorry if I break rules, but I don't know how to ask this question about very old entry in blog.
Documentation ( here: https://docs.microsoft.com/en-us/cpp/build/reference/base-base-address?view=msvc-170 ) says MS linker in 64 bit will set this address to 0x140000000.
After I asked question here I've got interesting answer in some programming forum: default address above 4Gb in 64bit could be useful to detect errors in transition of programs from 32 bit to 64 bit: if some code in older program saves pointers in 32bit...Read more“(( I expect Raymond to delete both of these comments as they are irrelevant to the post above))”
I’m sorry if I break rules, but I don’t know how to ask this question about very old entry in blog.
Documentation ( here: https://docs.microsoft.com/en-us/cpp/build/reference/base-base-address?view=msvc-170 ) says MS linker in 64 bit will set this address to 0x140000000.
After I asked question here I’ve got interesting answer in some programming forum: default address above 4Gb in 64bit could be useful to detect errors in transition of programs from 32 bit to 64 bit: if some code in older program saves pointers in 32bit integers it will be immediately broken and cause Access Violation in address space where lower 4Gb virtual memory are not marked as accessible.
Good point.
But why not just  0x100000000, but 0x140000000?
Unpredictable relocations for security and protection reasons are good thing, but why linker and documentation insist on 0x140000000?
Interesting…
Read less