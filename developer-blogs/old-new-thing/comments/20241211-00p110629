Sigge Mannen  December 13, 2024


  0  Collapse this comment
Copy link
This old new article seems very relevant on the topic. Even the comments “fixing” the macros managed to introduce bugs in the fixes





GL  December 12, 2024


  0  Collapse this comment
Copy link
You’re right, yet the correct inference is that I don’t use WIL. The link is a fragment to the wiki, so it can be expected that only the excerpt governed by the linked heading is read.





GL  December 11, 2024


  0  Collapse this comment
Copy link
A more complete rewrite would be
for (auto &&item : items)
{
  auto hr = [&]() { /* ... */ return S_OK; }();
  if (FAILED(hr)) LOG_HR(hr);
}





Neil Rashbrook  December 12, 2024
· Edited

  0  Collapse this comment
Copy link
The failure inside the lambda will have already been logged by the RETURN_IF_FAILED macro. Did you not read the linked wil wiki page?




Adam Rosenfield  December 11, 2024
· Edited

  3  Collapse this comment
Copy link
This definition of CONTINUE_IF_FAILED() has another bug.  If you write this:
<code>
it looks like the `else` pairs with with the `if (foo)` predicate.  But what actually happens after macro expansion is this:
<code>
This is now a syntax error, because the `else` is all on its own without a matching `if` before it.
The usual solution to this problem is to wrap the macro definition in `do { } while(false)` block, which requires a semicolon to terminate it, so that the semicolon after the invocation gets used for that.
Read moreThis definition of CONTINUE_IF_FAILED() has another bug.  If you write this:

if (foo)
    CONTINUE_IF_FAILED(hr);
else
   blah();

it looks like the `else` pairs with with the `if (foo)` predicate.  But what actually happens after macro expansion is this:

if (foo)
    if (FAILED(hr)) { LOG_HR(hr); continue; }
;  // <-- original semicolon after macro invocation closes out the if (foo)
else
    blah();

This is now a syntax error, because the `else` is all on its own without a matching `if` before it.
The usual solution to this problem is to wrap the macro definition in `do { } while(false)` block, which requires a semicolon to terminate it, so that the semicolon after the invocation gets used for that.
Read less







Goran Mitrovic  December 14, 2024


  0  Collapse this comment
Copy link
The solution for that is to use
if(!condition) {} else …





Kalle Niemitalo  December 12, 2024


  0  Collapse this comment
Copy link
The usual do…while(false) solution won’t work here, because the fake loop would change the meaning of “continue”.





Adam Rosenfield  December 12, 2024


  0  Collapse this comment
Copy link
Whoops, you are correct.