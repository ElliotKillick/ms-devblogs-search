LB  June 10, 2024
· Edited

  0  Collapse this comment
Copy link
I actually end up using `type_identity` more commonly to delay expansion of a type until later in the type expression, for example:
std::conditional_t<std::is_void_v<T>, std::type_identity<U>, someTemplateThatOnlyWorksWithNonVoid<T>>::type::something
In this case the `someTemplateThatOnlyWorksWithNonVoid` would not have a `::type` inside it for void, so the `::type` has to come outside the `conditional_t` usage, which means it needs to also work in the other case too, where we can just use `type_identity` to wrap a substitute type in the void case.





紅樓鍮  June 7, 2024


  0  Collapse this comment
Copy link
Wouldn’t it be much more useful to disable deduction of args‘ types instead? If you let work‘s type follow from args‘ types then you can’t use the same work with const T & and T && in different args.





LB  June 10, 2024


  0  Collapse this comment
Copy link
I don’t think it’s possible to do that here since you can’t deduce the std::function type from a lambda. Lambdas can also be templates, which means you would have trouble trying to manually extract type information from the call operator as well.





紅樓鍮  June 10, 2024
· Edited

  1  Collapse this comment
Copy link
You’re right, I was thinking about passing in a std::function directly instead of a lambda.