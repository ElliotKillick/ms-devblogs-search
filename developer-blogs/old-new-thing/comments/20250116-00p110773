Sunstone Hiveware  January 18, 2025


  0  Collapse this comment
Copy link
There is another way to handle joint code that is used across multiple types.
1) Distill out the template arguments that identify type subsets.
2) Write implementations for these subsets of template arguments.
3) Pass in any parameters to these subsets in their constructors. Avoid passing in all the top type. Only the type sets that are relevant to these subsets. These subsets get dynamically initialized at startup meaning lvalues get established, but not rvalues. This allows you to hide types at lower layers making it not necessary to either destroy the app's full set of types, or compromise on...Read moreThere is another way to handle joint code that is used across multiple types.
1) Distill out the template arguments that identify type subsets.
2) Write implementations for these subsets of template arguments.
3) Pass in any parameters to these subsets in their constructors. Avoid passing in all the top type. Only the type sets that are relevant to these subsets. These subsets get dynamically initialized at startup meaning lvalues get established, but not rvalues. This allows you to hide types at lower layers making it not necessary to either destroy the app’s full set of types, or compromise on type scope which the base class approach does for the sake of, say, logging.
4) Include these uninstantiated implementations at the level it needs to explicitly instantiate.
5) Either explicitly or implicitly instantiate the lower-level type set instances. It is better to explicitly instantiate since compiling is easier. Compiling becomes easier because you don’t have to search for complicit instances as much.
Read less







Solomon Ucko  January 17, 2025


  0  Collapse this comment
Copy link
If you don’t need to deal with getting subclassed, I guess another option could be to have both the unspecialized and specialized versions call out to a helper method that does the actual work?





Sunstone Hiveware  January 19, 2025


  0  Collapse this comment
Copy link
I don't divide instantiation up between specialized and unspecialized. Everything should be specialized to use templates properly. As I see it, un-specialization is merely a corner case, like for use like with logging. Template parameter defaults are another.
The beauty of my family subsets approach is you only instantiate the exact set of templates your project needs. These template family subsets get implemented without being instantiated. They then get template instantiated subsequently either explicitly or implicitly. I prefer explicit template instantiation because it makes discovering missing implementation errors easier to locate. Doing it this way gets lvalues dynamically instantiated at...Read moreI don’t divide instantiation up between specialized and unspecialized. Everything should be specialized to use templates properly. As I see it, un-specialization is merely a corner case, like for use like with logging. Template parameter defaults are another.
The beauty of my family subsets approach is you only instantiate the exact set of templates your project needs. These template family subsets get implemented without being instantiated. They then get template instantiated subsequently either explicitly or implicitly. I prefer explicit template instantiation because it makes discovering missing implementation errors easier to locate. Doing it this way gets lvalues dynamically instantiated at program startup. Programmers can even pass function parameters with any qualifier set using constructors. Then rvalues can get set anytime as the program runs. As far as I can see, this it the ideal use of complex template typing envisaged by Bjarne a long time ago.
Read less