Kalle Niemitalo  February 3, 2025
Â· Edited

  1  Collapse this comment
Copy link
That is still not default-constructible.  It lacks:
<code>
Clang is able to warn about the iterator object outliving the captured reference, if you add an attribute:
<code>
<code>
However, it does not seem to notice a discrepancy if the parameter has this attribute only in the constructor and not in the maker function.
Read moreThat is still not default-constructible.  It lacks:
    generic_output_iterator() noexcept :
        insert(nullptr) {}
Clang is able to warn about the iterator object outliving the captured reference, if you add an attribute:
    generic_output_iterator(Lambda&& lambda [[clang::lifetimebound]]) noexcept :
        insert(std::addressof(lambda)) {}
template<typename Lambda>
generic_output_iterator<Lambda>
generic_output_inserter(Lambda&& lambda [[clang::lifetimebound]]) noexcept {
    return generic_output_iterator<Lambda>(
        std::forward<Lambda>(lambda));
}
However, it does not seem to notice a discrepancy if the parameter has this attribute only in the constructor and not in the maker function.
Read less