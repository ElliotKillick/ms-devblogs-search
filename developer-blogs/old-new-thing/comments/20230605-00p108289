Alex “Kappa” Kapranoff  June 13, 2023


  1  Collapse this comment
Copy link
“The parameter is accepted as a pointer so you can pass nullptr to indicate that you accept all defaults.” seems like a non-ideal API design that also leads to the described problem.
An example of a slightly better API, I think, would require an explicit StorageOptions constant to indicate default options. It will also solve the problem with the operator().





Risto Lankinen  June 5, 2023


  1  Collapse this comment
Copy link
Why not modify the StorageLoader a bit:
struct StorageLoader
{
    template
    DataType operator()(StorageOptions const* options = nullptr);
};

Then your “accept all defaults” function call would look even nicer:
Data1 data1 = storageLoader();

Cheers!





Raymond Chen Author
June 6, 2023


  0  Collapse this comment
Copy link
You cannot deduce the return type. What would auto data = storageLoader() use for the DataType?





Bas Mommenhof  June 5, 2023


  0  Collapse this comment
Copy link
Math teacher: “I want to teach you guys a new technique called: Multiplication.”
Johnny: “But we can do that using Addition.”
Math teacher: “Yes, but I am trying to teach you Multiplication”
Johnny: “Addition !!!”
Math teacher: “Multiplication is just another way of doing things, with the added advantage that it can provide clarity.”
Johnny: “Addition !!!”
Math teacher: *sigh*




Kythyria Tieran  June 5, 2023


  0  Collapse this comment
Copy link
Rust solves this one straightforwardly: each overloadable operator has a corresponding trait that is normal aside from the compiler knowing about the correspondence. To overload the operator, you implement the trait.
And then there’a a general syntax for referring to any function, so you can get a pointer to it, or call it, that way (this breaks a bit for anonymous types, but is easily worked around).





Marc Fauser  June 5, 2023


  0  Collapse this comment
Copy link
Another great article. 👍
I have one question about an old article:
https://devblogs.microsoft.com/oldnewthing/20140908-00/?p=53
Here you start notepad and put the text into it.
Since Notepad is a store app and has tabs, this doesn't work anymore.
WaitForInputIdle will wait forever. The process only has 0 for MainWindowHandle as the exe is only a wrapper to start the store app and notepad is only a single process with many windows and tabs and the process I start closes very soon.
Could you should how you do this with the current notepad? My approach is not really working. Waiting 100ms after starting notepad,...Read moreAnother great article. 👍
I have one question about an old article:
https://devblogs.microsoft.com/oldnewthing/20140908-00/?p=53
Here you start notepad and put the text into it.
Since Notepad is a store app and has tabs, this doesn’t work anymore.
WaitForInputIdle will wait forever. The process only has 0 for MainWindowHandle as the exe is only a wrapper to start the store app and notepad is only a single process with many windows and tabs and the process I start closes very soon.
Could you should how you do this with the current notepad? My approach is not really working. Waiting 100ms after starting notepad, searching all processes for notepad and enumerate over all windows until I find “Untitled – Notepad”. If I don’t wait enough, the window title is only ” – Notepad”.
Still I cannot find the edit control with UI Automation to set the text.
I’ve tried to search Win32_Process for parent processes but this doesn’t work if Notepad was already started.
It would be very interesting how you can solve this problem.
Read less







Daniel Roskams  June 8, 2023


  0  Collapse this comment
Copy link
jeez does it take over 100ms for notepad to start up these days? this is the power of modern apps.





Marc Fauser  June 8, 2023


  0  Collapse this comment
Copy link
Store apps are always slow to start.
The whole concept of the store apps is not very good.
It’s like a foreign body in Windows.