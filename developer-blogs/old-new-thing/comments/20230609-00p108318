Roland Bock  June 12, 2023
· Edited

  2  Collapse this comment
Copy link
I guess you wanted to show the template tricks, and the leading default is neat.
But I would probably write this in a different and IMO simpler fashion:
<code>
Read moreI guess you wanted to show the template tricks, and the leading default is neat.
But I would probably write this in a different and IMO simpler fashion:
template <typename ElementType, typename Allocator, typename Container>
nodiscard constexpr auto to_vector(Container&& c, Allocator al = {}) {
  return std::vector(std::begin(c), std::end(c), al);
}

template <typename ElementType, typename Container>
nodiscard constexpr auto to_vector(Container&& c) {
  return to_vector<ElementType, std::allocator>(
      std::forward(c));
}

template <typename Container>
nodiscard constexpr auto to_vector(Container&& c) {
  return to_vector<std::decay_t<
      typename std::iterator_traits::value_type>>(
      std::forward(c));
}

Read less







Raymond Chen Author
June 12, 2023


  0  Collapse this comment
Copy link
Nice. I forgot that you can fake default parameters via overloads.




Neil Rashbrook  June 10, 2023
· Edited

  1  Collapse this comment
Copy link
For that last example, did you mean std::copy(std::begin(c), std::end(c), std::back_inserter(v));?
(I also had to insert typename somewhere and change the definition of ActualAllocator to template<typename ElementType, typename Allocator, typename Container> using ActualAllocator = …)





Turtlefight  June 9, 2023
· Edited

  0  Collapse this comment
Copy link
C++23 includes , which is a more generalized version of : It can convert any range into any container.
Example:
<code>
Godbolt Examples
(it also handles the -case)
msvc is currently the only compiler that provides  (and only with ).
But in a few years it'll hopefully be available across all compilers, once they fully implement C++23.
Read moreC++23 includes std::ranges::to, which is a more generalized version of to_vector: It can convert any range into any container.
Example:
std::list<int> int_list = {1, 2, 3, 4, 5};

// equivalent to to_vector(int_list);
auto int_vec = std::ranges::to<std::vector>(int_list);

// equivalent to to_vector<long>(int_list);
auto long_vec = std::ranges::to<std::vector<long>>(int_list);

// equivalent to to_vector<int, my_custom_allocator<int>>(int_list);
auto vec_with_alloc = std::ranges::to<std::vector>(int_list, my_custom_allocator<int>{});

Godbolt Examples
(it also handles the std::vector<bool>-case)
msvc is currently the only compiler that provides std::ranges::to (and only with /std:c++latest).
But in a few years it’ll hopefully be available across all compilers, once they fully implement C++23.
Read less