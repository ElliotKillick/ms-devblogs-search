Subu Iyer  February 15, 2025


  0  Collapse this comment
Copy link
I understand that the async-async post looks at the underlying implementation of the feature and you showed how to engage it in C++ using the [remote_async] attribute. Does this apply to C# as well? I haven’t seen a way to do this in C#. Feedback appreciated.





Richard Thompson  February 15, 2025


  0  Collapse this comment
Copy link
I agree, it’s highly misleading and potentially dangerous.
For example, this design will report an operation that ran to completion as being “Cancelled” when the server didn’t get the cancellation request until too late.
If the operation is potentially destructive, eg deleting files, then telling the user “It’s ok, it didn’t happen” when it actually did is the worst possible outcome as they cannot take action to undo (such as restoring a backup)





Matt McCutchen  February 14, 2025


  0  Collapse this comment
Copy link
I'm surprised by the design decision to pretend that an operation has been successfully cancelled while it's still running on the server.  I'd imagine this could lead to bugs where the client thinks it's safe to mutate parameters (oldnewthing/20190501-00/?p=102463) or start another operation that could conflict with the first operation when it actually isn't safe yet.  Is this kind of problem likely in realistic usage of Windows Runtime?  (I'm just reading the blog for fun and haven't used most of the technologies discussed myself.)  It reminds me of the use-after-free bugs with OVERLAPPED structures (oldnewthing/20110202-00/?p=11613).
My uninformed...Read moreI’m surprised by the design decision to pretend that an operation has been successfully cancelled while it’s still running on the server.  I’d imagine this could lead to bugs where the client thinks it’s safe to mutate parameters (oldnewthing/20190501-00/?p=102463) or start another operation that could conflict with the first operation when it actually isn’t safe yet.  Is this kind of problem likely in realistic usage of Windows Runtime?  (I’m just reading the blog for fun and haven’t used most of the technologies discussed myself.)  It reminds me of the use-after-free bugs with OVERLAPPED structures (oldnewthing/20110202-00/?p=11613).
My uninformed opinion as of now is that it would be better if Async-Async reported the real cancellation status from the server.  If I’m understanding everything correctly, that wouldn’t be any chattier and it would be consistent with the behavior of Windows Runtime async operations that don’t use Async-Async.  It’s a safer default; I imagine there’s a way that clients that want to simulate instant cancellation could do so by themselves, whereas under the current design, I don’t see an easy way for clients that want the real status to get it.  So my suggestion seems consistent with the design principle that I seem to recall being articulated somewhere on this blog (my quick attempts to find it failed) that given two options, we should favor the one that callers can’t simulate by themselves.  Am I missing anything?  I’m not proposing an actual change to Async-Async at this point (there would be compatibility concerns, etc.), just studying the issue.
Read less