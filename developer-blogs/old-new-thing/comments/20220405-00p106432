Richard Russell  April 6, 2022


  0  Collapse this comment
Copy link
You left out the umami spot.





Henke37  April 6, 2022


  0  Collapse this comment
Copy link
Fighting games seem to have settled on ‚Äúsour spot‚Äù.





Alois Kraus  April 5, 2022


  0  Collapse this comment
Copy link
It could help to get a short wpr recording of the machine which collects all loaded modules besides a memory dump as default action. I had my own share of AV induced issues and did write https://github.com/Siemens-Healthineers/ETWAnalyzer to be able to quickly query all known AV vendors in the stacks. With proper stacktags one can quickly find out if the slowness of an application comes from SmartScreen, Mc Affee or any other AV vendor. I plan to blog more about known patterns of performance degradations caused by AV engines which are with other tools notoriously hard to find.
I assume...Read moreIt could help to get a short wpr recording of the machine which collects all loaded modules besides a memory dump as default action. I had my own share of AV induced issues and did write https://github.com/Siemens-Healthineers/ETWAnalyzer to be able to quickly query all known AV vendors in the stacks. With proper stacktags one can quickly find out if the slowness of an application comes from SmartScreen, Mc Affee or any other AV vendor. I plan to blog more about known patterns of performance degradations caused by AV engines which are with other tools notoriously hard to find.
I assume that you have an automatic analyzer for memory dumps which scans for known problematic modules which should not be loaded in central system processes.
Read less







pete.d  April 5, 2022


  0  Collapse this comment
Copy link
Yeah, reminds me of the full week I lost, around the 1996 time frame, when Microsoft IT mandated a particular anti-virus software (InocuLAN? I don't recall for sure which third-party software it was) that wound up corrupting input files during compilation, generating compile-time errors that didn't seem to correspond to any actual problem with the code. I wasted that whole week doing all kinds of different things to try to track down the problem in the code, until the mental light bulb lit up and I disabled the anti-virus software.
Decades later, I'm back to (barely) trusting Windows Defender to keep...Read moreYeah, reminds me of the full week I lost, around the 1996 time frame, when Microsoft IT mandated a particular anti-virus software (InocuLAN? I don‚Äôt recall for sure which third-party software it was) that wound up corrupting input files during compilation, generating compile-time errors that didn‚Äôt seem to correspond to any actual problem with the code. I wasted that whole week doing all kinds of different things to try to track down the problem in the code, until the mental light bulb lit up and I disabled the anti-virus software.
Decades later, I‚Äôm back to (barely) trusting Windows Defender to keep an eye on things. But I remain skeptical of any third-party component that considers it its job to insert itself into the middle of anything the OS is doing, and *especially* anything that purports to be anti-virus/malware. Seems like historically, the main thing software like that has managed to do is create really hard-to-understand-and-fix problems, and increase the attack surface of the computer in question.
Read less







David Wolff  April 5, 2022


  0  Collapse this comment
Copy link
When I worked at Prime Computer, we had an automated dump-analysis tool that had rules about what things in a crash dump were clues to known crashes. For example, if a particular routine crashed, and the third parameter was invalid, it was a known crashing bug (fixed in a later release). Doesn‚Äôt Microsoft have something similar?





Tim Weis  April 12, 2022


  0  Collapse this comment
Copy link
Windows Error Reporting, as I recall, (used to) categorize defects into buckets, where ideally each bucket would refer to the same core issue. Microspeak: Bucket bugs, bucket spray, bug spray, and failure shift goes over some of the challenges and illustrates the outcomes when things are less than ideal.




Jacob Manaker  April 5, 2022
¬∑ Edited

  0  Collapse this comment
Copy link
Eventually, the team discovered that a third party anti-malware application had injected itself into the RPCSS service and was detouring some functions.
The first time I read this, I missed the ‚Äúanti-‚Äù in ‚Äúanti-malware application.‚Äù  It made a lot more sense that way.





Nathan Williams  April 6, 2022


  0  Collapse this comment
Copy link
Anti-malware software is the most common type of malware after all.




Á¥ÖÊ®ìÈçÆ  April 5, 2022
¬∑ Edited

  0  Collapse this comment
Copy link
Bonus chatter: Rust considers RAII leaks (which Rust supports officially through e. g. ) to be safe.  This is normally OK, until someone tries to rely on destructors being run to guarantee safety, like  did (crates.io thread-scoped).
Rust reconciled them with a new continuation-passing style API (), which by design prevents ting the join guard.
 (Not that it would help the case of an unhandled structured exception.)
Bonus bonus chatter: Doing anything that involves 'ing is considered inherently unsafe in Rust, since you can't guarantee the contents of the DLL.  And what's more fun, in many scenarios there's...Read moreBonus chatter: Rust considers RAII leaks (which Rust supports officially through e. g. std::mem::forget) to be safe.  This is normally OK, until someone tries to rely on destructors being run to guarantee safety, like std::thread::scoped did (crates.io thread-scoped).
Rust reconciled them with a new continuation-passing style API (std::thread::scope), which by design prevents forgetting the join guard.
 (Not that it would help the case of an unhandled structured exception.)
Bonus bonus chatter: Doing anything that involves LoadLibrary‚Äòing is considered inherently unsafe in Rust, since you can‚Äôt guarantee the contents of the DLL.  And what‚Äôs more fun, in many scenarios there‚Äôs just no Rust-safe alternatives to doing LoadLibrary.  Meaning there exist applications for which it‚Äôs impossible to be Rust-safe, for legitimate reasons.
I think this makes me rethink the whole thing about ‚Äúprogram correctness‚Äù: the concept is just difficult to apply once you go out of the language abstract machine level.  If you have the privileges, you can do everything to drive a proven-correct Lean program nuts, at every level from patching the OS loader to injecting rogue threads.  Hey, even Rust is using LLVM for codegen, which is not proven-correct (and is known to have bugs).
Read less







Henry Skoglund  April 5, 2022


  0  Collapse this comment
Copy link
When helping someone with a weirdly behaving program, in the old days #1 advice used to be ‚ÄúUpgrade your video driver‚Äù but today I always start with ‚ÄúDo you have any 3rd-party antivirus program installed‚Äù because sadly they are often the culprit.
Also thank you for making me laugh: ‚Äú‚Ä¶ The code wasn‚Äôt holding it wrong. . ‚Äú‚Äù üôÇ