Marcel Kilgus  February 22, 2021


  0  Collapse this comment
Copy link
That’s sounds like an interesting way to catch the callback during an OAuth2 authentication cycle in desktop applications. Pity it doesn’t seem usable from native code, I recently implemented a small HTTP server in C to do exactly this (with MSHTML as an invisible browser component). Might revisit it once WebView2 becomes widely available.





Adam Rosenfield  February 22, 2021


  0  Collapse this comment
Copy link
I've used a custom URL protocol handler for similar in the past.  When starting the authentication workflow, the program will install the custom URL protocol handler into the registry (Admin not needed when installing for just the current user under HKCU) to launch the program with a certain set of command line arguments.  Then it will launch the user's default browser to the web URL needed to authenticate with a callback URL of something like myprogram://authenticate .  After the user successfully authenticates, their web browser will open something like myprogram://authenticate/?token=foo , which will launch myprogram.exe -authenticate foo....Read moreI’ve used a custom URL protocol handler for similar in the past.  When starting the authentication workflow, the program will install the custom URL protocol handler into the registry (Admin not needed when installing for just the current user under HKCU) to launch the program with a certain set of command line arguments.  Then it will launch the user’s default browser to the web URL needed to authenticate with a callback URL of something like myprogram://authenticate .  After the user successfully authenticates, their web browser will open something like myprogram://authenticate/?token=foo , which will launch myprogram.exe -authenticate foo.  Then the new process can parse the command line arguments and pass the token back to the original process via a named pipe and exit.
Read less







Marcel Kilgus  February 23, 2021


  0  Collapse this comment
Copy link
That’s also an interesting approach and alleviates the problem that the return URL must allow a random port for localhost (a no-go for other IPs). The existing OAuth2 library our server guys were using had a provision for this but that was apparently broken, so they rewrote it for me. Still leaves the feeling that desktop apps are becoming second-class citizens these days, when looking for native OAuth2 client solutions I found many questions but hardly any answers.