Buster C  October 15, 2020


  0  Collapse this comment
Copy link
In the table, ‚Äúhidden‚Äù is declared and not used. It looks like the second and third ‚Äúp‚Äù in two of the cells should be ‚Äúhidden‚Äù.





Julien Oster  October 14, 2020


  0  Collapse this comment
Copy link
This is called ‚ÄúPattern Matching‚Äù in ML, Haskell, and many other functional languages, which have had this feature as a central concept for many decades.
And I‚Äôm absolutely not arguing that this means it should be called ‚ÄúPattern Matching‚Äù anywhere else, since that‚Äôs just plain confusing in today‚Äôs world. You quickly tire of saying ‚Äúpattern matching‚Ä¶ no, not the regular expression kind, the data type kind‚Äù.





Dwayne Robinson  October 14, 2020


  0  Collapse this comment
Copy link
I love this addition to the language, but I don't love the zoo of when to use [] vs () vs {} now :/. Historically a heterogeneous group (tuple) of arguments has been expressed via either parentheses (e.g. function calls and constructor calls: foo(a, b, c) or MyClass myClass(42, 3.14159f)) or braces (myStruct = {42, 3.14159f};), and so one would expect either...
<code>
<code>
...but instead we get something that (without spaces) can easily look more like array indexing ü§®.
<code>
(way too late to change now, short of some epoch versioning mechanism, but one can lament about consistency)
Read moreI love this addition to the language, but I don‚Äôt love the zoo of when to use [] vs () vs {} now :/. Historically a heterogeneous group (tuple) of arguments has been expressed via either parentheses (e.g. function calls and constructor calls: foo(a, b, c) or MyClass myClass(42, 3.14159f)) or braces (myStruct = {42, 3.14159f};), and so one would expect either‚Ä¶
auto (a, b) = p;
auto {a, b} = p;
‚Ä¶but instead we get something that (without spaces) can easily look more like array indexing ü§®.
auto[i] = p;
(way too late to change now, short of some epoch versioning mechanism, but one can lament about consistency)
Read less







Adam Rosenfield  October 14, 2020


  0  Collapse this comment
Copy link
Rust follows JavaScript‚Äôs terminology and calls this feature destructuring as well.
(Side note: there are two separate footnotes #1 in this article, which are made even more confusing since the order seen in the article is 1, 1, 2, while the order in the trailer is 1, 2, 1.)





Kalle Niemitalo  October 14, 2020


  0  Collapse this comment
Copy link
Common Lisp likewise calls it destructuring; see Macro DESTRUCTURING-BIND.




Alexandre Brault  October 14, 2020


  0  Collapse this comment
Copy link
Python uses the term unpacking (usually tuple unpacking) for its equivalent feature. List comprehensions are a different thing





Raymond Chen Author
October 14, 2020


  0  Collapse this comment
Copy link
Thanks. I‚Äôve updated the article.