Alexis Ryan  September 10, 2020


  0  Collapse this comment
Copy link
BEGIN_INTERFACE on powerPC seems very strange as the c++ version adds an extra function  while the c version adds a pointer surely for that extra function in the c++ version to keep things consistent. guessing the compiler doesn’t store a normal function pointer for the first virtual function in the vtable so COM has to  skip it or something .





MGetz  September 10, 2020


  0  Collapse this comment
Copy link
I’ve gotten in the habit of marking interface implementation methods as noexcept for that exact undefined behavior reason. I’d rather the application terminate than risk anything happening. The classic “If you don’t control the caller don’t throw an exception across that ABI boundary” issue you’ve covered before.





GL  September 10, 2020


  0  Collapse this comment
Copy link
This only saves you from your own code. If you call into another COM object that lets an exception escape, all bets are off.
Nit-picking the main post: The destructor for a polymorphic class is never “trivial” per current C++ definition, though I don’t see any harm in relaxing that requirement (identity downgrading is not observable if the destructor doesn’t call virtual members).
Question: Why can’t Visual C++ automatically detect a class whose virtual members are all pure and apply __declspec(novtable) to it? It doesn’t seem to hurt compiling performance too much.





MGetz  September 10, 2020


  0  Collapse this comment
Copy link
I can’t fix other’s bad code, but I can make sure I don’t contribute to the problem. Hence why I do what I do. Letting an exception fly across most ABI boundaries is very explicitly undefined behavior anyway even if both parts are C++ as they could be using different runtimes. At the end of the day with exceptions everybody needs to be in on it for them to work without issues.