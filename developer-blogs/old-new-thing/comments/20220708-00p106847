Neil Rashbrook  July 9, 2022


  0  Collapse this comment
Copy link
Doesn’t the event give the event handler the item that was inserted and its insert position at the time? In which case, why would Thread 1 go to look at the collection to find the item that got inserted?





Joe Beans  July 8, 2022
· Edited

  0  Collapse this comment
Copy link
I put Dispatcher.VerifyAccess() in all my WPF viewmodel SetProperty(...) calls and it ended the BS pretty quick. I created my own ObservableList to replace ObservableCollection because the latter has no method to clear event subscribers to prevent leaks on disposal, and it evolved to become something pretty dreamy. I'm thinking about adding the same Dispatcher.VerifyAccess() calls to public ObservableList methods but I don't know if it will add noticeable lag when adding a quarter million items. I'm really hoping the range event support in the collection views is completed soon.
Universal rule: unless you are on the UI thread, you do...Read moreI put Dispatcher.VerifyAccess() in all my WPF viewmodel SetProperty(…) calls and it ended the BS pretty quick. I created my own ObservableList to replace ObservableCollection because the latter has no method to clear event subscribers to prevent leaks on disposal, and it evolved to become something pretty dreamy. I’m thinking about adding the same Dispatcher.VerifyAccess() calls to public ObservableList methods but I don’t know if it will add noticeable lag when adding a quarter million items. I’m really hoping the range event support in the collection views is completed soon.
Universal rule: unless you are on the UI thread, you do not get to touch the UI properties.  Even if you use locks, you still have to get back to the UI thread to fire off the change notifications in the proper context and if you let your framework do this “automatically” then it will be very hard to synchronize the collection with the expected user state. This will also cause very big problems if you ref-count your UI threads for intelligent termination.
Cheer up, there are plenty of things you can do off-thread so that you still have the right to call your app “multi-threaded”. It’s just that direct UI manipulation isn’t in that list and shouldn’t be expensive either. Look at the graphical load many AAA games have been able to carry on one thread.
Read less