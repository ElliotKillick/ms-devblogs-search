Piotr Siódmak  August 4, 2020


  0  Collapse this comment
Copy link
What does LC stand for? Long Character? LoCale?





Alex Martin  August 5, 2020


  0  Collapse this comment
Copy link
I would guess locale, as it would align with the abbreviation used in other systems (the Unix locale environment variables are prefixed with LC_).




Elmar  August 4, 2020


  0  Collapse this comment
Copy link
I was wondering about something related with regard to paths and file names. We all know that file names on Windows are case insensitive (under normal circumstances). But what brand of case insensitive exactly? I didn’t find an answer in Microsoft’s documentation. What do I call if I want to test whether two Unicode strings, which might differ in case, will be considered the same when interpreted as a file name?





Jeffrey Tippet  August 4, 2020


  0  Collapse this comment
Copy link
The brand of case depends on when the filesystem was created.  It would be a breaking change for two files on disk to become equal today, if they weren't considered equal yesterday.  So when an NTFS (or exFAT) filesystem is created, the OS writes into the filesystem's metadata a table of all known uppercase codepoint mappings.  From then on, those are the casing tables that everyone uses when contemplating files on that volume.  For example, Unicode 1.1 had U+03F3, but it wasn't until Unicode 7 that its uppercase U+037F was added.  If the volume was...Read moreThe brand of case depends on when the filesystem was created.  It would be a breaking change for two files on disk to become equal today, if they weren’t considered equal yesterday.  So when an NTFS (or exFAT) filesystem is created, the OS writes into the filesystem’s metadata a table of all known uppercase codepoint mappings.  From then on, those are the casing tables that everyone uses when contemplating files on that volume.  For example, Unicode 1.1 had U+03F3, but it wasn’t until Unicode 7 that its uppercase U+037F was added.  If the volume was created by an NTFS implementation that only knows about Unicode 6, then the filesystem will treat “U+037F” and “U+03F3” as separate filenames.  But if you write Unicode 7 or later into the NTFS upcase table, then the same filenames would be considered equivalent.  This system would also allow you to do something reasonable with the famous example of U+0069, U+0049, and U+0130 (although I don’t know whether current versions of Windows choose to open that can of worms).
Your other question is: how do you determine if two filenames would be equivalent?  It’s essentially impossible to predict in advance, given all the special cases (junction points, non-NTFS filesystems, goofy filesystem filter drivers, and `fsutil file SetCaseSensitiveInfo c:\some\special\path enable`).  So I’d suggest just creating the two files and checking if you get an error.  Since you have to handle the TOCTOU race anyway, you might as well make that the main path.
Read less







Simon Clarkstone  August 5, 2020


  0  Collapse this comment
Copy link
>  So when an NTFS (or exFAT) filesystem is created, the OS writes into the filesystem’s metadata a table of all known uppercase codepoint mappings.
I had wondered how MS handled that and had assumed that they picked one global standard. Filesystem metadata is an ingenious choice.





cheong00  August 4, 2020


  0  Collapse this comment
Copy link
Agreed. And it’s not just about Unicode uppercase and lowercase when talking about filenames. Systems with NTFS partition created before WinXP have filenames saved in system code page (e.g.: BIG5 for Traditional Chinese systems) You can have multiple strings points to the same file because the filesystem driver will automatically translate them as needed.
I end up creating FileInfo object with the parameter and use its .Name property to check whether it’s the same.