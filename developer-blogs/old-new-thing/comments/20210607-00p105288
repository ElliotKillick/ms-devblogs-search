Ferdinand Oeinck  June 11, 2021


  0  Collapse this comment
Copy link
I read in "ARM Assembly language programming' by Peter Cockerell, 1987, about the CMN instruction:
"The main use of CMN is in comparing a register with a small negative immediate number, which would not otherwise be possible without loading the number into a register (using MVN). For example, a comparison with -1 would require:
<code>
which uses two instructions and an auxiliary register, compared to this:
<code>"
I think programmers do not need to know more about it. RISC in the docs too!
Read moreI read in ‚ÄúARM Assembly language programming‚Äô by Peter Cockerell, 1987, about the CMN instruction:
‚ÄúThe main use of CMN is in comparing a register with a small negative immediate number, which would not otherwise be possible without loading the number into a register (using MVN). For example, a comparison with -1 would require:
MVN R1, #0 ; get -1 in R1
CMP R0, R1 ; Do the comparison
which uses two instructions and an auxiliary register, compared to this:
CMN R0, #1 ; Compare R0 with -1
‚Äù
I think programmers do not need to know more about it. RISC in the docs too!
Read less







Neil Rashbrook  June 8, 2021


  0  Collapse this comment
Copy link
‚Ä¶ although how often do you need to perform an unsigned compare against zero, except occasionally as an equal to zero test, when you can‚Äôt arrange to instruction that created that zero value set the zero flag? Certainly I hope you weren‚Äôt hoping to find unsigned values less than zero‚Ä¶





Erik Fjeldstrom  June 7, 2021


  0  Collapse this comment
Copy link
Sounds like the designers of the ARM architecture really wanted to make a sign-magnitude machine but were overruled. üôÇ





Alex Martin  June 7, 2021


  0  Collapse this comment
Copy link
Perhaps they got partway through implementing the arithmetic circuitry and then realized why everyone else uses two‚Äôs complement. I understand ARM was originally designed by a relatively small independent team, so they may have had to learn some lessons for themselves‚Ä¶





Fabian Giesen  June 14, 2021


  0  Collapse this comment
Copy link
Nothing of the sort. CMN is just a mnemonic (despite it being somewhat misleading) and the reason it exists has to do with the immediate encoding (discussed in one of the earlier posts, the one about the barrel shifter). Namely, most RISCs have signed immediate operands for their arithmetic operations, but in the A32 (and Thumb-2/T32) encodings, all immediates are unsigned. So you need some way to compare against negative values that uses the same encoding. And if you look at how the instruction set gets encoded, it's pretty clear what's going on.
Regular CMP is just a SUB (subtract) that...Read moreNothing of the sort. CMN is just a mnemonic (despite it being somewhat misleading) and the reason it exists has to do with the immediate encoding (discussed in one of the earlier posts, the one about the barrel shifter). Namely, most RISCs have signed immediate operands for their arithmetic operations, but in the A32 (and Thumb-2/T32) encodings, all immediates are unsigned. So you need some way to compare against negative values that uses the same encoding. And if you look at how the instruction set gets encoded, it‚Äôs pretty clear what‚Äôs going on.
Regular CMP is just a SUB (subtract) that discard its result but keeps the flags. ARM handles addition/subtraction of signed values by using ADD/SUB immediate instructions (whereas RISCs with signed integer immediates typically have both ADD and SUB instructions for register-register computations, but only a single Add-Immediate for the version with immediates that handles both). ARM CMP is a SUB that discards the result and sets the flags; CMN is its mirror counterpart, an ADD that discards the result but sets the flags.
64-bit ARM makes this even more explicit: it introduces a dedicated zero register (wzr/xzr) and writes to that register are ignored. In A64 code, CMP and CMN are pseudoinstructions; they are syntactic sugar for ‚ÄúSUBS wzr/xzr, ‚Äù and ‚ÄúADDS wzr/zr, ‚Äú, respectively. (The ‚ÄúS‚Äù here indicate that these are instructions that write flags.)
Read less







Richard Russell  June 7, 2021


  0  Collapse this comment
Copy link
A ‚Äúrelatively‚Äù small team?  The original ARM 1 was designed by Sophie Wilson and Steve Furber, barely a ‚Äúteam‚Äù at all!





David N  June 8, 2021


  0  Collapse this comment
Copy link
I did a little bit of assembler on that (may have been the ARM 2, whatever the Archimedes had).  It was beautifully minimalist and elegant.  The current instruction set has moved away from that, I think.