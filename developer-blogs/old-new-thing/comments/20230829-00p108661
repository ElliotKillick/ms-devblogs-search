Neil Rashbrook  August 30, 2023


  0  Collapse this comment
Copy link
I remember an application that was changed from VCPI in its 2.0 edition to DPMI in its 2.5 DOS edition, and also had a 2.5 Windows edition. The VCPI version obviously wouldn't run under Windows, so you had to use the EMS version instead, which was limited by the PIF to a reasonable amount of EMS memory. But the DPMI version completely ignored the PIF settings and allocated all the rest of your virtual memory. The only way to get it to run reasonably seemed to be to reduce the amount of virtual memory you had. Or preferably switch to...Read moreI remember an application that was changed from VCPI in its 2.0 edition to DPMI in its 2.5 DOS edition, and also had a 2.5 Windows edition. The VCPI version obviously wouldn’t run under Windows, so you had to use the EMS version instead, which was limited by the PIF to a reasonable amount of EMS memory. But the DPMI version completely ignored the PIF settings and allocated all the rest of your virtual memory. The only way to get it to run reasonably seemed to be to reduce the amount of virtual memory you had. Or preferably switch to the Windows edition, but that wasn’t always possible given the circumstances.
Read less







Damon Chitsaz  August 29, 2023


  0  Collapse this comment
Copy link
I remember being in my early teens, desperately looking for Whatcom compiler just to have that 4GW/DOS banner above my simple C programs. Thanks for shedding some light on this and bringing ol memories back!





Stewart Shearer  August 29, 2023


  0  Collapse this comment
Copy link
This has stirred an ancient memory for me: Around the time of the Windows 95 release, there was some sort of library / backport (?) that allowed some Windows 95 software to run on Windows 3.11. Does this ring any bells?





Almighty Toomre  August 30, 2023


  0  Collapse this comment
Copy link
My own Win32 memory as a programmer: I was porting a large statistics program that had originally be written to run on computers like the PDP-11 and various Unix boxes over to the Windows 3.1 platform using Win32s as our 32-bit solution. The program had a clever scheme so that it could deal with very large data tables on very low memory machines: we would automatically move data between disk and memory buffers as needed. We also supported "temporary" tables that would try to stay in-memory if possible, but would be flushed to disk if needed. The temporary tables had...Read moreMy own Win32 memory as a programmer: I was porting a large statistics program that had originally be written to run on computers like the PDP-11 and various Unix boxes over to the Windows 3.1 platform using Win32s as our 32-bit solution. The program had a clever scheme so that it could deal with very large data tables on very low memory machines: we would automatically move data between disk and memory buffers as needed. We also supported “temporary” tables that would try to stay in-memory if possible, but would be flushed to disk if needed. The temporary tables had a defined file name which might or might not get used.
The problem was how we determined if a table had ever been written to disk: we would attempt to delete the table with an “unlink” (delete) and then we’d check the return code. The return code on unix is clearly defined: unlinking a non-existing file should return error (and set the error to ENOENT, IIRC). But on Win32s this would return success (on the grounds that the file is as deleted as it can be, maybe?)
The result was a slow-motion catastrophe: the internals table-buffer management code would be all confused and start returning bad data. On every failure on Win 3.1, the result was a completely wedged machine; we had to reboot to get working again.
Debugging took a week and was eventually solved only because we did a parallel debug: stepping through code on Windows 3.1 (which failed) and Windows NT (which worked) to see where the code paths diverged.
The good news is that the problem was detected by our “systemtest()” function that did a complete analysis of the entire system.
Read less







Georg Rottensteiner  August 29, 2023


  0  Collapse this comment
Copy link
Win32s was a nifty library, together with WinG it was used for quite a bunch of early Windows games.
And backwards compatibility with it rocks! Games I’ve written for Win 3.11 with Win32s still run flawlessly in Windows 11.





Stewart Shearer  August 29, 2023


  0  Collapse this comment
Copy link
Ah, thanks Marek & Sunil; you’re right!
https://en.wikipedia.org/wiki/Win32s
I remember Space Cadet being able to run, as well as Photoshop 4(?).





Sunil Joshi  August 29, 2023


  0  Collapse this comment
Copy link
I think you’re speaking of Win32S. This was a product which allowed some Windows NT3.1 software to run on Windows 3.11. It supported a limited subset of the Win32 API.





unilynx  August 29, 2023


  0  Collapse this comment
Copy link
win32s?
https://en.wikipedia.org/wiki/Win32s





Marek Knápek  August 29, 2023


  0  Collapse this comment
Copy link
That’s Win32s.





Henry Skoglund  August 29, 2023


  0  Collapse this comment
Copy link
https://en.wikipedia.org/wiki/Win32s