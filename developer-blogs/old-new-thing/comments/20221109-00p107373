Sachin Joseph  November 10, 2022


  1  Collapse this comment
Copy link
Curious if hotpatching in ARM64 works in the same way as x64 üôÇ





–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ê–ª–µ–∫—Å–µ–µ–≤  November 10, 2022


  0  Collapse this comment
Copy link
Perhaps, I am missing something, but the old MOV EDI, EDI method allowed you to call the patch for the function and then jump back to the function, since main function‚Äôs body (immediately after MOV EDI, EDI) will remain untouched.
It is no longer possible in x64, since you will overwrite actual function‚Äôs payload. So, if you want to call the original function, you will have to do something with its first instruction.
Is this scenario (calling the original function) not used widely, so it was abandoned?





Raymond Chen Author
November 10, 2022


  0  Collapse this comment
Copy link
The hotpatch never calls the original function. It is a replacement function.




Joshua Hudson  November 9, 2022


  1  Collapse this comment
Copy link
A recent hotpatch put CreateFileW in Windows 11 into unpatchable territory. It may well have since been fixed I stopped checking.
The initial instruction was movable just fine. There were not five bytes before it that were free. The end of the previous function ran into the space needed to put the far jmp instruction.
We don‚Äôt have to do this nonsense anymore; finally won the war about actually requiring full disk encryption on workstations.





Adam Rosenfield  November 9, 2022


  0  Collapse this comment
Copy link
Are there many functions that start with any of the single-byte opcodes CLC, STC, CLD, or STD?  (There are probably not many with INT1, HLT, CMC, SAHF, LAHF, CLI, or STI in user-mode code.)





Csaba Varga  November 9, 2022
¬∑ Edited

  0  Collapse this comment
Copy link
I'm pretty sure the direction flag is expected to be clear on function entry, so CLD is unnecessary. STD might happen if the first thing the function needs to do is running a repeated string instruction backwards, but it sounds like a pretty uncommon thing to do. (String instructions also mutate RSI and/or RDI, so you would need to save them to the stack first anyway.) Setting, resetting or complementing the carry flag may have been useful in the old DOS days when some functions communicated through that flag, but not so much nowadays.
In any case, if the function needs...Read moreI‚Äôm pretty sure the direction flag is expected to be clear on function entry, so CLD is unnecessary. STD might happen if the first thing the function needs to do is running a repeated string instruction backwards, but it sounds like a pretty uncommon thing to do. (String instructions also mutate RSI and/or RDI, so you would need to save them to the stack first anyway.) Setting, resetting or complementing the carry flag may have been useful in the old DOS days when some functions communicated through that flag, but not so much nowadays.
In any case, if the function needs to execute any of those instructions in the very beginning, the compiler can always insert XCHG AX, AX to work around the issue.
Read less