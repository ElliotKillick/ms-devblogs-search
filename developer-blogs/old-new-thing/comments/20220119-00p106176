Kim Homann  January 21, 2022


  0  Collapse this comment
Copy link
In an ideal world, every function calling a function that may throw an exception should handle all of the possible exceptions and decide one by one what would be sensible to do with them, usually throwing an exception itself, but with a message that fits the caller’s context, not the called function’s context.
Unfortunately, this is not made easy by C++ oder C# like in Java, where all possible exceptions have to be declared upfront.





Dave Gzorple  January 20, 2022


  0  Collapse this comment
Copy link
This is where stacked error codes are handy: “Component X reported this: Component Y reported this: Component Z reported this: Quadrant change in relocatable  expression in subspace $CODE$” (that last one is an actual error message, from PHUX).  That way the error-generating component can report the error that makes sense for it, and the chain of control gives it context.  Having said that the Java-style error backtraces take this to ridiculous lengths, so you need a balance between too little and too much.





Raymond Chen Author
January 21, 2022


  0  Collapse this comment
Copy link
And that’s what 16-bit HRESULTs were. Turns out almost nobody looked at it. The idea has been reinvented with RoTransformError, so it’s still there if you want it, although it relies on the error code producer to provide the transformation information.




Felix Collins  January 20, 2022


  0  Collapse this comment
Copy link
This is a classic case where access to the source code allows the API consuming developer to figure out what is going on. In my career I have several times had to burrow deep into win32 code at the asm level (with only the symbol names to guide me) to figure out why I am getting a weird error. It is amazing what one can deduce from function names alone, but I would have saved hours if I had the source!





switchdesktopwithfade@hotmail.com  January 25, 2022


  0  Collapse this comment
Copy link
This is #1 reason why UWP/WinRT is DOA. It is completely closed source and completely unpredictable. Native code is so overrated.