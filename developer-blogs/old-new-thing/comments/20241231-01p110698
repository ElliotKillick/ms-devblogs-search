Etienne Dechamps  January 9, 2025


  0  Collapse this comment
Copy link
Worth noting that the Abseil (Google) C++ tips were already recommending push_back() over emplace() 5 years before the post you linked.





Nolen Royalty  January 5, 2025


  0  Collapse this comment
Copy link
I’m the creator of Every UUID. Just wanted to say that I’ve been reading this blog since I learned to program (decades ago!) and so I was absolutely delighted to see it mentioned here. I’m really thrilled that you enjoyed it.
-Nolen





Ian Boyd  January 2, 2025


  0  Collapse this comment
Copy link
And for posterity, and fairness to Michael Kaplan, here’s the archive of his blog:
– https://archives.miloush.net/michkap/archive/
A blog on par with Old New Thing in terms of providing background, and explanations, that make the documentation and behaviour make sense.
RIP.





LB  January 1, 2025


  0  Collapse this comment
Copy link
There doesn’t seem to be a way to comment on that blog about push_back vs emplace_back. I wanted to say I find it really disheartening that the only valid reason presented to use push_back is to reduce compile time. Slightly misleading blog post title, useful advice for optimizing compile time I guess but it just goes to show that otherwise push_back has no reason to be used since emplace_back can do everything it can do and more.





Jyrki Vesterinen  December 31, 2024


  0  Collapse this comment
Copy link
Man, that C++ seasoning talk. The lead programmer of the team I was part of at the time showed it to us and it has stuck to me too. We implemented some basic functional programming constructs in Lua on our own, then proceeded to learn LINQ when we were assigned to a C# project. And even in my subsequent programming jobs I’ve strived for functional style when convenient, all thanks to Sean’s advice.
Thank you, Sean. And happy new year.





Stephen Foster  January 2, 2025
· Edited

  1  Collapse this comment
Copy link
Am sharing in this sentiment and experience. Had my first taste in a python-based mentorship while in college with  code golf one liners, and that experience has stuck with me too. My day job is C89, with our internal tooling being a healthy mix of C and C++ (where perhaps one's preconceived notions about what that C++ usage's level of cognizance of modern practices could absolutely be affirmed).
That talk, in addition to auxiliary reading, has given me vocabulary I previously did not have in past code reviews to fully justify my usage of , , ,  and friends...Read moreAm sharing in this sentiment and experience. Had my first taste in a python-based mentorship while in college with list(filter(map(lambda))) code golf one liners, and that experience has stuck with me too. My day job is C89, with our internal tooling being a healthy mix of C and C++ (where perhaps one’s preconceived notions about what that C++ usage’s level of cognizance of modern practices could absolutely be affirmed).
That talk, in addition to auxiliary reading, has given me vocabulary I previously did not have in past code reviews to fully justify my usage of std::accumulate, std::partial_sum, std::transform,  and friends to our team’s veterancy, over the equivalent tsunami of individual raw loops, or of course, allowing for the possibility of introducing deceptive and obstructively load-bearing ones (naive complexity).
Sure the semantics can perhaps lead to sub-optimality performance-wise, but those same semantics are a boon when also optimizing for readability and maintainability. Sure old-school C programmers are not likely to know the first thing about iterator traits, but I think the fact they’re still able to read it, and both maintain and drive discourse based on the code’s intent, is the pudding in which there may be proof that old dogs can learn new tricks. Cheers!
Read less