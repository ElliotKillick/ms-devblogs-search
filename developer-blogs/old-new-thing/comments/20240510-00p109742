Neil Rashbrook  May 11, 2024


  0  Collapse this comment
Copy link
By my reading of the source, is_small:1 should be is_large:1.
If clang is going to ensure short string optimisation, this would then mean that an empty string will always have a zero size “byte”, which would be much more efficient than comparing size() to zero. Maybe it could use something along the lines of
bool empty() const {
  return !__is_long() && __get_short_size() == 0;
}





Henke37  May 10, 2024


  0  Collapse this comment
Copy link
And in the next release of clang they will have figured out how to force the better generation, those people are crazy.





Dario Saccavino  May 10, 2024


  0  Collapse this comment
Copy link
Another difference is that libstdc++’s implementation is not trivially relocatable





Jan Ringoš  May 10, 2024
· Edited

  1  Collapse this comment
Copy link
I’d be convinced that a couple of extra instructions isn’t really that much slower. A few clock cycles tops. And those will be greatly offset by lower cache pressure of the more compact representation, the CPU doing less indirect accesses, and of course the whole software doing less allocations.
Looking forward to see clang design (or folly one) in msvc runtime vNext!