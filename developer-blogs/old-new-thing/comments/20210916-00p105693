Michaël Roynard  September 21, 2021
· Edited

  0  Collapse this comment
Copy link
> Great, we got rid of assignment to a temporary, which we’ve seen has been a source of confusion.
Being able to do assignment into a temporary can be marginally useful. I can think on one use-case for it : let's assume we have a matrix of bools whose underlying layout is like vector of bools. Then calling matrix(i, j) will yield a temporary (proxy) object whose assignment will result in mutating the corresponding bit in the matrix buffer.
Well, we all know we should not imitate vector of bools but proxy objects are a thing, especially with the new addition of...Read more> Great, we got rid of assignment to a temporary, which we’ve seen has been a source of confusion.
Being able to do assignment into a temporary can be marginally useful. I can think on one use-case for it : let’s assume we have a matrix of bools whose underlying layout is like vector of bools. Then calling matrix(i, j) will yield a temporary (proxy) object whose assignment will result in mutating the corresponding bit in the matrix buffer.
Well, we all know we should not imitate vector of bools but proxy objects are a thing, especially with the new addition of ranges in the standard. Being able to refine behavior for these cases is especially useful when implementing custom adapters/facades. And not being able to inherit such behavior will most probably be really annoying…
Read less







Colin Stevens  September 16, 2021


  0  Collapse this comment
Copy link
Sometimes C++ seems like … all a big mistake





Igor Tandetnik  September 16, 2021
· Edited

  0  Collapse this comment
Copy link
> Because explicitly declaring an assignment operator causes the implicitly-declared copy/move constructors to disappear.
Are you sure about that? Seems to [work for me](https://godbolt.org/z/veb97xxrT). Also, if that were true, then `Derived(Derived const&) = default;` wouldn’t have worked either, as that requires `Base` to have a copy constructor, and you claim that it doesn’t have one.





Raymond Chen Author
September 17, 2021


  0  Collapse this comment
Copy link
You’re right. I confused it with the move assignment operator. I’ve revised the article. Thanks.





Igor Tandetnik  September 17, 2021


  0  Collapse this comment
Copy link
There are still many instances where `Derived` is not actually derived from `Base`. And there’s still the issue that, in the world where `Derived` wouldn’t have an implicit copy constructor, `Base` wouldn’t have one either, and then `Derived(Derived const&) = default;` would default it as deleted.




Igor Tandetnik  September 16, 2021


  0  Collapse this comment
Copy link
A nit: in many examples in the article, `Derived` isn’t actually derived from `Base`.