Torsten Krause  November 30, 2023


  0  Collapse this comment
Copy link
I have a complete different question, but the comments on other FilePickers are closed!
I think the implementation of Windows.Storage.Pickers and its SuggestedStartLocation is a fail:
https://learn.microsoft.com/en-us/uwp/api/windows.storage.pickers.pickerlocationid?view=winrt-22621
How can I set a custom start location in any folder? Do I really have to  build my own File Picker
to solve that?
Thanks, Torsten.





Joshua Hudson  November 29, 2023


  1  Collapse this comment
Copy link
Other fun facts about PE file format:
1) Everything is relative to the load address. This actually makes writing position independent code quite reasonable all the way back in 1993, but only if you're coding in assembly. The build toolchain wasn't up to snuff yet. With the x64 instruction set's rel prefix, making binaries with no relocations is easy now.
2) The minimum Win32 subsystem version is 3.10 (not 3.1; it appears the binary version number of Windows NT 3.1 is 3.10). Filling operating system to 1.0 works just fine however.
3) You can stuff readonly data between the DOS stub and the...Read moreOther fun facts about PE file format:
1) Everything is relative to the load address. This actually makes writing position independent code quite reasonable all the way back in 1993, but only if you’re coding in assembly. The build toolchain wasn’t up to snuff yet. With the x64 instruction set’s rel prefix, making binaries with no relocations is easy now.
2) The minimum Win32 subsystem version is 3.10 (not 3.1; it appears the binary version number of Windows NT 3.1 is 3.10). Filling operating system to 1.0 works just fine however.
3) You can stuff readonly data between the DOS stub and the PE Header. I’m not sure if code works or not after the NX bit support was added. I used to think scandisk.exe in Windows 9x took advantage of this to reuse the scan code between DOS scanner and Windows scanner; however this is not the case.
4) Stuffing the import address translation table between the DOS stub and the PE header works. (Why on earth? Somebody did it on stackoverflow and found out it works. I kind of think it shouldn’t work.)
5) You cannot start a section at zero because the loader checks for section has no data in image by checking if its address in image is zero rather than if its size in image is zero. I think this is a bug. With modern disks having 4k blocks; it actually makes sense now to load the whole image as only two (actually three if there are any resources) sections, .text and .data where .text is RX and .data is RW. We can avoid every single page-in being misaligned by starting the first section at 0 bytes rather than 512 bytes.
6) IMAGE_DLLCHARACTERISTICS_ NO_SEH is valid on an x64 executable. I don’t want to find out what this does when you pass function pointers to Windows DLLs.
The specification needs a minor fix. It’s not clear if putting the import address translation table in readonly memory is intended to work or not.
Read less







Joshua Hudson  December 4, 2023


  0  Collapse this comment
Copy link
lol what timing. Somebody finally ran into the 4GB PE file size limitation: https://github.com/Mozilla-Ocho/llamafile
“Unfortunately, Windows users cannot make use of these example llamafiles because Windows has a maximum executable file size of 4GB, and all of these examples exceed that size. (The LLaVA llamafile works on Windows because it is 30MB shy of the size limit.)”





skSdnW  November 29, 2023


  0  Collapse this comment
Copy link
NO_SEH is a hardening flag that tells the OS that the module has no exception handlers that can be called. This is mostly relevant for 32-bit where the chain starts in the TEB and prevents exploits from adding itself to the chain and ROPing into said module.
If an exception happens in the callback function itself then I assume it just crashes. If the exception happens somewhere else then I would guess the callback function frame is just skipped when unwinding?




Melissa P  November 29, 2023


  0  Collapse this comment
Copy link
I actually knew about this.
But the next question is, why was ordinal (aka hint) linkage “hacked” into the name field, and furthermore why is it limited to 16-bit? I assume, that’s part 2.





紅樓鍮  November 29, 2023


  0  Collapse this comment
Copy link
Is there any reason why Windows (the OS, ABI and toolchain) doesn’t attempt to take advantage of position-independent code? The most popular Unix-like OSes support them on x86-64, and I can’t find any information on why Windows doesn’t (other than “Windows supports relocation”, and it’s not like the Unixes don’t support relocation).