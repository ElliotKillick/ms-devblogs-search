Markus Schaber  October 16, 2022


  0  Collapse this comment
Copy link
My thought about this: Some people might try to review the macro file before installing it. And in that case, using a sneaky way would be more likely to get past the review.





Martín Jímenez  October 12, 2022


  0  Collapse this comment
Copy link
Maybe so. But it’d probably be a good idea to fix the reported vulnerability anyway since someday the startup macro format might be changed to no longer allow for arbitrary code execution, and then you’d have a serious vulnerability on your hands.





Simon Farnsworth  October 17, 2022


  0  Collapse this comment
Copy link
It’s worth treating the report as a bug report – presumably the startup macro runtime is not meant to hang or crash, but to execute the startup macro.
But it’s not a security vulnerability, because it relies on you already having permission to do anything you want to do with the privileges of the runtime. There’s no security boundary being crossed, so it’s merely a serious bug, and not a security flaw.





Raymond Chen Author
October 17, 2022


  0  Collapse this comment
Copy link
How do you protect against an in-process hang or crash? Isn’t that solving the Halting Problem? (And even if you detect an in-process hang or crash, how do you recover?) (If your answer is “Run the macro in another process”, then you missed the point of the macro in the first place, which is to preconfigure the current process.)





Simon Farnsworth  October 18, 2022


  0  Collapse this comment
Copy link
It depends on the form the hang or crash takes. If it's "when I execute the equivalent of the C code `for(;;) {}`", it hangs", then the only reasonable resolution is "don't do that then".
If it's "if I concatenate two large strings together, I overflow a statically allocated buffer in the runtime and cause a crash", then it's a bug that needs fixing - input to the runtime shouldn't cause a crash.
In both cases, though, because you're not moving across a security barrier as you do this, you're not finding a security vulnerability - it's a bug.
And I didn't suggest...Read moreIt depends on the form the hang or crash takes. If it’s “when I execute the equivalent of the C code `for(;;) {}`”, it hangs”, then the only reasonable resolution is “don’t do that then”.
If it’s “if I concatenate two large strings together, I overflow a statically allocated buffer in the runtime and cause a crash”, then it’s a bug that needs fixing – input to the runtime shouldn’t cause a crash.
In both cases, though, because you’re not moving across a security barrier as you do this, you’re not finding a security vulnerability – it’s a bug.
And I didn’t suggest protecting against all in-process hangs and crashes: rather, if the startup macro does something that shouldn’t crash or hang (e.g. concatenates two large strings, opens a large file), then that’s a bug, and should be fixed.
If the issue is that the reported bugs are “if I ask the macro runtime to run an infinite loop, it hangs”, then that’s not even a bug.
Read less







Raymond Chen Author
October 18, 2022


  0  Collapse this comment
Copy link
The issue in this specific case is that the startup macro can set a “run this external program when X occurs” option. (Think “set EDITOR=”.) Naturally, this means that when X occurs, the startup macro can run an arbitrary program. But that’s the whole point of the startup macro: So it can configure your environment to suit your preferences.




Mueller, Joel  October 12, 2022


  0  Collapse this comment
Copy link
Correction: it would probably be a good idea to fix the reported vulnerability when and if you also remove arbitrary code execution. Not before.