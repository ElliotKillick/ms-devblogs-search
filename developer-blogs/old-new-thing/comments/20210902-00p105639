Jonathan Duncan  September 3, 2021


  0  Collapse this comment
Copy link
Maybe it’s my ARM-colored glasses showing, but every time I read about x86 calling conventions I can’t imagine how it ended up such a mess.
But perhaps its just a miracle that ARM managed to not fall into that mess an dictate a single calling convention.
If you have some insight into the historical circumstances that led to either I’d be really interested to hear.





Zak Larue-Buckley  September 8, 2021


  0  Collapse this comment
Copy link
I suspect the underlying reason is that x86 just doesn't have enough registers so params have to go on the stack.
This means lots of pushing and popping of params for every call and so whatever calling convention you use, there is compromise. (Eg: __stdcall can't do var-args, __cdecl needs clean-up code at every call site, __fastcall may cause more spilling in callee...)
Modern architectures have enough registers to pass 4 or so params in registers so there is less need for spilling/clean-up code.
I suppose modern compilers can all do link-time code-gen anyway so internally, calling conventions become a moot point...
Read moreI suspect the underlying reason is that x86 just doesn’t have enough registers so params have to go on the stack.
This means lots of pushing and popping of params for every call and so whatever calling convention you use, there is compromise. (Eg: __stdcall can’t do var-args, __cdecl needs clean-up code at every call site, __fastcall may cause more spilling in callee…)
Modern architectures have enough registers to pass 4 or so params in registers so there is less need for spilling/clean-up code.
I suppose modern compilers can all do link-time code-gen anyway so internally, calling conventions become a moot point…
Read less







Me Gusta  September 3, 2021


  0  Collapse this comment
Copy link
It is boringly simple really. ARM support first appeared with Windows 8, ARM64 support also first appeared during the Windows 10 lifetime. It is the same with x86-64 support, where the first version to support this was Windows XP/Server 2003.
The x86 mess came from the age of the architecture and backwards compatibility issues, but because x86-64, ARM and ARM64 are so new, then everything was just incorporated into the default C calling convention.





Александр Гутенев  September 6, 2021


  0  Collapse this comment
Copy link
There’s still some mess even in x86-64. The default `__fastcall` convention isn’t fast enough, so `__vectorcall` also exists.





Jonathan Duncan  September 5, 2021


  0  Collapse this comment
Copy link
Yeah, but ARM has had its documented single “ARM Procedure Call Standard” since at least 1994, Windows just adopted the standard as all other vendors have chosen to do with ARM.
I don’t know the intel history but presumably they didnt think to document and enforce a unified calling convention standard so everyone presumably just did their own thing.