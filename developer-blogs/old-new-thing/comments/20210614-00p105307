Florian Philipp  June 14, 2021


  0  Collapse this comment
Copy link
It seems weird that strex sets a register instead of a flag. Is the reason for this that it allows dispatching multiple strex in an in-order design or am I missing a use-case?





Fabian Giesen  June 14, 2021


  0  Collapse this comment
Copy link
There are already many instructions in the load/store unit that write registers (namely, loads). There are none that write flags. In a CPU design you want to avoid adding new special paths that are only required for a single instruction (or only a few) when you don't have to.
Raymond hasn't gotten to branching yet, but the ARM architecture versions supporting STREX also have CBZ/CBNZ (compare and branch on zero/nonzero, respectively) so you can always branch on the result in a single instruction regardless. As a bonus, all flags set by arithmetic instructions within the critical section make it out. For...Read moreThere are already many instructions in the load/store unit that write registers (namely, loads). There are none that write flags. In a CPU design you want to avoid adding new special paths that are only required for a single instruction (or only a few) when you don’t have to.
Raymond hasn’t gotten to branching yet, but the ARM architecture versions supporting STREX also have CBZ/CBNZ (compare and branch on zero/nonzero, respectively) so you can always branch on the result in a single instruction regardless. As a bonus, all flags set by arithmetic instructions within the critical section make it out. For example, if you use LDREX/STREX to implement an atomic add in the idiomatic way, the flags after the atomic add will correspond to the results of the add which, while not crucial, is definitely handy, and something that wouldn’t work if STREX updated flags.
Read less







Florian Philipp  June 15, 2021


  0  Collapse this comment
Copy link
Thanks. That makes sense.