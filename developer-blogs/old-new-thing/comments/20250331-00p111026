Ian Boyd  April 2, 2025


  0  Collapse this comment
Copy link
From all the various comments, we see how hard it is to choose a color to paint the barn.





John Dyer  April 1, 2025


  0  Collapse this comment
Copy link
Great post!  Next question, how is Sleep handled (aka closing the lid)?  One of the commenters mentions having SQL management studio open with an open transaction.  Seems a very rare case.  From what I understand on a Mac when the lid is closed apps aren‚Äôt ask because the user closed the lid.  Not sure if they‚Äôre closed or just suspended.  Windows is weird in this area.  Something is happening that usually sleep works but a non-trivial number of times you open the backpack and it‚Äôs hot in there.





Joshua Hudson  March 31, 2025


  0  Collapse this comment
Copy link
I liked it better when QM_QUERYENDSESSION wasn't sent to more than one program at a time.
Microsoft claims the main design change was due to misbehaving programs; in my experience this was *not* true but rather the following:
1) Disk I/O saturation
2) Antivirus dragging down the I/O Subsystem
3) Single active program not pumping messages; this was always a case of "oops shouldn't have pressed shutdown". While sometimes the program really was misbehaving usually it was underlying libraries that were misbehaving. I'm looking at you gethostbyname(). My experience actually is "programs crash randomly on Windows 98" due to programs that I...Read moreI liked it better when QM_QUERYENDSESSION wasn‚Äôt sent to more than one program at a time.
Microsoft claims the main design change was due to misbehaving programs; in my experience this was *not* true but rather the following:
1) Disk I/O saturation
2) Antivirus dragging down the I/O Subsystem
3) Single active program not pumping messages; this was always a case of ‚Äúoops shouldn‚Äôt have pressed shutdown‚Äù. While sometimes the program really was misbehaving usually it was underlying libraries that were misbehaving. I‚Äôm looking at you gethostbyname(). My experience actually is ‚Äúprograms crash randomly on Windows 98‚Äù due to programs that I wrote crashing randomly that I can prove have no crash bugs.
4) Waiting for the network filesystem
5) The domain controller hung up again
I remember dealing with cases of somebody pressing log off and walking away assuming it worked; there were definitely better UI choices to fix that than what was actually done to fix the problem starting in Windows Vista.
Read less







Richard Thompson  March 31, 2025
¬∑ Edited

  1  Collapse this comment
Copy link
The phone comparison is disingenuous, though.
Phone and UWP apps are primarily designed for content consumption, or to access a remote server where the user-generated state is stored.
On phones, there's only one, possibly two active apps.
They thus have very little local state - eg WSL2 host terminals have basically nothing, it's all in the VM.
The Windows platform is primarily designed for content creation, thus there is an extremely large amount of user-generated local state that must be saved to disk.
Many, perhaps most PC users regularly have multiple gigabytes of local user data open across multiple applications - far...Read moreThe phone comparison is disingenuous, though.
Phone and UWP apps are primarily designed for content consumption, or to access a remote server where the user-generated state is stored.
On phones, there‚Äôs only one, possibly two active apps.
They thus have very little local state ‚Äì eg WSL2 host terminals have basically nothing, it‚Äôs all in the VM.
The Windows platform is primarily designed for content creation, thus there is an extremely large amount of user-generated local state that must be saved to disk.
Many, perhaps most PC users regularly have multiple gigabytes of local user data open across multiple applications ‚Äì far more than can be realistically stored on minimise/background (or suspend), as restore would take many seconds, sometimes minutes.
Hence the need for the save-on-exit notification and quite a long time period to do the necessary serialisation.
Read less







œâ  April 2, 2025


  0  Collapse this comment
Copy link
‚ÄúThe Windows platform is primarily designed for content creation‚Äù (emphasis added)
Bold assertion I have to disagree with.





Martin Ba  April 1, 2025


  2  Collapse this comment
Copy link
Hogwash!?! :-)
What do we have here:
* Outlook - autosave anyway
* 2 MS Visual Studios with a 1050 Project Solution - minor bytes to save on close (sourcecode only), all other state is autosave
* Word/Excel - yeah, might get big, but is autosave 50% of the time nowaways anyways, and if it isn't the current edit state can easily be saved to disk without hassle.
* Thunderbird/Firefox ... all autosave / savestate
If I have SQLDeveloper open with an uncommitted DB connection, then I want to be *asked*, but the act of commit/rollback is < seconds.
What I do agree...Read moreHogwash!?! üôÇ
What do we have here:
* Outlook ‚Äì autosave anyway
* 2 MS Visual Studios with a 1050 Project Solution ‚Äì minor bytes to save on close (sourcecode only), all other state is autosave
* Word/Excel ‚Äì yeah, might get big, but is autosave 50% of the time nowaways anyways, and if it isn‚Äôt the current edit state can easily be saved to disk without hassle.
* Thunderbird/Firefox ‚Ä¶ all autosave / savestate
If I have SQLDeveloper open with an uncommitted DB connection, then I want to be *asked*, but the act of commit/rollback is < seconds.
What I do agree on is that some specific applications, more so on PC than mobile, may have uncommitted state, but the amount if data is not the problem, the problem is that it could make a meaningful impact to the user to commit or cancel, and the uncommitted state cannot be easily preserved across reboot / hibernation.
Read less







Marc Fauser  April 2, 2025


  0  Collapse this comment
Copy link
Firefox, okay.
But Thunderbird has a stupid bug.
I open all the mails I want to finish in the next hours in new windows.
When you close TB, it won‚Äôt open the windows like Firefox.
It‚Äôs a known bug and they don‚Äôt want to fix it.





Christopher Lee  April 1, 2025


  0  Collapse this comment
Copy link
Long-running operations (like writing files to a compact disc, or a terminal window computation process) are a problem.  I'd like to see more options or alternatives for these, like shifting the in-progress terminal window computation to a Task Scheduler task that can continue running in an independent session after logoff, or having the database session continue running on the database server and letting you reconnect to it (like reconnecting to a disconnected Remote Desktop session).  Maybe Xbox consoles can innovate in this area with cross-device Quick Resume and have that trickle down to Windows; they already have multi-user...Read moreLong-running operations (like writing files to a compact disc, or a terminal window computation process) are a problem.  I‚Äôd like to see more options or alternatives for these, like shifting the in-progress terminal window computation to a Task Scheduler task that can continue running in an independent session after logoff, or having the database session continue running on the database server and letting you reconnect to it (like reconnecting to a disconnected Remote Desktop session).  Maybe Xbox consoles can innovate in this area with cross-device Quick Resume and have that trickle down to Windows; they already have multi-user applications that continue running despite users signing in and out.
Read less





GL  March 31, 2025
¬∑ Edited

  0  Collapse this comment
Copy link
I think the one-by-one design is only for compatibility with programs that rely on a specific order.
>I know I asked you to say your final good-byes, and you‚Äôre in the middle of a dialog with the user, but I need you to cancel out of it right now because we‚Äôre not shutting down after all.
I'm not sure how to parse this. The documentation of WM_QueryEndSession and WM_EndSession says the following.
1. WM_QES is sent to every window when a session ending is initiated.
2. Applications should respond to WM_QES immediately and defer clean-up to processing WM_ES.
3. If a window responds...Read moreI think the one-by-one design is only for compatibility with programs that rely on a specific order.
>I know I asked you to say your final good-byes, and you‚Äôre in the middle of a dialog with the user, but I need you to cancel out of it right now because we‚Äôre not shutting down after all.
I‚Äôm not sure how to parse this. The documentation of WM_QueryEndSession and WM_EndSession says the following.
1. WM_QES is sent to every window when a session ending is initiated.
2. Applications should respond to WM_QES immediately and defer clean-up to processing WM_ES.
3. If a window responds to WM_QES, it will receive WM_ES with a consolidated wParam.
4. After a window responds to WM_ES, the session is ‚Äúeffectively ended‚Äù for it.
Therefore, the official way to say ‚Äúnot shutting down after all‚Äù is to send the window WM_ES with wParam = FALSE. Suppose the system decides to send WM_QES concurrently, stop sending it when a FALSE is received, then it can just send all QES-sent windows a WM_ES with wParam = FALSE. If the windows do not rely on order of WM_QES, then they can just imagine WM_QES are sent sequentially and some one last window decides to cancel shutdown.
Edit: ‚ÄúApplication Shutdown Changes in Windows Vista‚Äù mentions the notifications are serial.
Read less







Raymond Chen Author
March 31, 2025


  0  Collapse this comment
Copy link
The current recommendation is to return immediately from WM_QUERYENDSESSION, but the past, the common pattern was for programs to display a message like "Save changes before exiting?" If the user says "Save", then they save. If the user says "Discard", then they don't save. If the user says "Cancel", then they cancel shutdown. The problem is how to tell the program that has not yet responded to QM_QUERYENDSESSION, "Hey, sorry, I'm withdrawing my query. Please cancel your active "Save changes before exiting?" dialog box because we're not exiting."
The alternative would be to have the user say "Yes, save before exiting",...Read moreThe current recommendation is to return immediately from WM_QUERYENDSESSION, but the past, the common pattern was for programs to display a message like ‚ÄúSave changes before exiting?‚Äù If the user says ‚ÄúSave‚Äù, then they save. If the user says ‚ÄúDiscard‚Äù, then they don‚Äôt save. If the user says ‚ÄúCancel‚Äù, then they cancel shutdown. The problem is how to tell the program that has not yet responded to QM_QUERYENDSESSION, ‚ÄúHey, sorry, I‚Äôm withdrawing my query. Please cancel your active ‚ÄúSave changes before exiting?‚Äù dialog box because we‚Äôre not exiting.‚Äù
The alternative would be to have the user say ‚ÄúYes, save before exiting‚Äù, and the app saves, but it doesn‚Äôt exit.
On top of that, many programs exit in response to WM_QUERYENDSESSION rather than waiting for WM_ENDSESSION. So the user cancels shutdown, and they answer ‚ÄúSave‚Äù, and the program saves and exits. ‚ÄúHey, wait, come back, we‚Äôre not shutting down!‚Äù
Read less







Neil Rashbrook  April 1, 2025


  0  Collapse this comment
Copy link
As well as the problem of the programs that save and exit in response to WM_QUERYENDSESSION, there are also programs with the reverse problem ‚Äì they set a save state and register with the restart manager, but nothing happens because the shutdown was cancelled; they then ignore the real shutdown, and so don‚Äôt get restarted. (But fortunately the save state is still there, so I was able to extract the data.)





GL  March 31, 2025
¬∑ Edited

  0  Collapse this comment
Copy link
Thanks for the elaborate explanation. I guess one thing is that most programs never moved on from the Windows XP shutdown design ("save and exit, discard and exit, cancel shutdown" dialog).
Preemptively, I think writing the correct shutdown logic is a software tax, so I don't expect much to be done. For a theoretical discussion... It's actually good to not dismiss the dialog if the user cancels shutdown, on the presumption that the user cancels BSDR to deal with the offending programs then shutdown again. Under that assumption, it's also good if the program saves and exits. Re the other comment...Read moreThanks for the elaborate explanation. I guess one thing is that most programs never moved on from the Windows XP shutdown design (‚Äúsave and exit, discard and exit, cancel shutdown‚Äù dialog).
Preemptively, I think writing the correct shutdown logic is a software tax, so I don‚Äôt expect much to be done. For a theoretical discussion‚Ä¶ It‚Äôs actually good to not dismiss the dialog if the user cancels shutdown, on the presumption that the user cancels BSDR to deal with the offending programs then shutdown again. Under that assumption, it‚Äôs also good if the program saves and exits. Re the other comment on desktop computers being used for critical tasks (content creation, large state to save), in an ideal world, an application can indicate it has well-considered shutdown logic in its manifest, and for all shutdown-aware applications, Windows can use concurrent WM_QES plus allow longer response time for WM_ES on the presumption that the application really is auto-saving instead of waiting for dialog response. But alas, I am not confident enough that people care to use and not abuse this feature.
Edit: BTW, on the BSDR screen, it‚Äôs possible to Alt+Tab to the indeterminate ring sign-out message screen (22H2 and 24H2, and on 24H2 after Alt+Tab the two screens are overlapped if Welcome Screen background is disabled). I think this is a bug?
Read less