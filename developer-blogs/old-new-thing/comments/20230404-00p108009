Christian Klutz  April 5, 2023


  1  Collapse this comment
Copy link
Looks like this is no longer the case with .NET (core). Where, on Windows, the environment block is always created as UNICODE, if you specify your own variables using `ProcessStartInfo.Environment` or `ProcessStartInfo.EnvironmentVariables`.
https://github.com/dotnet/runtime/blob/e13f0dc1e0327b5d0cd0602b55ee257ef554f0a1/src/libraries/System.Diagnostics.Process/src/System/Diagnostics/Process.Windows.cs#L513-L514
https://github.com/dotnet/runtime/blob/e13f0dc1e0327b5d0cd0602b55ee257ef554f0a1/src/libraries/System.Diagnostics.Process/src/System/Diagnostics/Process.Windows.cs#L860-L861





Joshua Hudson  April 4, 2023


  2  Collapse this comment
Copy link
Unfortunately that’s not _quite_ the right answer. The shipping copy of .NET Framework is compiled with FEATURE_PAL and there’s no way application code can change that.
Also, most things do _NOT_ like unicode environments. The root problem is an API level bug in Windows. If the caller passes NULL for environment in Windows and has a unicode environment, the child process won’t have a unicode environment and everything blows up.





Daniel Roskams  April 5, 2023


  2  Collapse this comment
Copy link
>most things do _NOT_ like unicode environments
Really? If I just start Notepad or any other application and inspect its environment block with windbg, I see Unicode characters there. Furthermore when I write any code that involves CreateProcess(W) I more often than not pass NULL for the Environment parameter and everything works fine.
In fact, I believe that the environment variables are *always* stored as Unicode. If you ask for the ANSI version the system converts it for you on the fly.





Me Gusta  April 5, 2023


  0  Collapse this comment
Copy link
There is another possibility here, that is the CRT.