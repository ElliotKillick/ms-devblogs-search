Sunil Joshi  December 10, 2023


  0  Collapse this comment
Copy link
Wouldn’t it be better to use WaitOnAddress and WakeByAddress? It would avoid a kernel transition when there is no contention and a kernel object.





Raymond Chen Author
December 10, 2023


  1  Collapse this comment
Copy link
There is no async version of WaitOnAddress, so you hang the thread, which is a problem if “do some more stuff, including co_await” needs access to the thread.





Sunil Joshi  December 11, 2023


  0  Collapse this comment
Copy link
Thank you for explaining.



Joshua Hudson  December 8, 2023
· Edited

  0  Collapse this comment
Copy link
You know you can use `CreateEvent(NULL, FALSE, TRUE, NULL);` to create a mutex that doesn’t have thread affinity right?
The mutex is taken by `WaitForSingleObject()` and released by `SetEvent()`.
Some documentation suggests this is currently a fair mutex but that isn’t contractual.





Raymond Chen Author
December 8, 2023
· Edited

  0  Collapse this comment
Copy link
It’s not the same as a Win32 mutex. A Win32 mutex (as opposed to a C++ std::mutex) supports reentrant claims, but your CreateEvent does not.





Joshua Hudson  December 8, 2023


  0  Collapse this comment
Copy link
Indeed it does not support reentrant claims. That’s why I posted it.
I’ve been able to make this mutex form work on a thread pool by using a callback variant of WaitForSingleObject to re-enqueue the job.
Clearly that wouldn’t work at all if it supported reentrant claims.