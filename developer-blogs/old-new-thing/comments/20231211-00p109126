Bernd Oppolzer  December 12, 2023
· Edited

  0  Collapse this comment
Copy link
In normal Pascal procedure calls, such a vector of stack frame addresses is not needed. A standard Pascal runtime knows all the time about the current stack frame address of - say - the procedure which is currently active at static level n. This information is called the DISPLAY VECTOR and there is no need to copy the display vector on procedure calls, because it is stored at a well-known location inside the runtime. You only have to replace the stack frame addresses of the current static level, when you enter or leave a procedure (and maybe set the new...Read moreIn normal Pascal procedure calls, such a vector of stack frame addresses is not needed. A standard Pascal runtime knows all the time about the current stack frame address of – say – the procedure which is currently active at static level n. This information is called the DISPLAY VECTOR and there is no need to copy the display vector on procedure calls, because it is stored at a well-known location inside the runtime. You only have to replace the stack frame addresses of the current static level, when you enter or leave a procedure (and maybe set the new current static level).
What makes things more complicated, are procedure and function PARAMETERS (in Pascal), that is: procedures that are passed as parameters to other procedures. In this case, it is indeed necessary to COPY THE COMPLETE DISPLAY VECTOR, because it is not possible to predict what static level the procedure (which is passed as a parameter) has. So maybe the ENTER instruction is meant for such use cases.
Some of the old Pascal compilers didn’t allow procedure parameters (or implemented them badly) due to these difficulties.
To see, if your (Pascal or Algol) compiler implemented procedure parameters correctly, you can use the “Man or Boy” test: https://en.wikipedia.org/wiki/Man_or_boy_test
Read less







Kalle Niemitalo  December 18, 2023


  0  Collapse this comment
Copy link
Does any current ABI specification define the static chain pointer or display vector in sufficient detail, to allow lexically nested procedures or functions to be passed as parameters between programming languages?  On the Itanium, one could perhaps construct a temporary function descriptor and place the static chain pointer in its global pointer field, but I don’t know if this is permissible.




Melissa P  December 12, 2023


  0  Collapse this comment
Copy link
well, no silicon wasted… the instructions only exist in microcode
but you can’t get rid of those, as a lot of “positive malware” is still using them, aka “software protectors”.





Fabian Giesen  December 12, 2023


  0  Collapse this comment
Copy link
Microcode ROM still takes up silicon real estate!




Nikolay Pavlov  December 12, 2023


  0  Collapse this comment
Copy link
I wonder why C# and CLR opted for what are essentially global variables for closures, instead of going for this option.  It is way more efficient: no allocations and less pressure on GC, perhaps even more cache-friendly due to locality.





紅樓鍮  December 12, 2023
· Edited

  0  Collapse this comment
Copy link
And if your question was why C# doesn't keep the closure state on the stack: this won't work if the reachability of the closure escapes the function that created the closure. For example, a function that returns a closure can't allocate that closure on its own stack frame:
<code>
(My C# is very rusty; please correct me if my code doesn't compile.)
If  just referred to the  on the stack, then once  returns, that  would no longer exist, and the closure would try to access a nonexistent stack variable.
Similarly, the compiler can't know statically whether it's safe to allocate...Read moreAnd if your question was why C# doesn’t keep the closure state on the stack: this won’t work if the reachability of the closure escapes the function that created the closure. For example, a function that returns a closure can’t allocate that closure on its own stack frame:
Func<int> CreateClosure()
{
    int counter = 0;
    return () => ++counter;
}

var f = CreateClosure();
Debug.Assert(f() == 1);
Debug.Assert(f() == 2);
(My C# is very rusty; please correct me if my code doesn’t compile.)
If () => ++counter just referred to the counter on the stack, then once CreateClosure returns, that counter would no longer exist, and the closure would try to access a nonexistent stack variable.
Similarly, the compiler can’t know statically whether it’s safe to allocate the closure on the stack if the closure will be passed to another function:
void PrintCounter()
{
    int counter = 0;
    new Timer(_ => {
        var value = Interlocked.Increment(ref counter);
        Console.WriteLine($"{value}\n");
    }, null, 0, 1000);
}
Passing a closure to Timer‘s constructor causes it to escape to another thread; that thread must be able to safely invoke the closure even after PrintCounter has returned.
Non-heap-based languages like Rust allow you to create closures that are stored on the stack, but they (except C++, which wasn’t designed to be strictly safe) track your usage of said closures to ensure they don’t escape the parent function’s stack frame in the fashions shown above (if the parent function passes the closure to another function by reference, the callee must assert in its type signature that it doesn’t retain that reference beyond the closure’s lifetime). It’s also possible for heap-based languages to do such escape analysis dynamically, and elide the heap allocation in case they prove that escaping doesn’t happen; if my memory serves, Java does that optimization, but I don’t hear .NET does it.
Read less







紅樓鍮  December 12, 2023


  0  Collapse this comment
Copy link
IIRC, each instantiation of a C# closure puts captured variables on a heap-allocated structure, not “global variables” as you say.
And to my knowledge, all languages that implement closures (other than C++, Rust and maybe all those emerging languages that are inspired by them) allocate closure state on the heap (and if they support objects, they also allocate objects on the heap, and objects and closures are almost certainly unified in one way or another at the type system level), and these heap-based languages also tend to feature efficient garbage-collected heaps.





Solomon Ucko  December 12, 2023


  0  Collapse this comment
Copy link
Rust stores the captured variables (which could be copies or references) inside the closure object, and uses lifetimes to make sure references don’t escape. The closure is stored on the stack by default, but can be put on the heap using a smart pointer. I think Swift does something similar, but with more magic, by using `@noescape` and `@escaping`.



Rob Herbert  December 11, 2023


  0  Collapse this comment
Copy link
It's been a long time since I programmed in pure Assembler, but I remember thinking the second parameter was basically useless.
Yes, there was a theoretical use for it (and LEAVE) but given the number of times it was ever likely to be used, it was, as you say, wasted silicon.
Worth mentioning, though, that it was one of those instructions introduced with the 80186 along with PUSHA and POPA, INSB and OUTSB, the moderately useful IMUL byte, and the possibly never-used BOUND.
For real nerds, PUSHA and POPA on the 80186 worked differently from later CPUs and was a way to detect...Read moreIt’s been a long time since I programmed in pure Assembler, but I remember thinking the second parameter was basically useless.
Yes, there was a theoretical use for it (and LEAVE) but given the number of times it was ever likely to be used, it was, as you say, wasted silicon.
Worth mentioning, though, that it was one of those instructions introduced with the 80186 along with PUSHA and POPA, INSB and OUTSB, the moderately useful IMUL byte, and the possibly never-used BOUND.
For real nerds, PUSHA and POPA on the 80186 worked differently from later CPUs and was a way to detect the CPU in use.
Read less







skSdnW  December 12, 2023


  0  Collapse this comment
Copy link
MSVC will generate LEAVE sometimes. ENTER is supposedly too slow even when optimizing for size.




Kalle Niemitalo  December 11, 2023


  0  Collapse this comment
Copy link
Perhaps Intel was inspired by display registers in Burroughs Large Systems.





Alex Shpilkin  December 12, 2023
· Edited

  0  Collapse this comment
Copy link
The “display” in the name of those refers to the display technique introduced at the very end of Dijkstra’s “Recursive programming” (1960, DOI 10.1007/BF01386232). The variation used by Intel seems to have been introduced in Gries’s compilers book (1971, ISBN 0-471-32776-X).