MR  June 9, 2019


  0  Collapse this comment
Copy link
Unfortunately the linked change to C++/WinRT to produce the better error message is gone, at least for the moment: https://github.com/microsoft/xlang/pull/436





Ian Kemp  June 2, 2019


  0  Collapse this comment
Copy link
Why not make it even clearer with a short addition:
a function that returns ‘auto’ cannot be used before it is defined (did you forget to include a relevent header file?)





Tim Weis  June 7, 2019


  0  Collapse this comment
Copy link
That would require a change in the compiler. That’s not something the C++/WinRT team can do. If the compiler team did change the error message, it would eventually show up in code that isn’t C++/WinRT. And when that happens, chances are that including a header file may not be part of the solution.




George Gonzalez  May 30, 2019


  0  Collapse this comment
Copy link
A nitpicker could pick that the new message STILL requires one to think like a compiler, and know that an undeclared interface causes the compiler to generate an auto return type, is that right?   The message, like the old Lance Lawson comic strip, always has the criminal's alibi saying or assuming too much.  How about a stream of conciousness error message explaing the compiler's chain of thought, like "Compiler sees xxxx on line yyy.  No expllicit definition seen so far for xxxx return type or parameters.   Compiler assuming auto return type.  However  in this context compiler cannot deduce the type...Read moreA nitpicker could pick that the new message STILL requires one to think like a compiler, and know that an undeclared interface causes the compiler to generate an auto return type, is that right?   The message, like the old Lance Lawson comic strip, always has the criminal’s alibi saying or assuming too much.  How about a stream of conciousness error message explaing the compiler’s chain of thought, like “Compiler sees xxxx on line yyy.  No expllicit definition seen so far for xxxx return type or parameters.   Compiler assuming auto return type.  However  in this context compiler cannot deduce the type at the point of call, so that’s an error.  Give the compiler a hint of what xxxx is.”
Read less







Raymond Chen Author
May 30, 2019


  0  Collapse this comment
Copy link
There is only so much you can do to try to get the compiler to generate a useful error message, since you are not in control of the error message. “some method” + “used before it is defined” hopefully leads you think, “Maybe I should define that thing.”