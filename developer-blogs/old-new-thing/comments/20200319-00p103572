word merchant  March 20, 2020


  0  Collapse this comment
Copy link
I was getting very concerned that C++ wasn’t accreting enough complexity. This column has put my mind at rest.





Phil Deets  March 19, 2020


  0  Collapse this comment
Copy link
The last line should not have an exclamation point. It should be this:
 static_assert(std::is_same_v<std::void_t<Op>, int>,
               “Don’t know what you are asking me to do.”);





Joshua Hudson  March 19, 2020


  0  Collapse this comment
Copy link
I'm actually annoyed that the uglyness of abominable functions exists. I think it's more than the hijinks of the type system, but rather an actual case the compiler just can't comprehend.
Imagine a read-only memory-mapped IO port. The natural declaration is:
extern uint16_t const volatile port42;
But it doesn't compile because the compiler authors won't admit const volatile, until their hand got forced by a const function inside a (pointer to a) volatile struct. ☹
Incidentally I discovered the restriction while trying to use it. The C header file contained a declaration that looked about like that, and it was exported from an assembly...Read moreI’m actually annoyed that the uglyness of abominable functions exists. I think it’s more than the hijinks of the type system, but rather an actual case the compiler just can’t comprehend.
Imagine a read-only memory-mapped IO port. The natural declaration is:
extern uint16_t const volatile port42;
But it doesn’t compile because the compiler authors won’t admit const volatile, until their hand got forced by a const function inside a (pointer to a) volatile struct. ☹
Incidentally I discovered the restriction while trying to use it. The C header file contained a declaration that looked about like that, and it was exported from an assembly module that updated the memory reference that would update it from another thread. The compiler upchucked so I had to take the const off.
Read less







Eric Brown  March 19, 2020


  0  Collapse this comment
Copy link
Joshua –
If you had a const variable that gets updated elsewhere, it’s not const.    If it’s const, the compiler is perfectly within its rights to inline or elide any references, resulting in the changes not getting noticed.





Joshua Hudson  March 19, 2020


  0  Collapse this comment
Copy link
You’re mixing that up with C#. The compiler is not allowed to inline references to extern const like that. C++’s const is more C#’s readonly.





Eric Brown  March 20, 2020


  0  Collapse this comment
Copy link
Oh?   Can you point out where in the standard it says that?   Because I’ve seen compilers do just that.   And if not, then what is volatile for?





Joshua Hudson  March 20, 2020


  0  Collapse this comment
Copy link
If you write const int value = something; then yes the compiler can indeed fold something. If you write extern const int value; it cannot. But the compiler in general is allowed to suppress redundant relaods. volatile has the singular purpose of telling the compiler to not do that.