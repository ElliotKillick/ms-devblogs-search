Dewayne Christensen  September 20, 2024


  0  Collapse this comment
Copy link
Isn’t this what the “git cherry” command is for?





Chris Bristol  September 20, 2024
· Edited

  0  Collapse this comment
Copy link
I think of myself as a skilled git user, but every time I see a post here about git, I learn something new.
For those that aren’t familiar with the `featurebranch{@u}` syntax, like me, this StackOverflow post provides a good description of the various commit-ish and tree-ish syntaxes that git supports.
I think what it means (when used with `git checkout`) is checkout the upstream version of featurebranch – it is not clear to me how/if this would be different from `git checkout origin/featurebranch`.





Daniel Rose  September 24, 2024


  0  Collapse this comment
Copy link
Besides what Raymond wrote: your target upstream repository might not be named “origin”, and there might even be multiple upstream repositories. When I am working on open-source GitHub issues, I usually have two upstream repositories, one for the original project, and one for my forked version. That way I can work on my PR in my fork, and keep my fork and the original project synced.





Daniel Sturm  September 20, 2024


  0  Collapse this comment
Copy link
Agreed, I think Raymond’s deep dives into weird git areas are my favorite part of the blog – it’s the thing I probably learn the most useful things for day to day development from.





Raymond Chen Author
September 20, 2024


  0  Collapse this comment
Copy link
It’s possible that the upstream of the local branch “featurebranch” is not “origin/featurebranch”. It might be “origin/raymond/bugfix-1234567” (because your team has rules about branch names, but you want a nicer name locally), or even “personal/featurebranch” if you pull from one repo and push to another.