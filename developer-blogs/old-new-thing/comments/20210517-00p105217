Zolt√°n Farkas  May 22, 2021


  0  Collapse this comment
Copy link
Hi,
A little bit off-topic, but could anyone please shed some light on why NT 3.51 and NT 4.0 did not care about the IDE drive's "fixed-bit" being set when partitioning and installing? They install, make and access any partitions on a removable device, but NTs beginning with Windows 2000 "lost" this capability. NT 5.0+ neither can be installed on any of the "non-first" partitions of a removable device, nor can it access any of the non-first partitions of a removable IDE device. It really puzzles me as I just could not/cannot figure out why NT 4.0 and below did/does not...Read moreHi,
A little bit off-topic, but could anyone please shed some light on why NT 3.51 and NT 4.0 did not care about the IDE drive‚Äôs ‚Äúfixed-bit‚Äù being set when partitioning and installing? They install, make and access any partitions on a removable device, but NTs beginning with Windows 2000 ‚Äúlost‚Äù this capability. NT 5.0+ neither can be installed on any of the ‚Äúnon-first‚Äù partitions of a removable device, nor can it access any of the non-first partitions of a removable IDE device. It really puzzles me as I just could not/cannot figure out why NT 4.0 and below did/does not care about the ‚Äúfixed-bit‚Äù and what the technical reason is that NT 5.0 and above cannot handle such disks like their predecessors. Maybe explaining this would be a good candidate for a new article? üòâ
Read less







Erik Fjeldstrom  May 26, 2021


  0  Collapse this comment
Copy link
I don‚Äôt have easy access to documents right now, but my guess is that early IDE didn‚Äôt foresee removable storage on the interface (or drives weren‚Äôt implementing the spec fully yet), so Windows didn‚Äôt check/couldn‚Äôt trust the drive type. Later versions came out when drive type was a thing that could be reliably tested.




Joshua Hudson  May 20, 2021


  0  Collapse this comment
Copy link
I always wondered what CS_BYTEALIGNCLIENT|CS_BYTEALIGNWINDIW but WS_BORDER would do, but even my Win3.1 had SVGA so I don‚Äôt know.





John Elliott  May 19, 2021


  0  Collapse this comment
Copy link
By way of comparison: GEM doesn‚Äôt have a CS_BYTEALIGNCLIENT style, so the demo applications force the client X coordinate to be word-aligned in the WM_SIZED and WM_MOVED handlers ‚Äî whether or not it‚Äôs necessary.





Yuhong Bao  May 20, 2021


  0  Collapse this comment
Copy link
I found out that X386 early on did not even support VGA 16 color mode.




Alexis Ryan  May 18, 2021
¬∑ Edited

  0  Collapse this comment
Copy link
windows 95 in Cga I don‚Äôt think so. There have been some attempts to hack it to get it to work but efforts not hugely successful. If windows would even start with the driver its not exactly usable. Ega in win95 at least works with a win 3.1 driver but its not something you could do out of the box with a normal win95 installation but ega 4 bit colour works much the same as vga just at a lower resolution





Neil Rashbrook  May 18, 2021


  0  Collapse this comment
Copy link
Relevantly, the VGA 16-colour mode used by Windows used planes, so that each pixel was represented by the same bit in four different bytes, rather than being a linear packing of pixels into nybbles which would have only required even coordinates.





Martin Fiedler  May 18, 2021


  0  Collapse this comment
Copy link
I don't agree that aligning coordiates to multiples of 4 would be beneficial in unchained 8bpp VGA modes ("Mode X" and derivatives). In these modes, each pixel occupies a full byte, it's just that you can't access all the pixels at the same time, but only 0, 4, 8, 12, ... or 1, 5, 9, 13, ... or 2, 6, 10, 14, ... or 3, 7, 11, 15, .... Copying a bitmap to an arbitrary position is thus easily possible: Copy every fourth pixel to the appropriate plane, switch to the next plane, copy the next set of pixels, switch...Read moreI don‚Äôt agree that aligning coordiates to multiples of 4 would be beneficial in unchained 8bpp VGA modes (‚ÄúMode X‚Äù and derivatives). In these modes, each pixel occupies a full byte, it‚Äôs just that you can‚Äôt access all the pixels at the same time, but only 0, 4, 8, 12, ‚Ä¶ or 1, 5, 9, 13, ‚Ä¶ or 2, 6, 10, 14, ‚Ä¶ or 3, 7, 11, 15, ‚Ä¶. Copying a bitmap to an arbitrary position is thus easily possible: Copy every fourth pixel to the appropriate plane, switch to the next plane, copy the next set of pixels, switch planes again, and so on. Things become slightly more interesting for VRAM-to-VRAM copies, but even that is solveable.
I do agree that the whole point is moot though: The highest-resolution mode you can get this way is something like 360√ó480, and all ‚ÄúSuper VGAs‚Äù that could do 640√ó480 or higher in 256 colors defaulted to a banked (or even fully linear) instead of a planar memory layout.
Read less







Yuhong Bao  May 17, 2021


  0  Collapse this comment
Copy link
Windows 95 already did not officially support anything less than VGA.