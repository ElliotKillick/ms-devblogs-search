Jonathan Duncan  November 26, 2023
¬∑ Edited

  0  Collapse this comment
Copy link
Is there some side-effect or other reason I can‚Äôt see why the return std::move(name); case isn‚Äôt possible to elide? Or is this just a case of the standards missing an opportunity and compilers being bound to obey the standards?





Kevin Norris  November 26, 2023
¬∑ Edited

  3  Collapse this comment
Copy link
The standard requires elision if the return value is a prvalue ("pure rvalue"), but std::move(foo) is an xvalue ("expiring lvalue"). The standard allows elision in the NVRO case described by Raymond, as well as a few oddball scenarios involving exceptions and coroutines. In all other cases, elision is only permitted under the as-if rule, which requires the compiler to prove that there is no difference in observable behavior - in practice, this means it has to prove that constructing the temporary, calling the copy/move constructor, and calling the temporary's destructor, all do not affect program behavior and may be replaced...Read moreThe standard requires elision if the return value is a prvalue (‚Äúpure rvalue‚Äù), but std::move(foo) is an xvalue (‚Äúexpiring lvalue‚Äù). The standard allows elision in the NVRO case described by Raymond, as well as a few oddball scenarios involving exceptions and coroutines. In all other cases, elision is only permitted under the as-if rule, which requires the compiler to prove that there is no difference in observable behavior ‚Äì in practice, this means it has to prove that constructing the temporary, calling the copy/move constructor, and calling the temporary‚Äôs destructor, all do not affect program behavior and may be replaced with an in-place construction. This turns out to be fairly challenging.
Elision in the generalized xvalue case might not be valid. It‚Äôs possible that you are moving from some object that already existed before the function was called, and so it is not possible to construct it in-place without optimizing across the function call boundary. Worse, the object might be visible to other parts of the program, or even to other threads executing concurrently. Such objects should not have their destructors skipped, because it would wreak havoc on all manner of standard-conforming programs that exist today, so the standard really shouldn‚Äôt authorize an elision in that case. The standard probably could make a special case for ‚ÄúNVRO, but somebody used std::move() incorrectly,‚Äù but it‚Äôs easier to just tell people not to do that.
Read less






Jos√© Silva  November 25, 2023


  0  Collapse this comment
Copy link
Raymond, now we now that you are six months ahead. So, maybe you can give us a glimpse about the future? Pleeease. üôÇ





Solomon Ucko  November 25, 2023


  0  Collapse this comment
Copy link
In contrast, except for trivially copiable types (`Copy`), Rust has (trivial) move semantics by default, and requires you to explicitly opt in to copying (`Clone::clone`). It looks like Rust does have a form of NRVO: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_mir_transform/nrvo/struct.RenameReturnPlace.html





Simon Farnsworth  November 28, 2023


  1  Collapse this comment
Copy link
Note, though, that unlike the C++17 and later NRVO, Rust‚Äôs one is entirely optional. In C++17 and later, when a set of conditions are met ‚Äì Prvalue semantics (‚Äúguaranteed copy elision‚Äù) ‚Äì the compiler is required to perform NRVO.
In Rust, NRVO is entirely optional; indeed, the optimization you linked has been disabled due to https://github.com/rust-lang/rust/issues/111005 in rustc versions up to 1.74, and has not been re-enabled in nightly yet, since it was unsound in some circumstances.




Kevin Norris  November 24, 2023


  1  Collapse this comment
Copy link
What I'm getting from this: std::move is a cast. It should be treated with exactly the same suspicion as std::static_cast. Only use it if you can articulate what the cast is formally doing (in particular: Why do you expect the compiler to treat the value differently when it is cast to rvalue reference?), why the use case is not covered by copy elision (which includes, but is not limited to, NVRO), and what will become of the moved-from value (in particular: You should be reasonably confident that the moved-from value is never used again).
Read moreWhat I‚Äôm getting from this: std::move is a cast. It should be treated with exactly the same suspicion as std::static_cast. Only use it if you can articulate what the cast is formally doing (in particular: Why do you expect the compiler to treat the value differently when it is cast to rvalue reference?), why the use case is not covered by copy elision (which includes, but is not limited to, NVRO), and what will become of the moved-from value (in particular: You should be reasonably confident that the moved-from value is never used again).
Read less







Á¥ÖÊ®ìÈçÆ  November 24, 2023
¬∑ Edited

  0  Collapse this comment
Copy link
It gets even spicier when you combine  abuse with  abuse: whereas
<code>
will just needlessly create a reference that will inhibit NRVO,
<code>
will actually create a dangling reference, because C++ will not extend the lifetime of a temporary if there's a function call between it and the local reference you're declaring.
The punchline, though, is that this will again create a valid reference:
<code>
You may already know that  is just implemented as , and yet substituting the former for the latter can introduce a use-after-free!
Finally, I suspect that NRVO too may be restored if you replace...Read moreIt gets even spicier when you combine std::move abuse with auto && abuse: whereas
auto &&name = get_name();
will just needlessly create a reference that will inhibit NRVO,
auto &&name = std::move(get_name());
will actually create a dangling reference, because C++ will not extend the lifetime of a temporary if there‚Äôs a function call between it and the local reference you‚Äôre declaring.
The punchline, though, is that this will again create a valid reference:
auto &&name = static_cast<std::string &&>(get_name());
You may already know that std::move is just implemented as static_cast<T &&>, and yet substituting the former for the latter can introduce a use-after-free!
Finally, I suspect that NRVO too may be restored if you replace the std::move in the first example with static_cast<std::string &&>; unfortunately godbolt.org effectively can‚Äôt be used on mobile, so I‚Äôll have to try it for myself later.
Read less







Neil Rashbrook  November 25, 2023


  0  Collapse this comment
Copy link
Assuming I did it correctly, you don‚Äôt get the optimisation if you move or cast the value.





Á¥ÖÊ®ìÈçÆ  November 25, 2023
¬∑ Edited

  0  Collapse this comment
Copy link
z/qhhj18rKT
Interestingly it seems like MSVC can optimize out the move with return static_cast<T &&>(...); but neither GCC nor Clang can. And while both GCC and Clang issue a warning about return std::move(...);, they don‚Äôt for return static_cast<T &&>(...);.
(godbolt.org can‚Äôt execute MSVC‚Äôs output, but you can see it in the disassembly.)



skSdnW  November 24, 2023


  0  Collapse this comment
Copy link
CppCon 2018: Arthur O‚ÄôDwyer ‚ÄúReturn Value Optimization: Harder Than It Looks‚Äù
Offtopic: Raymond‚Äôs full interview with Dave drops on YouTube tomorrow‚Ä¶