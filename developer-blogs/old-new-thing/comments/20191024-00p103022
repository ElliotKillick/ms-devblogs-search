Piotr Siódmak  October 24, 2019


  0  Collapse this comment
Copy link
“the state of the process in the dump is the state at the time of the throw”
assuming that exception filters don’t change the state, and assuming only a single thread (?)





MGetz  October 24, 2019


  0  Collapse this comment
Copy link
So it’s fine to use a Lippincott function ( https://devblogs.microsoft.com/cppblog/exception-boundaries/ ) but instead of ending in std::terminate(); they should end in just a plain throw to rethrow the exception ( https://en.cppreference.com/w/cpp/language/throw ). Otherwise this creates a lot of macro boilerplate to copy paste this code at each exception boundary. Moreover the Lippincot function shouldn’t assume about its caller.
Edit: I’m dumb the `throw` isn’t required at the end of a Lippincott function because you’ve already done that in the `try` of the Lippincott, inherently it will already have done that.





Raymond Chen Author
October 24, 2019


  0  Collapse this comment
Copy link
The only way to know for sure is to try it and see what you get, since this is all implementation-defined behavior. Replacing the std::terminate(); with a throw; seems to work. You’ll want to put a noexcept on the Lippincott function and temporarily disable the “exception thrown from noexcept function” warning.