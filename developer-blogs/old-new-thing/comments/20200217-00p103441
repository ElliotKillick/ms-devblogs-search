Joe Beans  February 19, 2020


  0  Collapse this comment
Copy link
You don't really run into this with async methods because framework "sleep" methods typically destroy the internal timer automatically after a single use. Nobody cares whether it's efficient or not because it composes better even for recurring timer ticks.
I wrote a double-buffered graph control in the Win2K days that auto-scrolled to any new point placed beyond the limit of the graph. If any frame took more than N amount of time, I branched off into non-buffering code and let the user deal with fast-drawing flicker instead of pauses.
WPF is still an unoptimized beast; you can very easily end up in...Read moreYou don’t really run into this with async methods because framework “sleep” methods typically destroy the internal timer automatically after a single use. Nobody cares whether it’s efficient or not because it composes better even for recurring timer ticks.
I wrote a double-buffered graph control in the Win2K days that auto-scrolled to any new point placed beyond the limit of the graph. If any frame took more than N amount of time, I branched off into non-buffering code and let the user deal with fast-drawing flicker instead of pauses.
WPF is still an unoptimized beast; you can very easily end up in situations where a periodic ListCollectionView sort takes more than half a second.
Read less







Neil Rashbrook  February 18, 2020


  0  Collapse this comment
Copy link
How does a BitBlt and an InvalidateRect take up half a second?





Raymond Chen Author
February 18, 2020


  0  Collapse this comment
Copy link
There was complex layout going on, and the layout took more than 1/2 second. (The region that scrolled into view needs to be painted for the first time, so you also have to generate the bitmap to BitBlt *from*.)





Brian MacKay  February 18, 2020


  0  Collapse this comment
Copy link
Note that Raymond mentioned that it was “in the early days”.  Folks at Microsoft use software that is very far from being ready to show to anyone else.  “Early Days” software often has “interesting” glitches





Alex Martin  February 18, 2020


  0  Collapse this comment
Copy link
I think it’s an animated gradual scroll where the animation takes half a second.




cheong00  February 17, 2020


  0  Collapse this comment
Copy link
This happens a lot on web world, when you have a grid that contain more than a few hundred items to load but don’t want paging for some reason (say, some auto-select feature for items that should select together but may fall between pages), when something like “infinite scroll” haven’t invented.





Richard Russell  February 17, 2020


  0  Collapse this comment
Copy link
Faced with this scenario I will usually code my callback routine to detect a re-entrant call and return immediately in that case.