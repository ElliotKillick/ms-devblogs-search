Kalle Niemitalo  January 26, 2024


  0  Collapse this comment
Copy link
Does m_cleanupStarted need to be atomic at all?  If there is only one reference remaining, and that reference is private, then other threads shouldn’t be accessing the object anyhow.





Neil Rashbrook  January 26, 2024


  0  Collapse this comment
Copy link
The manual refcounting version doesn’t actually appear to delete the object at all?
If your object doesn’t support weak references then the cleanup flag doesn’t need to be atomic since there can only be one reference left, but I guess that’s an edge case that’s asking for trouble.





Pierre Bisaillon  January 25, 2024


  0  Collapse this comment
Copy link
Should we not reset the m_cleanupStarted atomic ? we might want to call another cleanup if the reference count has been incremented during the cleanup.





Raymond Chen Author
January 25, 2024


  0  Collapse this comment
Copy link
I’m assuming you want to do cleanup only once. In the motivating example, it’s to raise the Closed event, and an object can be closed only once.




紅樓鍮  January 25, 2024
· Edited

  0  Collapse this comment
Copy link
Isn’t C++/WinRT’s final_release extension point perfectly suited for this kind of job?
struct ObjectWithSpecialCleanup :
    implements<ObjectWithSpecialCleanup,
               IWhatever>
{
public:
    static void final_release(std::unique_ptr<ObjectWithSpecialCleanup> unique_self) noexcept
    {
        if (!unique_self->m_cleanupStarted.exchange(
                true, std::memory_order_relaxed)) {
            winrt::com_ptr self{unique_self.release(),
                winrt::take_ownership_from_abi};
            DoCleanup(self.get());
        }
    }

    ⟦ ... ⟧

    std::atomic<bool> m_cleanupStarted;
};
(Edit: Fixed spurious AddRef and potential infinite recursion)





Raymond Chen Author
January 25, 2024


  0  Collapse this comment
Copy link
Once you’ve hit final_release, the object is beyond rescue. Weak references have already been disconnected. You can extend the lifetime of the C++ object by delaying its destruction, but it is not a proper COM object any more.





紅樓鍮  January 25, 2024
· Edited

  0  Collapse this comment
Copy link
That’s kind of lame, I always thought final_release could be used as a general-purpose object recycling mechanism (that can be used to implement e. g. object pooling), even though Kenny Kerr did only ever say “it’s a bespoke async destructor.”
On the other hand, I believe C++/WinRT could technically expose an API for explicitly reallocating and re-attaching a new weakref control block to the object in final_release, but maybe that’s too much to ask for.





Raymond Chen Author
January 26, 2024


  0  Collapse this comment
Copy link
Yeah, the weak reference is the problem. If you use final_release as a way to rescue an object (like we want to do here), then you don’t want weak references disconnected. But if you use final_release as a way to do an organized rundown (which is what people almost always use it for), then you do want weak references disconnected: You don’t want somebody resurrecting your object while you’re running it down! final_release has to pick a side, and it chose the side where over 99% of the customers are.