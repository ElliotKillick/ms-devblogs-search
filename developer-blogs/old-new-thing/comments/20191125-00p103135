Jonathan Potter  November 26, 2019


  0  Collapse this comment
Copy link
Best explanation of apartments I’ve ever read.





Rick Pocklington  November 25, 2019


  0  Collapse this comment
Copy link
This is great. I never quite wrapped my head around apartments, and .NET does a good job of abstracting it away.
I couldn’t understand why objects had to be marshalled to the UI thread — couldn’t the UI thread just access the memory directly? Now it makes sense.





Paul Topping  November 25, 2019


  0  Collapse this comment
Copy link
Good summary! Besides being a clear, short description of COM apartments, it also reminds us why COM can be a big source of bugs. It is hard enough for a programmer to deal with threads when the project contains only their own code. When you have objects that interact over several threads, for most of which you have poor documentation and no source code, bugs will raise their ugly heads.





Vladimir Vissoultchev  November 26, 2019


  0  Collapse this comment
Copy link
Au contraire, STAs abstract syncing so much that for most of the usual multi-threaded scenarios you just call methods across threads with no syncing code at all.
“Objects that interact over several threads” might be a problem in MTA but you have to know what you are doing if STAs are not enough for you “screaming performance” threading code.





Paul Topping  November 26, 2019


  0  Collapse this comment
Copy link
“… you have to know what you are doing …”
You can always say X is not a problem if you know what you’re doing. My point is that with objects interacting with other objects made by unknown programmers working for other companies, we can’t count on them knowing what they are doing yet our code is often at their code’s mercy.



Alex Martin  November 25, 2019


  0  Collapse this comment
Copy link
I am of the extremist fringe opinion that threads are dangerous, evil, and should never be used. There may be more overhead in IPC as opposed to sharing memory between threads, but it’s vastly safer from many classes of serious bugs.





Joe Beans  November 25, 2019


  0  Collapse this comment
Copy link
Alex what programming language do you use? The way C# and .NET team up to handle structured multithreading should be taught as the way to do it for every language because the patterns are simple and solid and all the terrifying boilerplate is finally gone. It's just you and your algorithm now. So much of the Win32 API was so far ahead of its time but I never saw it clearly for 25 years because the C++ nanny committee bothered with every idea but coroutines. Because of the "await" statement everyone is using overlapped I/O now, which to me was...Read moreAlex what programming language do you use? The way C# and .NET team up to handle structured multithreading should be taught as the way to do it for every language because the patterns are simple and solid and all the terrifying boilerplate is finally gone. It’s just you and your algorithm now. So much of the Win32 API was so far ahead of its time but I never saw it clearly for 25 years because the C++ nanny committee bothered with every idea but coroutines. Because of the “await” statement everyone is using overlapped I/O now, which to me was fantasy back then. You can have blocking locks that don’t use any threads. It’s wild but you gotta get your feet wet dude. Take the asyncpill.
Read less







Daniel Sturm  November 28, 2019


  0  Collapse this comment
Copy link
Oh God no. Whatever anyone does don’t take .NET as the gold standard for multi threading.
Asynchronous code is something very, very different to multi threaded code and one should do well to remember that.
But if you really think that .NET has a sane multi threaded standard quick tell me the guarantees given by volatile and whether they differ for different platforms (x86 vs. ARM).





Alex Martin  November 26, 2019


  0  Collapse this comment
Copy link
I am all for async. I just don’t like preemptive/multicore shared-memory threads because of the seemingly unlimited number of bugs that arise the moment they enter the picture. They just aren’t safe, even if they do provide a performance boost.




Warren R  November 25, 2019


  0  Collapse this comment
Copy link
Where I work (it’s certainly a company you’ve heard of; you might even use our products) this sort of laughable naivete wouldn’t make it past the interview stage.
For instance, you couldn’t possibly build a scalable relational or non-relational database product using IPC.  It’s not possible.  You need dozens, perhaps hundreds of threads that have access to precisely the same data at a moment’s notice.  The kind of synchronization work required to ensure each separate process has its own copy of the data updated would result in a massive overhead at the kernel level.





Alex Martin  November 26, 2019


  0  Collapse this comment
Copy link
Maybe I should clarify. I’m not against shared memory as a concept. I’m opposed to shared memory by default. Shared memory should have to be explicitly set up with appropriate locking. Modern threading models mostly just throw a bunch of threads in the same address space and hope the programmer is skilled enough to avoid synchronization bugs, which is usually not the case, and make all memory shared. That’s what I consider dangerous.