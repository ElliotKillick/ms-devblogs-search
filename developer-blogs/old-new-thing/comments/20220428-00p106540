Thief  April 29, 2022


  0  Collapse this comment
Copy link
> It uses the pair(T1 const&, T2 const&) constructor.
But… why? Why doesn’t it use the pair(T1&&, T2&&) constructor?





Oleg Derevenetz  April 30, 2022
· Edited

  0  Collapse this comment
Copy link
But… why? Why doesn’t it use the pair(T1&&, T2&&) constructor?
There is no such a constructor in the std::pair. It has this constructor instead: <code>and it participates in the overload resolution if and only if <code> and <code> are both true. And expressions like <code> does not have a type by themselves (and std::is_constructible check just fails with the expression of no type) while expression <code> does have a type.
Read moreBut… why? Why doesn’t it use the pair(T1&&, T2&&) constructor?
There is no such a constructor in the std::pair. It has this constructor instead:
template< class U1, class U2 > pair( U1&& x, U2&& y );
and it participates in the overload resolution if and only if
std::is_constructible_v<T1, U1>
 and
std::is_constructible_v<T2, U2>
 are both true. And expressions like
{ 42, "hello" }
 does not have a type by themselves (and std::is_constructible check just fails with the expression of no type) while expression
T1{ 42, "hello" }
 does have a type.
Read less