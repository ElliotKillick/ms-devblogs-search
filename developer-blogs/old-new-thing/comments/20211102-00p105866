ChDF T  November 2, 2021


  0  Collapse this comment
Copy link
The idea behind using an XOR brush was that you could erase the focus rectangle by drawing it again.
This explains a lot. Back in the days when everyone used GDI+ and liked it, these highlight rectangles would sporadically only get partially removed¹. It never occurred to me, that the application might be relying on the XOR-nature instead of redrawing the entire window (or part of it).
This brings me to the hypothesis, that when this issue occurs the following happens: 1) draw rectangle of size x; 2) internal application state changes, so that the size of the rectangle is...Read moreThe idea behind using an XOR brush was that you could erase the focus rectangle by drawing it again.
This explains a lot. Back in the days when everyone used GDI+ and liked it, these highlight rectangles would sporadically only get partially removed¹. It never occurred to me, that the application might be relying on the XOR-nature instead of redrawing the entire window (or part of it).
This brings me to the hypothesis, that when this issue occurs the following happens: 1) draw rectangle of size x; 2) internal application state changes, so that the size of the rectangle is no longer correctly stored; 3) erase rectangle x by drawing the rectangle “again”, but with incorrect size y -> resulting in partial ghost rectangles (everywhere where x and y did not overlap)
That simple algorithm doesn’t produce results that are quite so pretty any more.
On the other hand, it has some accessibility advantages: the color-inversion is usually² easily discernible no matter the base-image content (a more modern explorer-style blue outline+background can be hard to see on mostly blue base-images). This even works if the user is color-blind, as the color inversion ensures that all color-components change.
¹ If I remember correctly, this problem was more common when the brush was used to draw a selection rectangle (like the “select” tool in Paint).
² There is obviously the edge case where the base-image contains a pattern of inverted colors, which make the resulting dotted line hard to see. Such images are probably rather rare.
Read less







Raymond Chen Author
November 2, 2021


  0  Collapse this comment
Copy link
The color inverse of gray is… gray. Example.





Antonio Rodríguez  November 2, 2021


  0  Collapse this comment
Copy link
You should never use mid values (i.e. 50% gray) as background when information is going to be placed on it. Human vision is far more sensitive to luminance than to chrominance, so the best way to make something readable is either dark text (or pictures) on clear background, or clear text (or pictures) on dark background. This is also why, for example, yellow on white, or navy blue on black, are really hard to read. Using good luminance contrast has the added benefit that it makes the design safe for every kind of color blindness, since you are not relying...Read moreYou should never use mid values (i.e. 50% gray) as background when information is going to be placed on it. Human vision is far more sensitive to luminance than to chrominance, so the best way to make something readable is either dark text (or pictures) on clear background, or clear text (or pictures) on dark background. This is also why, for example, yellow on white, or navy blue on black, are really hard to read. Using good luminance contrast has the added benefit that it makes the design safe for every kind of color blindness, since you are not relying on color to convey information. As a rule of thumb, I reject any design where the difference between background and foreground luminances is less than 60% (which automatically rules out any background in the 40-60% region, including the 50% gray).
Sadly, fashions come and go, and far too frequently graphics designers disregards those basics in the name of the current trend. Like now, when the latest stupid fashion is placing light gray text on white background, which makes it difficult to read for anyone, and almost impossible for people over 50 or with vision problems.
Read less







Joshua Hudson  November 3, 2021


  0  Collapse this comment
Copy link
I agree with you, but Microsoft does not. https://aka.ms/AAeqt41





ChDF T  November 2, 2021
· Edited

  0  Collapse this comment
Copy link
That is a very good point. The 50ish% gray as an edge-case isn’t even all that rare either.
And since the XORing nature – and not just the 2nd-call-reverts-changes-nature – is actually documented, DrawFocusRect can’t even be changed to use some other mapping where ∀c: map(map(c))=c (which would at least enable the graphics designers to choose pairs of colors which look less odd than blue-orange and are more visible than gray-gray).





Neil Rashbrook  November 3, 2021


  0  Collapse this comment
Copy link
Ah, but it can – simply XOR with 50% grey, 0x7F7F7F if you want colour inversion, 0x808080 if you don’t. In at least Windows 95-2000 you also used to be able to do this with the mouse cursor, but of course this was undocumented behaviour and sadly stopped working in Windows XP.





Neil Rashbrook  November 4, 2021


  0  Collapse this comment
Copy link
Actually, 0x7F7F7F doesn’t work on light grey 0xC0C0C0 because it just turns it into 0xBFBFBF so forget that. As for 0x808080, it does at least guarantee exactly 50% contrast on all grey backgrounds, but I can’t remember how it looks like on coloured backgrounds, although I do remember it being dim and so I understand it wouldn’t suit everyone.





Antonio Rodríguez  November 3, 2021


  0  Collapse this comment
Copy link
XORing a 50% grey with white, black or any saturated color gives a 50% grey, which may not have enough contrast. And with a non-saturated color (dark, pastel, grayed, etc.) is even worse: it gives the an opposite color, yes, but with a value (luminance) dangerously near to the original (a purple dotted line on a medium green background, for example). It is a bad idea, specially when you take accessibility into account. See my comment bellow for a more detailed explanation on why this happens.