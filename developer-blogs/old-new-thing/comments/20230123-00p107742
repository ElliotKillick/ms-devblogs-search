紅樓鍮  January 24, 2023
· Edited

  0  Collapse this comment
Copy link
Is it undefined behavior to simply have  destroyed during the execution of a non-static member function, even if that function no longer accesses ?
<code>
If this is not UB, then  shouldn't need ; we can assume  itself is written correctly to not use  (which is our ) after scheduling for  to execute, and we don't need to extend 's lifetime ourselves because we don't access  any more.
Read moreIs it undefined behavior to simply have *this destroyed during the execution of a non-static member function, even if that function no longer accesses *this?

class C {
  ~C();
  int f() {
    this->~C(); // UB or not UB?
    return 42;
  }
};

If this is not UB, then await_suspend shouldn’t need extend_lifetime; we can assume Async::Completed itself is written correctly to not use *this (which is our async) after scheduling for handle to execute, and we don’t need to extend async‘s lifetime ourselves because we don’t access async any more.
Read less







sugrob 9000  January 27, 2023


  0  Collapse this comment
Copy link
That aside, calling the destructor from within a non-static member function is, on its own, legal. Of course, this is extremely prone to making subsequent code exhibit UB, such as in this case.





Raymond Chen Author
January 24, 2023


  1  Collapse this comment
Copy link
There is no requirement that Async::Completed avoid *this after calling the handler. In fact, if the Async is remote, it will definitely access *this, because will have to tear down the channel and proxy.