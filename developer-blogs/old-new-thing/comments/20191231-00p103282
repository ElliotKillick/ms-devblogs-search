Lambda Goblin  December 31, 2019


  0  Collapse this comment
Copy link
Just curious, what do you think about these electron apps that install to the user’s home folder with no other protection?  Some people feel the OS protection of the user’s home folder is enough, while others think not requiring an elevation prompt to replace parts (or the entirety) of an installed application is risky.





Alex Martin  January 2, 2020


  0  Collapse this comment
Copy link
Note: Microsoft is currently distributing two of these programs, namely Visual Studio Code and Microsoft Teams. (Teams just mysteriously uninstalled itself from my machine so I can’t verify for sure that it still does this, but I remember that it did at one point.)





Stefan Kanthak  January 7, 2020


  0  Collapse this comment
Copy link
You forgot OneDrive, for example.
JFTR: Teams is a security nightmare, you should be glad that this crap is gone!





Alex Martin  January 7, 2020


  0  Collapse this comment
Copy link
Everything here is on Teams. I use it through my Web browser.




Raymond Chen Author
January 2, 2020


  0  Collapse this comment
Copy link
You have to determine who the attacker is, who the victim is, and what the attacker has gained. The victim is presumably the user running the application. Who is attacking a user’s home directory? What do they gain?





aidtopia  January 2, 2020


  0  Collapse this comment
Copy link
You also have to determine who the victim is.
If I can compromise user accounts, there are easier ways to attack those users than planting a DLL.  But if my goal is to attack the reputation of some other app, FOO, then by planting a DLL that FOO is going to load could be simple and effective.
Sure, security researchers will figure out that FOO was the victim rather than the cause, but by then the reputational damage is done.  The initial round of media will point out that FOO could have prevented this attack by installing itself to C:\Program...Read moreYou also have to determine who the victim is.
If I can compromise user accounts, there are easier ways to attack those users than planting a DLL.  But if my goal is to attack the reputation of some other app, FOO, then by planting a DLL that FOO is going to load could be simple and effective.
Sure, security researchers will figure out that FOO was the victim rather than the cause, but by then the reputational damage is done.  The initial round of media will point out that FOO could have prevented this attack by installing itself to C:\Program Files\FOO rather than C:\User\Me\AppData\Local\FOO.  No matter how many articles get published later marking me as the evil doer, people will remember that using FOO is what made them vulnerable.
Read less







Raymond Chen Author
January 2, 2020


  0  Collapse this comment
Copy link
You don’t need to plant DLLs to attack FOO’s reputation. You can use a cheat engine-like program to patch arbitrary bytes in the FOO program, or just inject a DLL at runtime.





Stefan Kanthak  January 7, 2020


  0  Collapse this comment
Copy link
In order to inject a DLL at runtime, an attacker needs a (permanently) running program which performs the injection. Such (background) programs can be spotted during a casual inspection.
In order to patch arbitrary bytes in an existing program/file, an attacker must also be able to run some program. The modification can be detected (for example due to a now invalid authenticode signature), repaired/rolled back (if the application is installed via MSI or APPX package), or FOO can be replaced by an update.
An additional DLL is a little bit harder to detect and thus stealthier, and will more likely...Read moreIn order to inject a DLL at runtime, an attacker needs a (permanently) running program which performs the injection. Such (background) programs can be spotted during a casual inspection.
In order to patch arbitrary bytes in an existing program/file, an attacker must also be able to run some program. The modification can be detected (for example due to a now invalid authenticode signature), repaired/rolled back (if the application is installed via MSI or APPX package), or FOO can be replaced by an update.
An additional DLL is a little bit harder to detect and thus stealthier, and will more likely survive any updates of FOO.
Read less







Alex Martin  January 2, 2020


  0  Collapse this comment
Copy link
Perhaps an attacker with a temporary compromise of the user account using it to get persistence? There are easier ways, but maybe they’re shooting for stealth?




Georg Rottensteiner  December 31, 2019


  0  Collapse this comment
Copy link
Oh yeah, that would be of interest to me too. Not only electron programs, but also other programs, that run under the user’s home folder to avoid elevation. Don’t they simply undermine a safety measure just by trying to avoid the elevation prompt?




Henke37  December 31, 2019


  0  Collapse this comment
Copy link
I get the feeling that someone have had to deal with one questionable report too many.





skSdnW  December 31, 2019


  0  Collapse this comment
Copy link
While technically a app dir plant, I feel like installers need their own category.
Installers often end up in the Downloads folder with who knows what. Before the "force loading from system32" API was added it was extremely hard to prevent Windows itself from calling LoadLibrary without a path behind your back, even CreateWindow and simple functions in shell32 will do it.
I wish Microsoft could add a manifest entry that forces system32 to be first on the dll search path. Another mitigating factor would be for the system dlls that use delay loading to use the full path when loading...Read moreWhile technically a app dir plant, I feel like installers need their own category.
Installers often end up in the Downloads folder with who knows what. Before the “force loading from system32” API was added it was extremely hard to prevent Windows itself from calling LoadLibrary without a path behind your back, even CreateWindow and simple functions in shell32 will do it.
I wish Microsoft could add a manifest entry that forces system32 to be first on the dll search path. Another mitigating factor would be for the system dlls that use delay loading to use the full path when loading their dlls.
Read less







‪ ‪  January 2, 2020


  0  Collapse this comment
Copy link
/DEPENDENTLOADFLAG is what you want.
https://docs.microsoft.com/en-us/cpp/build/reference/dependentloadflag
@Stefan Kanthak
You wrote info is wrong.
/DEPENDENTLOADFLAG does apply load-time linking.
https://pastebin.com/cES2JESB





Stefan Kanthak  January 7, 2020


  0  Collapse this comment
Copy link
/DEPENDENTLOADFLAG is not sufficient: it applies only to runtime linking performed with LoadLibrary(). It does neither apply to runtime linking performed with LoadLibraryEx() nor load-time linking.
The same goes for SetDefaultDllDirectories().
All 3 can but mitigated per manifest: <file name=… loadFrom=”fully-qualified path”>
And besides of this limitation, it fails to work as advertised/documented!




Piotr Siódmak  December 31, 2019


  0  Collapse this comment
Copy link
https://support.microsoft.com/en-us/help/2389418/secure-loading-of-libraries-to-prevent-dll-preloading-attacks
is this what you’re looking for?





skSdnW  January 1, 2020


  0  Collapse this comment
Copy link
No, I said manifest so that it is applied before any code runs. SetDefaultDllDirectories is the API I was referring to.



Alex Martin  December 31, 2019


  0  Collapse this comment
Copy link
“This house is badly designed. If the owner doesn’t lock their door, I can just walk in.”
“Isn’t it the owner’s responsibility to lock their door?”
“No, this is bad design.”
NOTABUG WONTFIX
*incoherent rage*





cheong00  January 1, 2020


  0  Collapse this comment
Copy link
Or you can do heavy re-engineering and replace the door with something that will automatically locked, and be unlocked with Bluetooth key held by house owner.
“This house is badly designed. If the owner leaves the key near the door (under the carpet), I can just walk in.”
And here it goes…