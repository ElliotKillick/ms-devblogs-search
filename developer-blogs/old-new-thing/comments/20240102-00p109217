Neil Rashbrook  January 3, 2024


  0  Collapse this comment
Copy link
I searched for Call Flow Guard and got articles on Control Flow Guard. Did it get renamed?





Raymond Chen Author
January 3, 2024


  0  Collapse this comment
Copy link
No, I just misremembered what CFG stood for.




Josiah Bills  January 2, 2024


  0  Collapse this comment
Copy link
It doesn’t seem relevant in this case, but a term I have heard from security people a lot is defense-in-depth. The idea, as I understand it, is to put defenses in on the other side of the airtight hatchway to make it harder for attackers who have gotten their to do their thing. Have you ever run into an “other-side-of-the-airtight-hatchway” vulnerability that was patched on the basis of this principle?





Simon Farnsworth  January 4, 2024


  0  Collapse this comment
Copy link
In this context, it's worth fully understanding what makes an "other-side-of-the-airtight-hatchway” vulnerability an "other-side-of-the-airtight-hatchway” vulnerability, and not a different sort of vulnerability.
"Other-side-of-the-airtight-hatchway” vulnerabilities all take the following form:
1. Attacker has permission to do foo.
2. There exists a component bar which cannot do foo unless modified by someone with permission to do foo.
3. The attacker modifies bar to do foo.
4. Claim a vulnerability in bar, since it's not supposed to be able to do foo, and yet an attacker was able to make it do foo.
If the attacker did not have permission to do foo, then there would...Read moreIn this context, it’s worth fully understanding what makes an “other-side-of-the-airtight-hatchway” vulnerability an “other-side-of-the-airtight-hatchway” vulnerability, and not a different sort of vulnerability.
“Other-side-of-the-airtight-hatchway” vulnerabilities all take the following form:
1. Attacker has permission to do foo.
2. There exists a component bar which cannot do foo unless modified by someone with permission to do foo.
3. The attacker modifies bar to do foo.
4. Claim a vulnerability in bar, since it’s not supposed to be able to do foo, and yet an attacker was able to make it do foo.
If the attacker did not have permission to do foo, then there would genuinely be a vulnerability – the attacker should not have been able to modify bar in step 3. But most of the report text is about obfuscating the fact that the attacker already has permission to do whatever it is that they make bar do, as well as permission to modify bar to do whatever it is the attacker wants it to do.
And it’s really hard to come up with any form of “defense-in-depth” that still permits you to do something that you have been granted permission to do, but that stops you from doing it in a convoluted fashion.
Read less







Falcon  January 4, 2024


  1  Collapse this comment
Copy link
Sometimes it’s not even really obfuscated – I remember one about a scripting object that could supposedly be tricked into overwriting some files on a web server.
The first step of the “attack” was to find a web server with a world-writable directory that executes scripts as SYSTEM!




Jamie Anderson  January 2, 2024


  2  Collapse this comment
Copy link
Defense in depth basically means having multiple layers of protection, so that if someone gets through one layer there's another to hinder them. Think of it as adding more walls and locked doors around a secure room.
In this case, `PROCESS_ALL_ACCESS` basically means that you don't have to break through those doors; you have a skeleton key and can just walk right through any door that's thrown at you.
As the Bonus Chatter notes, CFG (making sure that people have to walk down all the right hallways and can't bust through walls) and ASLR (hiding the prize inside one of thousands of...Read moreDefense in depth basically means having multiple layers of protection, so that if someone gets through one layer there’s another to hinder them. Think of it as adding more walls and locked doors around a secure room.
In this case, `PROCESS_ALL_ACCESS` basically means that you don’t have to break through those doors; you have a skeleton key and can just walk right through any door that’s thrown at you.
As the Bonus Chatter notes, CFG (making sure that people have to walk down all the right hallways and can’t bust through walls) and ASLR (hiding the prize inside one of thousands of identical boxes) usually help. The bug submitter chose to disable those protections to give themselves a better chance.
Read less







Raymond Chen Author
January 2, 2024


  2  Collapse this comment
Copy link
There is a lot of defense in depth: Stack canaries, ASLR, CFG, pointer authentication… They are secondary defenses that mitigate the impact of a vulnerability, but the underlying vulnerability still is addressed (assuming it is a valid vulnerability).