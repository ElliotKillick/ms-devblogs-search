Henke37  November 15, 2020


  0  Collapse this comment
Copy link
With the introduction of DecodeRemotePointer the point is kinda lost, since most attackers that can get the pointer can also open a handle to the process.
As for where the secret sauce was stored, I actually looked into it a while back. For those curious it’s accessed using an undocumented NtQueryInformationProcess class. Which is very much unsupported. Just use DecodeRemotePointer and you get the mangling for free.





Jan Kraetzschmar  November 16, 2020


  0  Collapse this comment
Copy link
To be fair, according to the documentation EncodeRemotePointer and DecodeRemotePointer have never been part of the public API of a stable Windows 10 release, but still live on their undocumented lives in NTDLL, probably unfazed by this change. Before them, you already could use various means of remote code execution to deobfuscate pointers using DecodePointer in the target process, so this is only a more convenient way to attack yourself.
EncodeRemotePointer already seems to work with a process handle with mere PROCESS_VM_WRITE access rights. But since you can't access another process's memory without going through the kernel, it might as...Read moreTo be fair, according to the documentation EncodeRemotePointer and DecodeRemotePointer have never been part of the public API of a stable Windows 10 release, but still live on their undocumented lives in NTDLL, probably unfazed by this change. Before them, you already could use various means of remote code execution to deobfuscate pointers using DecodePointer in the target process, so this is only a more convenient way to attack yourself.
EncodeRemotePointer already seems to work with a process handle with mere PROCESS_VM_WRITE access rights. But since you can’t access another process’s memory without going through the kernel, it might as well keep providing the secret sauce in this case.
Read less