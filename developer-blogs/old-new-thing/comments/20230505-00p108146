Alan Thomas  May 6, 2023


  1  Collapse this comment
Copy link
It shouldn’t be this easy to screw up what looks like bog-standard event handler logic. The fact that Raymond’s investigation uncovered 3 bugs makes me think that the blame doesn’t lie with the developer, but instead with the excessive complexity of the system. Whether it’s WinRT or the C++ language itself which is at fault… I’m not sure.





a b  May 10, 2023


  0  Collapse this comment
Copy link
I agree.
One of the problems here is requirement for explicit lifetime reference object that should always be there but is not enforced effectively making it a footgun that automatically shoots at you whenever you slip up.
Personally I prefer the solution that Qt framework uses. It has asynchronous signals&slots callback mechanism instead of coroutines but I think it is still applicable because coroutines are just a syntactic sugar. When you register an event handler (a slot) you pass "context" parameters both for object that sends the event and for object that owns the event handler (the may be the same of...Read moreI agree.
One of the problems here is requirement for explicit lifetime reference object that should always be there but is not enforced effectively making it a footgun that automatically shoots at you whenever you slip up.
Personally I prefer the solution that Qt framework uses. It has asynchronous signals&slots callback mechanism instead of coroutines but I think it is still applicable because coroutines are just a syntactic sugar. When you register an event handler (a slot) you pass “context” parameters both for object that sends the event and for object that owns the event handler (the may be the same of different). When any of them is destroyed, the connection between event and handler is destroyed too and thus event handler is never called with invalid this pointer.
Additionally it also inverts the lifetime dependency. With winrt approach, the UI Widget will live as long as asynchronous operation is not completed. This is not desirable – if user closes a window I no longer care about any asynchronous operations that update its UI (of course sometimes you need them to run but there are ways around this). With Qt the Widget is destroyed immediately (unfortunately you still need to cancel operation itself explicitly, only handler is unregistered automatically. Bit at least Widget is not “leaked”).
Read less







Raymond Chen Author
May 10, 2023


  0  Collapse this comment
Copy link
The Qt approach does require additional planning, because you have to worry about the case where your callback never runs. If that callback is expected to clean up resources or unwind state, you’ll have to do that cleanup/unwinding when you destroy the context. You could do the same thing in a coroutine, but nobody wants to because it’s a big hassle. (Basically, drop your strong reference to a weak reference before awaiting, then try to promote it back after resuming.)