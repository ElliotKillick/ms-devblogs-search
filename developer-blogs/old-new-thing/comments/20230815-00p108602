Alessandro Morelli  August 18, 2023
· Edited

  0  Collapse this comment
Copy link
For common use cases this is typically less of a concern, but there are other performance implications to using std::make_shared. By allocating the control block in memory right before the object S, members of S might get “pushed” to another cache line. This might introduce a measurable performance drawback in the application.





Chris Leonard  August 16, 2023


  0  Collapse this comment
Copy link
So std::make_shared is really only appropriate with small classes and classes that point to their content, like std::vector? News to me, I thought it was good practice to use it everywhere!





Raymond Chen Author
August 16, 2023


  0  Collapse this comment
Copy link
My third-to-last paragraph says the opposite! If you like the improved locality, and your weak pointers don’t outlive your strong pointers for long enough that the extra memory usage is concerning, then go ahead and reap the locality gains of the combined allocation.





Chris Leonard  August 17, 2023


  0  Collapse this comment
Copy link
"[if] your weak pointers don’t outlive your strong pointers for long enough that the extra memory usage is concerning"
But if I wasn't concerned, and I'm using a fat class, I wouldn't be using weak_ptr ... except in situations where it's necessary to break an ownership cycle in a graph as you said. That's the only situation I can think of where I'm not concerned. So appropriate with small classes... or when using weak_ptr to break the ownership cycle.
I think the gist of my statement is that it's surprising that std::make_shared has this caveat, given its intended use. But it's certainly...Read more“[if] your weak pointers don’t outlive your strong pointers for long enough that the extra memory usage is concerning”
But if I wasn’t concerned, and I’m using a fat class, I wouldn’t be using weak_ptr … except in situations where it’s necessary to break an ownership cycle in a graph as you said. That’s the only situation I can think of where I’m not concerned. So appropriate with small classes… or when using weak_ptr to break the ownership cycle.
I think the gist of my statement is that it’s surprising that std::make_shared has this caveat, given its intended use. But it’s certainly *sometimes* a valid optimisation.
Read less







Raymond Chen Author
August 17, 2023


  0  Collapse this comment
Copy link
There are other scenarios beyond “breaking cycles” where you have weak pointers that will not outlive the main object by long, so “except for cycle-breaking” may be too strict.





Yuri Khan  August 17, 2023


  0  Collapse this comment
Copy link
Not the first time that the standard library “forces” a not-always-valid optimization on you. Another is std::vector<bool>.





Axel Rietschin  August 16, 2023


  0  Collapse this comment
Copy link
It’s not only locality, but less overhead (heap memory block header of some sort for each allocation) and ultimately less heap fragmentation.