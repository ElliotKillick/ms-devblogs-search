Farid Mehrabi  May 22, 2022


  0  Collapse this comment
Copy link
`std::sort` and `std::ranges::sort` both use boolean predicates and that means equivalence can only be assured via two calls to the perdicate. The later however, provides an extra projection argument that can accept a key converting function object.





Phil Deets  May 20, 2022
· Edited

  0  Collapse this comment
Copy link
Regarding the "Bonus bonus chatter", in a recent VS update (when using /permissive-), you now need to do this:
<code>
This is because the descending_field class itself is a template; so descending_compare is a dependent name. This means you need use the injected class name of the derived class to access the injected class name of the base class. See the accepted answer at https://stackoverflow.com/questions/39413091/call-base-class-constructor-without-naming-its-class for more info.
Read moreRegarding the “Bonus bonus chatter”, in a recent VS update (when using /permissive-), you now need to do this:
template<typename T>
struct descending_field :
    dscending_compare<std::reference_wrapper<T const>>
{
    descending_field(T const& f) :
            descending_field::descending_compare(std::ref(f)) {}
};
This is because the descending_field class itself is a template; so descending_compare is a dependent name. This means you need use the injected class name of the derived class to access the injected class name of the base class. See the accepted answer at https://stackoverflow.com/questions/39413091/call-base-class-constructor-without-naming-its-class for more info.
Read less







紅樓鍮  May 20, 2022


  0  Collapse this comment
Copy link
Wouldn’t a more natural approach be to flip the result of the three-way comparison?
weak_ordering inverse(weak_ordering o) {
  switch (o) {
    case less: return greater;
    case equivalent: return equivalent;
    case greater: return less;
  }
}

// ...
if (cmp == 0)
  cmp = inverse(compare_weak_order_fallback(
    a.GetConnector(),
    b.GetConnector()));





Zenju Z  May 20, 2022
· Edited

  0  Collapse this comment
Copy link
> I think it has to do with how I declared the spaceship operator.
Okay here’s my attempt at “my psychic powers tell me (TM)”: (haven’t tried it, just a guess)
std::three_way_comparable requires __WeaklyEqualityComparableWith, and you didn’t declare operator==, and you also didn’t get it for free, because operator<=> isn’t “= default”.