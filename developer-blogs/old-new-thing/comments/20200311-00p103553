Pierre Baillargeon  March 11, 2020


  0  Collapse this comment
Copy link
For the stated reason about the future behavior of sizeof() being out of your control, but mostly because being explicit and naming clearly your intentions help future maintainer keep their sanity and not have to double-guess what the code was supposed to do, I find the always_false trick much more sane.
PS: as for the c++ std dependent_false vs dependent_bool_value... why not all three? (That is, add dependent_true.) One is for flexibility when the true/flase is actually the result of another constexpr, the two others is to make code clean and concise. You're making a language standard, make it so that...Read moreFor the stated reason about the future behavior of sizeof() being out of your control, but mostly because being explicit and naming clearly your intentions help future maintainer keep their sanity and not have to double-guess what the code was supposed to do, I find the always_false trick much more sane.
PS: as for the c++ std dependent_false vs dependent_bool_value… why not all three? (That is, add dependent_true.) One is for flexibility when the true/flase is actually the result of another constexpr, the two others is to make code clean and concise. You’re making a language standard, make it so that programmer can write lean clear code.
Read less







Ben Voigt  March 12, 2020


  0  Collapse this comment
Copy link
Sure, but if the intent is solely to use it in static_assert, we can come up with much better names than always_false.  For example, unsuitable