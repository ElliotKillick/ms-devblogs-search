Ivan Kljajic  July 10, 2024


  0  Collapse this comment
Copy link
They should have a 1/0 version of it that creates but excepts if you touch it.





LB  July 9, 2024


  1  Collapse this comment
Copy link
Thanks for linking the Regular Void document, I was curious what the latest update on it was. Here’s hoping they can find some way to bring it to reality in C++.





Mark Magagna  July 9, 2024


  0  Collapse this comment
Copy link
Sounds a lot like the Null Object pattern, where instead of using “null” for something that isn’t there, you construct an object that gives reasonable responses like “I don’t know”. And can do logging etc.
Which is what null was originally supposed to represent.





Kevin Norris  July 11, 2024


  1  Collapse this comment
Copy link
The null object is just an option type, but without proper type checking. There are times when it's good enough (it is almost always better than a raw null or nil reference, in languages that allow them), and there are times when "I don't know" or "do nothing" is not a suitable behavior (technically: there are times when a null object is not Liskov-substitutable for a non-null object, usually because the non-null object provides one or more methods that require non-null behavior to fulfill their postconditions - if a method returns bool, you can't return anything resembling "I don't know,"...Read moreThe null object is just an option type, but without proper type checking. There are times when it’s good enough (it is almost always better than a raw null or nil reference, in languages that allow them), and there are times when “I don’t know” or “do nothing” is not a suitable behavior (technically: there are times when a null object is not Liskov-substitutable for a non-null object, usually because the non-null object provides one or more methods that require non-null behavior to fulfill their postconditions – if a method returns bool, you can’t return anything resembling “I don’t know,” because an if statement doesn’t know what to do with “I don’t know”).
std::monostate is different. It is a null type, not (just) a null object. That is, you cannot pass std::monostate wherever some random other object is required – it has to appear in the type signature. Which, again, sounds useless, but as Raymond has already explained, it can be used to make a “hole” in a generic data type. Rust does this all the time with wrappers like Result and Option. You can return a Result of Ok(()) on the happy path (that’s an Ok containing a () or “unit” object, which is equivalent to std::monostate), and Err(some error) on the sad path.
Read less






Neil Rashbrook  July 9, 2024


  1  Collapse this comment
Copy link
I keep hoping reading this blog will make me smarter but it doesn’t seem to be working…