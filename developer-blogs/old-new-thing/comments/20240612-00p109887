LB  June 13, 2024
¬∑ Edited

  0  Collapse this comment
Copy link
The ‚Äúfixed‚Äù move assignment operator now leaks by abandoning the original held state and overwriting it with the incoming state. Funny enough this same bug is in MSVC‚Äôs std::experimental::generator, so it seems to be a common mistake to make. Using std::swap instead was originally correct, it just wasn‚Äôt being passed the correct parameters. EDIT: Seems to have been updated to properly use std::swap now, yay üôÇ





James Burgess  June 14, 2024


  0  Collapse this comment
Copy link
Confused (as of Jun 14 11pm PST) TlsUsage::operator=() calls std::move, and it looks correct. Were there two updates?





LB  June 14, 2024


  1  Collapse this comment
Copy link
Seems it was again updated after my comment, when I wrote my comment the move assignment operator had the same implementation as the move constructor, using std::exchange. It is now correctly using std::swap.





Á¥ÖÊ®ìÈçÆ  June 14, 2024


  0  Collapse this comment
Copy link
The move assignment operator in the fixed code doesn‚Äôt seem wrong to me, it‚Äôs using std::swap correctly this time, and it doesn‚Äôt call std::move. I suspect both of you confused the move assignment operator with the move constructor.



Á¥ÖÊ®ìÈçÆ  June 12, 2024
¬∑ Edited

  0  Collapse this comment
Copy link
Rant: To those who read the comment section, I highly recommend wrapping a  with a custom deleter instead of hand-rolling your own RAII type. Correctly implementing all the methods an RAII type needs is very verbose and error-prone.
Edit: The incorrect code below was in the article before it was edited, but I didn't expect it to stir up this much confusion among commenters. Please do not follow up with more off-topic comments. (Please, DevBlogs, support more HTML tags...)
As an example, if your move assignment operator is
<code>
it actually results in an infinite recursion, because  is implemented in...Read moreRant: To those who read the comment section, I highly recommend wrapping a std::unique_ptr with a custom deleter instead of hand-rolling your own RAII type. Correctly implementing all the methods an RAII type needs is very verbose and error-prone.
Edit: The incorrect code below was in the article before it was edited, but I didn‚Äôt expect it to stir up this much confusion among commenters. Please do not follow up with more off-topic comments. (Please, DevBlogs, support more HTML tags‚Ä¶)

As an example, if your move assignment operator is
TlsUsage& operator=(TlsUsage&& other) {
    std::swap(*this, other);
}
it actually results in an infinite recursion, because std::swap is implemented in terms of the move assignment operator. (It‚Äôs also not noexcept, which mostly defeats the purpose of having a move assignment operator at all.)

Read less







Joshua Hudson  June 13, 2024


  0  Collapse this comment
Copy link
My normal implementation of such methods looks like this: `void operator=(TlsUsage& other);`
Thus trying to call it is a link time error; which is fine because it should never be called.
It gets its standard constructor, its copy constructor (which is implemented as move), its destructor, and its link error assignment operator and nothing else. And half the time the copy constructor can be a link error copy constructor too.