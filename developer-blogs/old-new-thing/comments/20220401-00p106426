Dwayne Robinson  April 1, 2022


  0  Collapse this comment
Copy link
C++23’s deducing this should greatly simplify these cases for me (obviating std::invoke for my uses anyway) as I can now consistently call either a static function taking a class/struct or a semistatic method on a class/struct via the same function pointer. Been playing with it already in VS2022 Preview 2.





紅樓鍮  April 1, 2022


  0  Collapse this comment
Copy link
I don't quite see the point of .  The only 2 cases where it extends the usual function call syntax are non-static member functions and variables; it may be useful for  to support member functions (using a lambda to wrap the member function would require variadic templates and perfect forwarding, which is verbose), but supporting member variables is just confusing; I just can't conceive anyone who would find this feature useful.
And even then,  completely covers the member function use case, in a more readable way (being obviously analogous to a wrapper lambda) and requiring no additional concepts.
Read moreI don’t quite see the point of std::invoke.  The only 2 cases where it extends the usual function call syntax are non-static member functions and variables; it may be useful for std::invoke to support member functions (using a lambda to wrap the member function would require variadic templates and perfect forwarding, which is verbose), but supporting member variables is just confusing; I just can’t conceive anyone who would find this feature useful.
And even then, std::mem_fn completely covers the member function use case, in a more readable way (being obviously analogous to a wrapper lambda) and requiring no additional concepts.
Read less







Mike Winterberg  April 5, 2022


  0  Collapse this comment
Copy link
Raymond's teasing a bit because of April Fool's, but invoke is meant to lessen the need for callers to use things like mem_fn. For instance, the ranges algorithms use invoke extensively, so using simple member based selections for projections need less syntax noise than they do with the classic algorithms.
https://gcc.godbolt.org/z/WeY594Ma5
Also note that even the "classic" callable wrappers like mem_fn, bind, and function support pointers to member data as a callable.
https://gcc.godbolt.org/z/ndh4Eo9Mv
Which makes sense since member data access is just syntactic sugar for a function.
Read moreRaymond’s teasing a bit because of April Fool’s, but invoke is meant to lessen the need for callers to use things like mem_fn. For instance, the ranges algorithms use invoke extensively, so using simple member based selections for projections need less syntax noise than they do with the classic algorithms.
https://gcc.godbolt.org/z/WeY594Ma5
Also note that even the “classic” callable wrappers like mem_fn, bind, and function support pointers to member data as a callable.
https://gcc.godbolt.org/z/ndh4Eo9Mv
Which makes sense since member data access is just syntactic sugar for a function.
Read less