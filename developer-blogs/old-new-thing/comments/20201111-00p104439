Neil Rashbrook  November 14, 2020


  0  Collapse this comment
Copy link
The mutex is irrelevant here; I’ve seen an example where object A releases a reference to object B, which causes code to run which tries to mutate object A, which is in an inconsistent state because it’s in the middle of releasing its reference to object B. It’s particularly fun when it tries to release its reference to object B again…
The solution is to transfer the reference to a temporary, so that by the time the reference is released, object A is in a consistent state again.





Nathan Williams  November 11, 2020


  0  Collapse this comment
Copy link
This is probably only a solution for the specific example and not the general problem, but one thing you could do is this:
void RemoveThingById(int32_t id)
{
  std::shared_ptr removed_thing;
  {
    std::lock_guard guard(things_lock_);
    auto it = std::find_if(things_.begin(), things_.end(), ...);
    if (it != things_.end()) {
      removed_thing = *it;
      things_.erase(it);
    }
  }
}
Making a local copy of the shared_ptr before erasing it postpones the destructor call.





Joshua Hudson  November 11, 2020


  0  Collapse this comment
Copy link
I can has recursive mutex?
This is a perfectly serious comment. I’m accustomed to recursive mutexes being the natural solution to this.





Gwen Roelants  November 12, 2020


  0  Collapse this comment
Copy link
Recursive mutexes actually have similar problems. While holding the lock you typically also assume some pre- and post-conditions, but if in the middle of such a function you call another function that requires the lock those conditions may not be met.
You might also have an iterator for example, that is invalidated when the function you call also modifies the same vector.
Finally when you have more than one mutex in your program recursive mutexes make it easier to get caught in a situation where you did not expect to hold both, the order in which they are acquired is wrong and...Read moreRecursive mutexes actually have similar problems. While holding the lock you typically also assume some pre- and post-conditions, but if in the middle of such a function you call another function that requires the lock those conditions may not be met.
You might also have an iterator for example, that is invalidated when the function you call also modifies the same vector.
Finally when you have more than one mutex in your program recursive mutexes make it easier to get caught in a situation where you did not expect to hold both, the order in which they are acquired is wrong and you get a deadlock in another thread trying to enter the mutex while already holding another one.
Read less






Adam Rosenfield  November 11, 2020


  0  Collapse this comment
Copy link
Yup, I’ve run into this very problem many times of “Thing tries to remove itself from the list of Things managed by the ThingManager in its destructor”.  IIRC I don’t think I’ve hit this specific issue of deadlock when trying to lock a mutex, but I’ve definitely run into other sorts of reentrancy problems.  Care is very much needed here.
(I won’t spoil the answer and steal Raymond’s thunder from tomorrow.)





R. Samuel Klatchko  November 11, 2020


  0  Collapse this comment
Copy link
Minor issue, in
test()
 I believed you meant to write
auto s = std::make_shared(manager);