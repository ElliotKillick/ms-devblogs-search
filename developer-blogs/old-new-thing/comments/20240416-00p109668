Markus G. Kuhn  April 17, 2024
· Edited

  1  Collapse this comment
Copy link
There were once operating systems, specifically written for government customers, that did control where classified confidential information goes. “Trusted Solaris” was an example, as was the “Compartmented Mode Workstation”. These were Unix derivatives with added “mandatory access control” mechanisms for “labeled multi-level security”. There was an “Orange Book Class B” standard defining this functionality, based on the Bell-LaPadula access-control model. You could label an information object as e.g. “TOP SECRET” and then any process, file or communications channel that received that data would also be labelled “TOP SECRET”, and the mandatory access-control rules would then deny communication with external entities...Read moreThere were once operating systems, specifically written for government customers, that did control where classified confidential information goes. “Trusted Solaris” was an example, as was the “Compartmented Mode Workstation”. These were Unix derivatives with added “mandatory access control” mechanisms for “labeled multi-level security”. There was an “Orange Book Class B” standard defining this functionality, based on the Bell-LaPadula access-control model. You could label an information object as e.g. “TOP SECRET” and then any process, file or communications channel that received that data would also be labelled “TOP SECRET”, and the mandatory access-control rules would then deny communication with external entities that had a lower security level. Some of that 1980s mechanics later also found its way into Linux, via the NSA’s SELinux project. But such systems were generally not very user-friendly, and required a lot of care and experience to get things done, as there were frequent “computer says no” events preventing harmless data transfers. As a result, multi-level secure operating systems never found any mainstream use outside experimentation in intelligence agencies. But aspects of such past systems do get re-invented every now and then.
Read less







紅樓鍮  April 17, 2024


  0  Collapse this comment
Copy link
Nitpick: The program listed in the last article you link to is actually not guaranteed to consume 100% CPU (at least until P2809) because empty infinite loops in C++ are undefined behavior, meaning the compiler is allowed to optimize the loop away!