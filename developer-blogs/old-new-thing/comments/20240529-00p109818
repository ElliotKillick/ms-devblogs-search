BCS  May 31, 2024


  0  Collapse this comment
Copy link
Any build system or IDE that doesn’t natively understand transitive dependence and (at least by default) propagate them isn’t a very good tool. That might have been acceptable back in the days of make (which is little more than a glorified shell script), but there are multiple off-the-shelf options that make this problem almost impossible to provoke.





LB  June 1, 2024


  0  Collapse this comment
Copy link
The default in Visual Studio is still to provoke this behavior, and as the previous commenter explained there’s a setting you have to change away from its default to get the more intuitive behavior.




Tom Lint  May 31, 2024


  2  Collapse this comment
Copy link
Isn’t there an option “link library dependencies” or something, to have the build system automatically do this without having to modify anything else? I remember only having to set this option once, I believe as part of the project reference, and never having to care about adding additional dependencies to the library project down the road.





紅樓鍮  May 29, 2024


  1  Collapse this comment
Copy link
Usually this should be something a build system handles for you, and CMake correctly handles static libraries that link to dynamic libraries.





Mason Boswell  May 29, 2024


  1  Collapse this comment
Copy link
Although a nice library that’s going to have hidden dependencies might save its users some time by sending a hint to the linker via #pragma comment( lib, “dependency.lib” ), as Microsoft does with many of its frameworks (MFC, for example).