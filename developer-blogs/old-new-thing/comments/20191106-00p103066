Farid Mehrabi  November 7, 2019


  0  Collapse this comment
Copy link
C++17 allows you to use std::variant:
std::variant experiment::get_entity(){
    //blah blah
    return widget{};
    //blah blah
    return doodad{};
};
experiment ex;
auto res {ex.get_entity()};
if (res.holds_alternative()){
    auto& w{std::get()};
    //use w
};
if (res.holds_alternative()){
    auto& d{std::get()};
    //use d
};





Tim Weis  November 7, 2019


  0  Collapse this comment
Copy link
Indeed, C++17 introduced std::variant. But that only solves part of the problem, namely, the inability to overload on return type only. It does not address the other part: Having the callee return a type the caller expects. Instead, this implementation subscribes to a specific type when calling get_entity(). The comments reading “blah blah” hide a problem for which there is no solution: Dispatching to the concrete type based on expectations of the caller, without any information on the expectations of the caller.




Motti Lanzkron  November 7, 2019


  0  Collapse this comment
Copy link
I asked this very question as a puzzle on stackoverflow eleven years ago (back when stackoverflow allowed this kind of stuff).
As for the problem with auto, it has also been bothering me for years, I suggested to Herb Sutter that C++ add a way for a class to configure the way it's deduced for auto. My idea was to have an operator auto (which you can = delete if you want to prevent the problem presented in this post). Unfortunately this doesn't seem to have gained any traction (and in C++14 the syntax is already legal so something else should...Read moreI asked this very question as a puzzle on stackoverflow eleven years ago (back when stackoverflow allowed this kind of stuff).
As for the problem with auto, it has also been bothering me for years, I suggested to Herb Sutter that C++ add a way for a class to configure the way it’s deduced for auto. My idea was to have an operator auto (which you can = delete if you want to prevent the problem presented in this post). Unfortunately this doesn’t seem to have gained any traction (and in C++14 the syntax is already legal so something else should be used).
Read less







Paul Jackson  November 6, 2019


  0  Collapse this comment
Copy link
I believe that the technique first appeared in the D language, and it’s called Voldemort types: https://wiki.dlang.org/Voldemort_types
Very cool indeed.





GL  November 6, 2019


  0  Collapse this comment
Copy link
From the wiki page, it seems the feature of Voldemort types is that it is anonymous, not that it can respond according to the larger expression of which it is a part.
The method demonstrated in this entry is the well-known temporary proxy idiom. It’s canonically used for simulating C# indexer in C++ operator[] — think of this as a superposition of T& and T const.




Kalle Niemitalo  November 6, 2019


  0  Collapse this comment
Copy link
I thought there was a proposal for a C++ feature that one could use in struct result, to force auto entity = exp.get_entity(); to be eagerly converted to some other type, but I can't find it now. WG21 P0936R0 and P0849R2 are somewhat related, though.
edit: Found P0672R0 immediately after posting the comment, of course.
Read moreI thought there was a proposal for a C++ feature that one could use in struct result, to force auto entity = exp.get_entity(); to be eagerly converted to some other type, but I can’t find it now. WG21 P0936R0 and P0849R2 are somewhat related, though.
edit: Found P0672R0 immediately after posting the comment, of course.
Read less







MNGoldenEagle  November 6, 2019


  0  Collapse this comment
Copy link
That’s actually a really cool trick. I didn’t realize C++ had the ability to overload casting operators (which also sounds terrifying). Now I’m curious how this could be implemented in C# or Kotlin…





GL  November 6, 2019


  0  Collapse this comment
Copy link
The specific case in the blog entry should be resolved using explicit interface implementation in C#.





Kyle Brown  November 6, 2019


  0  Collapse this comment
Copy link
I don’t know about Kotlin but C# also supports overloading casting operators https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/user-defined-conversion-operators





cheong00  November 6, 2019


  0  Collapse this comment
Copy link
It has to, or the object has to provide a lot of .ToWhateverType() methods to simulate conversion between types.