Greg Lolo  May 4, 2023


  2  Collapse this comment
Copy link
What will happen if I don’t end strings with \0? I haven’t found any documentation which says that strings in StringFileInfo need to be explicitly NUL-terminated, only examples that do so. On the other hand, the STRINGTABLE examples do not end strings with \0.





Kevin Puetz  May 8, 2023


  3  Collapse this comment
Copy link
As far as I can tell, VerQueryValue will just return whatever's there in the compiled resource (or unicode/ANSI conversion). Which is fine, VerQueryValue never said it would be null-terminated, and instead includes an `[out] PUINT puLen` returning the length to the caller.
As far as I've ever been able to determine, rc seems to truncate the string itself at the first \0 in your .rc source file, and always writes exactly one (unicode) NULL to the actual compiled resource regardless. I get a byte-for-byte identical .res file whether the .rc source code has VALUE "Name", "..." or "...\0" or "...\0\0\0\0\0"...Read moreAs far as I can tell, VerQueryValue will just return whatever’s there in the compiled resource (or unicode/ANSI conversion). Which is fine, VerQueryValue never said it would be null-terminated, and instead includes an `[out] PUINT puLen` returning the length to the caller.
As far as I’ve ever been able to determine, rc seems to truncate the string itself at the first \0 in your .rc source file, and always writes exactly one (unicode) NULL to the actual compiled resource regardless. I get a byte-for-byte identical .res file whether the .rc source code has VALUE “Name”, “…” or “…\0” or “…\0\0\0\0\0” – all give a .res with one null terminator. It’s like this at least as far back as rc 5.00.1641.1 – Build 1641 (VC98/Visual Studio 6 SP6), 5.2.3690.0 (Visual Studio 2005), and 5.2.3790.0 (Windows SDK Update Feb 2003), which are the only ones I still had old VMs handy to check with.
The ATL project wizard in VC++6.0 did include a trailing “…\0” on each entry in StringFileInfo, but removing it doesn’t change the generated .res file at all. VS2005’s wizard no longer included the \0, it was just VALUE “Name”, “Value”. So whatever this old pattern is scar tissue from (presumably at some point rc did *not* terminate the strings?), it seems to be at least 20 years past being necessary…
Read less






Kuanlan Marswer  May 3, 2023


  2  Collapse this comment
Copy link
In my opinion, Microsoft has been handling version numbers quite terrible. For example, Windows version number has become increasingly confusing. Nowadays, Windows systems no longer use the major and minor parts (frozen at 10.0), and consumers/developers/business need to remember and recognize COMPLEX build and revision numbers. Another example is C++/WinRT version 2.0.230225.1, I don’t understand how its build part is stored in 16bits.
Microsoft should take version numbers seriously, I recommend Semantic Versioning 2.0.0





Me Gusta  May 5, 2023


  0  Collapse this comment
Copy link
Well, as far as how the C++/WinRT build number is stored in 16 bits, to put it simply, it isn’t. If you look at the resource version for cppwinrt.exe, it is 2.0.0.0. But since this is only talking about the executable version resource, aka the file version, this isn’t talking about the version in general.




Jan Ringoš  May 3, 2023


  2  Collapse this comment
Copy link
As Windows have gone wild with increasing build number in the past years, I’ve been curious (as Windows binaries themselves use the very same format): We are already at 25352 (publicly), maximum being 65535… are there any thoughts on what then?
Is everyone betting on virtualization solving that somehow? Virtualizing new OS that won’t employ today’s EXEs/DLLs directly? Or just that it won’t be their problem?





Evgeny Vrublevsky (VEG)  May 10, 2023


  1  Collapse this comment
Copy link
Yeah, I also have the same question in mind. It’s not just version info in files, there is also USHORT OSBuildNumber field in the PEB structure. A compatibility issue is emerging.





Jan Ringoš  May 10, 2023


  0  Collapse this comment
Copy link
I’m not that worried about these ones. It will likely be solved by setting it to fixed value of 0xFFFF meaning “read actual value from some other DWORD.” Also OSVERSIONINFO, OSVERSIONINFOEX and RtlGetNtVersionNumbers all return DWORDs already.
But the binary format of version info resources would need to change very soon, so that third-party tools, that are used regularly, can adapt before build numbers start reaching that value. Still, many of those tools are no longer maintained, so that’ll be interesting.