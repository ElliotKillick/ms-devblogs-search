Jonathan Harston  August 16, 2020


  0  Collapse this comment
Copy link
What strikes me about so many character code pages is that – after the effort made in 7-bit ASCII to ensure there was a logical relationship between upper case and lower case – how little effort was made in any logical relationship between upper case and lower case characters in top-bit-set characters.
Plus, there’s no logic to the ordering of linedraw characters. I grew up with computers where top-bit-set characters had logical upper/lower case, and linedraw characters were CHR$(base+weight1*left+weight2*right+weight3*up+weight4*down).





googolplex3  August 6, 2020


  0  Collapse this comment
Copy link
Did you disassemble this or did you get it from source? I would love to see Windows 1.0 open-sourced, but then again NT probably still has code from it lol





Gareth Poole  August 12, 2020


  0  Collapse this comment
Copy link
If they open sourced Windows 1 and 2 like they did with the early versions of DOS, I would be pretty happy. Of course, if they open sourced Windows 3.x it would be like Christmas morning. Win16 is something I’ve always had a lot of fun with.




Neil Rashbrook  August 4, 2020


  0  Collapse this comment
Copy link
I wonder what the point of allowing char to be signed was, apart from forcing everyone to cast to unsigned char when they wanted to do anything useful with it. I do hope char8_t catches on.





Raymond Chen Author
August 4, 2020


  0  Collapse this comment
Copy link
For some processors, unsigned char is more expensive than signed char. For example, the SuperH-3 has “load 8-bit value with sign extension” but no “load 8-bit value with zero extension”. Loading an 8-bit value with zero extension requires a second instruction to zero out the high-order bits. Those processors are much more efficient if char is signed.





Neil Rashbrook  August 7, 2020


  0  Collapse this comment
Copy link
Ah, so basically it’s only useful for someone who’s not using the 8th bit.



Alexis Ryan  August 3, 2020


  0  Collapse this comment
Copy link
Specifically windows 1 only?
Removed from Windows 2 cause there was a standard library equivalent?





Neil Rashbrook  August 4, 2020


  0  Collapse this comment
Copy link
Removed? Don’t be silly. It has to be exported from all 16-bit kernels (including the one in NTVDM in 32-bit Windows 10) so that all of your Windows 1.0 applications still work.
(The actual fate of the function itself is that is has been since renamed to CharUpper, with a macro to help you port your Windows 1.0 application.)




Flux  August 3, 2020


  0  Collapse this comment
Copy link
Wow. I lost the will to live! Computing must have been very awful in those days.





Waleri Todorov  August 3, 2020


  0  Collapse this comment
Copy link
On the contrary! It was fun!





Flux  August 4, 2020


  0  Collapse this comment
Copy link
For me, it certainly was. I never had any interest in anything other than computing. But for plain users?
At least, back then, the software worked as intended. Right now, I’m commenting on a blog that allows me to mark only my own comment as spam! This is not what I call “the software that works as intended”.



Peter Cooper Jr.  August 3, 2020


  0  Collapse this comment
Copy link
Well, I haven’t tried finding a better citation, but the Wikipedia article on Windows-1252 that you linked says that “The first version of the codepage 1252 used in Microsoft Windows 1.0 did not have positions D7 and F7 defined.” As those are the multiplication and division signs, it might have been perfect sense at the time to not worry about how the uppercase & lowercase functions worked on them.