紅樓鍮  April 18, 2022


  0  Collapse this comment
Copy link
But why does x86-32 exception handling have to work that way?  Especially since x86-64 exception handling is table-based, like all the RISC architectures.





philiplu  April 18, 2022
· Edited

  0  Collapse this comment
Copy link
Table-based exception-handling metadata requires function prologue/epilogue sequences to have constrained forms that can be described by that metadata.  When NT was first designed for x86-32, there was a lot of existing asm code that people wanted to easily port over to NT, and that ported code included pretty much every weird function entry/exit sequence you could think of (and lots more that you wouldn't imagine anyone would ever think of).  Switching to table-based metadata would have required modifying all that code, making porting more difficult.  At least, I assume that's the reasoning - I was deeply involved...Read moreTable-based exception-handling metadata requires function prologue/epilogue sequences to have constrained forms that can be described by that metadata.  When NT was first designed for x86-32, there was a lot of existing asm code that people wanted to easily port over to NT, and that ported code included pretty much every weird function entry/exit sequence you could think of (and lots more that you wouldn’t imagine anyone would ever think of).  Switching to table-based metadata would have required modifying all that code, making porting more difficult.  At least, I assume that’s the reasoning – I was deeply involved in the SEH runtime code in the ’90s and ’00s when I was on the VC++ compiler team.
Read less