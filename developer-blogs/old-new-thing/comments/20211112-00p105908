Robert Southee  November 17, 2021


  0  Collapse this comment
Copy link
I’ve always been curious as to why the C/C++ implementation can have the concept of a pointer “one past the end”. I thought there might be some edge case, i.e. the last address is not valid.





Thief  November 18, 2021
· Edited

  0  Collapse this comment
Copy link
This is because C/C++ traditionally use loops from 0 to <size. Loops over pointers (or iterators) inherited the same - ending at <ptr+size or <end().
Because of this, there is an implicit assumption that you can have an index, pointer, or iterator that represents the value to stop iterating after you calculate it but before you use it because it's just outside the bounds.
The alternative is to use <=last_idx, <=ptr+last_idx or <=last_it() as your ending condition - but that breaks when your container is zero-size! You then either need to add an additional if() around all loops, or make last point...Read moreThis is because C/C++ traditionally use loops from 0 to <size. Loops over pointers (or iterators) inherited the same – ending at <ptr+size or <end().
Because of this, there is an implicit assumption that you can have an index, pointer, or iterator that represents the value to stop iterating after you calculate it but before you use it because it’s just outside the bounds.
The alternative is to use <=last_idx, <=ptr+last_idx or <=last_it() as your ending condition – but that breaks when your container is zero-size! You then either need to add an additional if() around all loops, or make last point to something invalid and less than begin. -1 for indexes would make sense, if indexes are signed, but pointers complicate matters… if begin() is nullptr due to the container being empty, what would last() be in order to be “one before” to allow for a <=lastptr test? With <end(), it can also be nullptr.
Read less






紅樓鍮  November 12, 2021


  0  Collapse this comment
Copy link
How did you make the HTML move?





Peter Cooper Jr.  November 12, 2021


  0  Collapse this comment
Copy link
Looks like he just added a few dozen lines of Javascript into the post.





Tango Gu  November 16, 2021


  0  Collapse this comment
Copy link
Yes, I guess Raymond spent more time on implementing animation through javascript/html table then the content writing.
Refer to “function addTable(id, start0, reverse0, start1, reverse1) {” related section in page source.



Don Dumitru  November 12, 2021
· Edited

  0  Collapse this comment
Copy link
You are mashing two things together:  The abstract concept of iterators, and the C++ implementation of iterators over an array (which uses a pointer).
In the abstract concept of iterators, the "end" iterator is *always* a sentinel.  You can never legally dereference an "end" iterator - that is undefined behavior.  But you can compare an iterator to the "end" iterator, and if they are equal that signals, "stop going forward, the iterator is exhausted".
C++ uses simple pointers to implement iterators over arrays, because that is fast, small, and simple - an amazing combination.  But as you note,...Read moreYou are mashing two things together:  The abstract concept of iterators, and the C++ implementation of iterators over an array (which uses a pointer).
In the abstract concept of iterators, the “end” iterator is *always* a sentinel.  You can never legally dereference an “end” iterator – that is undefined behavior.  But you can compare an iterator to the “end” iterator, and if they are equal that signals, “stop going forward, the iterator is exhausted”.
C++ uses simple pointers to implement iterators over arrays, because that is fast, small, and simple – an amazing combination.  But as you note, it requires a little bit of finesse to use simple pointers for both the forward and reverse implementations.
But you aren’t supposed to look at the implementation in C++.  You are supposed to stick to the abstract model and not even think about the implementation, because code you write that uses iterators should be written so that it works for any iterator, not just for iterators over arrays.
(Unless you are debugging and need to actually see what value will come back if somebody dereferences it, or if somebody uses the iterator value incorrectly.)
Read less







Raymond Chen Author
November 12, 2021


  0  Collapse this comment
Copy link
The mental model works for abstract iterators. In fact, it’s codified in the standard under [reverse.iter.elem]: constexpr reference operator* const;. Effects: As if by Iterator tmp = current; return *--tmp;