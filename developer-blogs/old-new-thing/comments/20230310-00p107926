Neil Rashbrook  March 11, 2023


  0  Collapse this comment
Copy link
The documentation is slightly misleading when it says “window class names need to be unique only within the same process.” This is true for CS_GLOBALCLASS classes, but regular classes only need to be unique within the same instance.





Luca Bacci  March 11, 2023
· Edited

  0  Collapse this comment
Copy link
True! Anyway, if your library supports static compilation, you should nevertheless choose class names that are unique within the process. When compiled statically your library will get an HINSTANCE that is shared with other libraries




Luca Bacci  March 11, 2023
· Edited

  0  Collapse this comment
Copy link
Is there any possible downside with calling UnregisterClass from DllMain? Or is it deemed safe? (See “Don’t forget to unregister your window classes when your DLL shuts down dynamically”)





Joshua Hudson  March 10, 2023


  1  Collapse this comment
Copy link
And please don’t use CS_GLOBALCLASS if you’re a shell extension. Random shell extensions loaded by GetOpenFileName is just about the last thing that should be creating global window classes.





Luca Bacci  March 10, 2023
· Edited

  0  Collapse this comment
Copy link
Would be neat if we could instantiate IFileDialog out-of-process to avoid loading shell extensions inside the process





John Tur  March 10, 2023


  1  Collapse this comment
Copy link
The Windows Runtime Windows.Storage.Pickers.FileOpenPicker (and related types) are opened out-of-process (though they have other problems).





Paulo Pinto  March 11, 2023


  2  Collapse this comment
Copy link
Windows Runtime has been a mess since its introduction on Windows 8, it could have been the reboot of ease of use of COM with VB 6, instead of the caveats and low productivity tooling alongside tons of boilerplate code that were problematic in ATL and .NET CCW/RCW, instead we got five reboots of Windows Runtime APIs, deprecation of .NET Native and C++/CX, and the latest reboot attempt is full of bugs.