amoskevitz  February 21, 2024


  0  Collapse this comment
Copy link
Interestingly, on my computer if you go to the registry location where you would put the key that triggers the USB keystroke crash, there is a Key namedWorkNicely. It is set to 0â€¦ I guess my keyboard is mean to the other devices?





Piotr SiÃ³dmak  February 20, 2024


  0  Collapse this comment
Copy link
Thanks for the tip on how to annoy people ðŸ™‚





Neil Rashbrook  February 20, 2024


  0  Collapse this comment
Copy link
Fortunately NotMyFault wonâ€™t suffer any real errors!





Sigge Mannen  February 20, 2024


  0  Collapse this comment
Copy link
What are they testing if they need a system crash for it to occur?





Rio Dio  February 20, 2024


  0  Collapse this comment
Copy link
They look for some event and want to catch the whole system state before they lose the context. So they trigger system crash to get full memory dump.




a b  February 19, 2024
Â· Edited

  0  Collapse this comment
Copy link
Terminating winlogon.exe does not cause blue screen in modern windows since session 0 isolation. It only leads to the termination of its session and auto relogon if the session was active. I use this method to simulate logoff.exe another session when logoff.exe is not available.
I don't know who wrote the critical process list in https://learn.microsoft.com/en-us/windows-hardware/drivers/debugger/bug-check-0xef--critical-process-died
but logonui.exe conhost.exe were never critical process, and neither was winlogon.exe. The blue screen after winlogon.exe termination in older Windows was caused by smss.exe waiting for winlogon's exit and calling NtRaiseHardError.
I think it is possible to determine whether CRITICAL_PROCESS_DIED is caused by TerminateProcess from...Read moreTerminating winlogon.exe does not cause blue screen in modern windows since session 0 isolation. It only leads to the termination of its session and auto relogon if the session was active. I use this method to simulate logoff.exe another session when logoff.exe is not available.
I donâ€™t know who wrote the critical process list in https://learn.microsoft.com/en-us/windows-hardware/drivers/debugger/bug-check-0xefâ€“critical-process-died
but logonui.exe conhost.exe were never critical process, and neither was winlogon.exe. The blue screen after winlogon.exe termination in older Windows was caused by smss.exe waiting for winlogonâ€™s exit and calling NtRaiseHardError.
I think it is possible to determine whether CRITICAL_PROCESS_DIED is caused by TerminateProcess from another process by looking at pid of the thread that triggers the bug check.
Read less







Joshua Hudson  February 19, 2024


  0  Collapse this comment
Copy link
You mean you canâ€™t tell the difference between terminating winlogon.exe and winlogon.exe crashing? Fix your API surface. Itâ€™s been a thorn in my side for far too long when I canâ€™t tell that AV terminated my child process; now you feel it too.





Raymond Chen Author
February 20, 2024


  1  Collapse this comment
Copy link
But maybe thereâ€™s a bug in the system that accidentally calls TerminateProcess on winlogon.exe. Still needs to be debugged to confirm that itâ€™s a false alarm.





a b  February 19, 2024


  0  Collapse this comment
Copy link
https://learn.microsoft.com/en-us/windows-hardware/drivers/debugger/registry-entries-for-silent-process-exit
Have you given this a try? I doubt it works with AV though, as it is implemented solely in user mode, inside TerminateProcess. It does not work if AV calls NtTerminateProcess.