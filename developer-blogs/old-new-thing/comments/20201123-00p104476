David Adam  November 28, 2020


  0  Collapse this comment
Copy link
“For example, suppose you’re a multi-window tabbed application, and the user launches a new document.”
I have been surprised recently to find that there’s not a straightforward way of implementing a single-instance application. In Win32 creating a custom window class and messaging with WM_COPYDATA seems fine, and WinForms in .NET Framework contains a working implementation using shared memory, but all the answers on StackOverflow are wrong (usually by using machine-global, not session-local synchronization methods) and the implementation in .NET 5 is wrong too. Perhaps a topic for a future post?





Paul Jackson  November 24, 2020


  0  Collapse this comment
Copy link
Semi-related: Can you tell me why, when we finally can re-order taskbar items since Windows 7, this order is scrambled when I switch to a different virtual desktop and come back? How come such a basic functionality is malfunctioning? That's exactly the kind of "You had one job!" thing that was mentioned in another comment here.
So it happens that I'm lucky and some software fixes it, but it resorts to memory hacking (Googel for "virtual desktops - preserve taskbar order"). Now, if there was enough exposed API, somebody could at least fix it properly or perhaps allow more customization....Read moreSemi-related: Can you tell me why, when we finally can re-order taskbar items since Windows 7, this order is scrambled when I switch to a different virtual desktop and come back? How come such a basic functionality is malfunctioning? That’s exactly the kind of “You had one job!” thing that was mentioned in another comment here.
So it happens that I’m lucky and some software fixes it, but it resorts to memory hacking (Googel for “virtual desktops – preserve taskbar order”). Now, if there was enough exposed API, somebody could at least fix it properly or perhaps allow more customization. But you always have this “it’s not for other programs” attitude. That might have been OK if it would work properly out of the box!
Read less







cheong00  November 24, 2020


  0  Collapse this comment
Copy link
In your case you should have filed bug report at Feedback Hub (which I heard some other forum users complained being less responsive than before but I have no idea because all I have ever received is automatic reply of they got the feedback)
Using third party software to “fix a bug” is never the right way, especially if it involves direct memory manipulation. I would not be surprised in future Windows Update it’ll cause the shell crash due to internal memory structure changes, perhaps just to fix the issue you described.





Paul Jackson  November 25, 2020


  0  Collapse this comment
Copy link
> Using third party software to “fix a bug” is never the right way
Well, it’s the only way.
> I would not be surprised in future Windows Update it’ll cause the shell crash
That happens from time to time, but the tool is being maintained.
> perhaps just to fix the issue you described.
You wish. It’s been like that since the introduction of the feature in 2015.



cheong00  November 23, 2020


  0  Collapse this comment
Copy link
I would imagine maybe some “suite-like” LOB applications will want to create separate virtual desktop that’ll run all the application it contains there, and have it’s own clipboard not shared with other virtual desktops except with certain “clipboard manager” in the suite (actually this is easy, just share data via named pipe and pretend you’re using clipboard, and only use clipboard in that “clipboard manager”). It will help them create environment that feels super secure.





Mark Brents  November 23, 2020


  0  Collapse this comment
Copy link
I would like to have a way to have the list of desktops always on top so I can always see what I have and switch between them with a click.





Jonathan Potter  November 23, 2020


  2  Collapse this comment
Copy link
What if the user has moved your windows onto arbitrary virtual desktops, and then expects your program to reopen in the same configuration next time?





Raymond Chen Author
November 23, 2020


  0  Collapse this comment
Copy link
Virtual desktops are ephemeral. There is no “same configuration”. The next time the program runs, virtual desktop {1268aaa6-a8ca-4702-a4e9-24c5a9d7b229} almost certainly does not exist any more.





Jonathan Potter  November 23, 2020


  2  Collapse this comment
Copy link
Unfortunately to the user it’s not “virtual desktop {1268aaa6-a8ca-4702-a4e9-24c5a9d7b229}”, it’s “Desktop 3”, and their question “Why can’t your app reopen window X on ‘Desktop 3’ when I had it there before?” seems fairly reasonable from a user’s point of view.





switchdesktopwithfade@hotmail.com  November 23, 2020


  0  Collapse this comment
Copy link
Jonathan your question is more academic because MoveWindowToDesktop() and GetWindowDesktopId() already do exactly what you ask for. As far as I know the GUIDs and names do persist between reboots and they forever ought to until the user deletes them. It has always been this way going all back to the NT and Unix days (the philosophy not the APIs) because ephemeral virtual desktops have no practical value.
It would be unfortunate if Sets & Activities went mainstream one day and remembered every little detail of X,Y coordinates and tab order but forgot what desktop they were on. You know those...Read moreJonathan your question is more academic because MoveWindowToDesktop() and GetWindowDesktopId() already do exactly what you ask for. As far as I know the GUIDs and names do persist between reboots and they forever ought to until the user deletes them. It has always been this way going all back to the NT and Unix days (the philosophy not the APIs) because ephemeral virtual desktops have no practical value.
It would be unfortunate if Sets & Activities went mainstream one day and remembered every little detail of X,Y coordinates and tab order but forgot what desktop they were on. You know those memes that go “You had one job!”
IMO applications need to know about virtual desktops for two legitimate reasons:
1. To remember the last desktop they were moved to by the user. (documented)
2. To manage desktops on behalf of the user. (undocumented)
Also I’m curious about the hard rules for virtual desktops. For example, a window that toggles WS_VISIBLE may jump from a background desktop to the active desktop, which should never be the case.
Read less