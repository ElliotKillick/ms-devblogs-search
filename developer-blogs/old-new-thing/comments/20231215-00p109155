紅樓鍮  December 16, 2023
· Edited

  0  Collapse this comment
Copy link
It should be noted that mutable values, immutable references and unique mutable references (e. g.  in C++) can all be seen as having "value semantics":
Mixed strategies such as copy-on-write can also implement value semantics, though copy-on-write loses a big advantage of other implementations of value semantics that is the elimination of cross-thread sharing of mutable memory (you need to mutate the "shared" flag and possibly the refcount even for operations that don't logically mutate data).
Bonus Chatter: In Rust, a nullable string reference () has the same abi as a non-null string reference (), and yet the Rust  can...Read moreIt should be noted that mutable values, immutable references and unique mutable references (e. g. unique_ptr in C++) can all be seen as having “value semantics”:

With an immutable reference type (e. g. the C# string), you can nevertheless mutate a variable of that type by creating a new object of that type and reassign the variable, as long as the language permits mutable variables;
Even with a mutable value type (e. g. a C# struct), mutating a variable of that type can’t change the value of other variables because different variables don’t alias, and values can’t alias;
The case of unique mutable references is the same as mutable values because they have the same aliasing model.

Mixed strategies such as copy-on-write can also implement value semantics, though copy-on-write loses a big advantage of other implementations of value semantics that is the elimination of cross-thread sharing of mutable memory (you need to mutate the “shared” flag and possibly the refcount even for operations that don’t logically mutate data).
Bonus Chatter: In Rust, a nullable string reference (Option<&str>) has the same abi as a non-null string reference (&str), and yet the Rust &str can represent the empty string, without it having to physically point to an empty string in memory. This is because a Rust &str is a two-pointer-wide structure containing a pointer and a size, and an empty string needs to be identified only by the size field equalling 0, while the data pointer can be an arbitrary, possibly dangling pointer, but only as long as it’s not null; the nullable (Option<&str>) string reference has its null (None) value represented by a null data pointer. (Note that the ABI of string references are not actually publicly guaranteed; this is just a description of how it has always worked in reality.)
Read less







Joshua Hudson  December 15, 2023


  0  Collapse this comment
Copy link
I once solved a problem like this one by having the default string value be the result of `SELECT newid()` which was then embedded into the source code.
So the code would look like void SetTitleFilter() { SetTitleFilter(“F6C24DB8-EA34-4234-95E0-1CEAA509FFC5 “); }
Yes this means there’s one value that can’t be filtered by. Unless you need to deal with adverse actors, that’s not a problem.