Sacha Roscoe  December 1, 2022


  2  Collapse this comment
Copy link
The app compatibility stories are my favourite content on this site. Not checking for failure is of course one of the classic errors, and I can easily imagine that they would not have encountered this sort of situation in testing - as the article points out, most programs had over 64 slots in use before the optimisation (though would App Verifier have helped? I wouldn't be surprised if it does things like non-contiguous slot allocation, and allocations higher than 64 even when lower slots are free).
Applause and thanks to the app compat team for allowing us to run our software...Read moreThe app compatibility stories are my favourite content on this site. Not checking for failure is of course one of the classic errors, and I can easily imagine that they would not have encountered this sort of situation in testing – as the article points out, most programs had over 64 slots in use before the optimisation (though would App Verifier have helped? I wouldn’t be surprised if it does things like non-contiguous slot allocation, and allocations higher than 64 even when lower slots are free).
Applause and thanks to the app compat team for allowing us to run our software on ever newer versions of Windows! (For the most part anyway.)
Read less







Joshua Hudson  November 30, 2022


  0  Collapse this comment
Copy link
You know, I feel for these guys. Assuming that if you allocate a bunch of TLS slots at the top of main that they’re all in sequence is much more reasonable assumption than a random object is in TLS slot 16 already while the first TLS slot to be allocated is in slot 8.
Also, whatever is forcing that TLS slot into 16 is really dodgy. I delay-load shell32.dll. What’s that gonna do if 16 is already taken?





Ian Boyd  December 2, 2022


  0  Collapse this comment
Copy link
> Assuming that if you allocate a bunch of TLS slots at the top of main that they’re all in sequence is much more reasonable assumption than a random object is in TLS slot 16 already while the first TLS slot to be allocated is in slot 8
Ideally the kernel would hand you back a randon 32-bit "handle", rather than a "slot".
That way it is made clear to people that there is no sequence, or ordering, or range, and just a bunch of slots.
I'm sure this is the sort of thing the App Verifier could do
- convert the slot...Read more> Assuming that if you allocate a bunch of TLS slots at the top of main that they’re all in sequence is much more reasonable assumption than a random object is in TLS slot 16 already while the first TLS slot to be allocated is in slot 8
Ideally the kernel would hand you back a randon 32-bit “handle”, rather than a “slot”.
That way it is made clear to people that there is no sequence, or ordering, or range, and just a bunch of slots.
I’m sure this is the sort of thing the App Verifier could do
– convert the slot index to a random 32-bit value
– hand *you* the random 32-bit value
– and intercept your requests for that “slot”, rewriting it to the “real” slot
TlsAlloc’s only guarantee of the return value is that it is a **DWORD** that you then later pass to TlsGetValue, TlsSetValue, and TlsFree. And anyone trying to do anything fancier with the return value than treating it as an opaque cookie gets a swift kick in the pants.
Read less







Richard Thompson  December 5, 2022


  0  Collapse this comment
Copy link
I presume this was attempting to use the slots to contain an entire structure as an optimisation to avoid the pointer deref. As it was previously always in the 1024 separate block, that always worked.
As Microsoft did a compatibility fix I presume it’s inside some fairly commonly-used framework.
Of course, it will still break horribly if it ever spans the 64 and 1024 blocks, as the underlying problem of failing to check if it worked remains.
[[nodiscard]] (and Rust’s #[must_use]) helps with that, but of course, the compiler cannot ever check whether you did something useful with the result…




Raymond Chen Author
November 30, 2022


  0  Collapse this comment
Copy link
It’s not shell32 that reserved slot 16. It’s the kernel.




Motti Lanzkron  November 28, 2022


  0  Collapse this comment
Copy link
Am I being particularly obtuse or does this function attempt to allocate 37 rather than 38 TLS slots?





Hubert Bartwinski  November 29, 2022


  1  Collapse this comment
Copy link
The for loop does indeed call TlsAlloc 37 times. But there is an additional call to TlsAlloc before the the for loop at the beginning of the function.
g_firstTls = TlsAlloc();




John Wiltshire  November 28, 2022


  0  Collapse this comment
Copy link
Is there a good reason to use so many slots?  I’ve always assumed they were a limited system resource and just used one to point to a structure I can manage myself.