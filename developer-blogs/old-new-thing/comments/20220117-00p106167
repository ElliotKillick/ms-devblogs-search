Huo Yaoyuan  January 17, 2022
· Edited

  0  Collapse this comment
Copy link
The alias in C# works somehow differently with C++. For example,
<code>
You can't refer it as <code>. <code> in C# always imports names into the "un-namespaced" scope.
And also, it only import top level things, not nested namespaces. With <code>, you still can't refer <code> as <code>.
The differences between the two languages can be an interesting topic.
<code> in C++ powers templates by associating two types together.
Read moreThe alias in C# works somehow differently with C++. For example,
namespace My
{
    using Console = System.Console;
}
You can’t refer it as
My.Console
.
using
 in C# always imports names into the “un-namespaced” scope.
And also, it only import top level things, not nested namespaces. With
using System;
, you still can’t refer
System.Collections.BitArray
 as
Collections.BitArray
.
The differences between the two languages can be an interesting topic.
using
 in C++ powers templates by associating two types together.
Read less







Igor Tandetnik  January 17, 2022


  0  Collapse this comment
Copy link
It’s somewhat confusing when you refer to types as “objects”. At least in C++, “object” is a term of art, and types are not objects. You might have meant “entity”; types are entities (and so are objects), while type aliases are not.





Raymond Chen Author
January 17, 2022


  0  Collapse this comment
Copy link
Excellent point. Will fix.





Flux  January 17, 2022


  0  Collapse this comment
Copy link
I concur. At least in .NET, System.Console is a class, not object.