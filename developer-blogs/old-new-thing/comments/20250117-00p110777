BCS  January 19, 2025


  0  Collapse this comment
Copy link
atexit, being part of the library, is a bit of a different situation than destruction of globals (as that is part of the language it self).
That said, I'm 100% for there being a part-of-the-standard "best effort" way to run stuff at destruction... just as long as the norm is that everyone knows it's best effort and it's not too much of a foot-gun. (The reason I'm for that is that is because thing like telemetry, code coverage, buffer flushes, "validation it's safe to unload a DLL/.so" and the like can benefit from the ability, even if you can never be...Read moreatexit, being part of the library, is a bit of a different situation than destruction of globals (as that is part of the language it self).
That said, I’m 100% for there being a part-of-the-standard “best effort” way to run stuff at destruction… just as long as the norm is that everyone knows it’s best effort and it’s not too much of a foot-gun. (The reason I’m for that is that is because thing like telemetry, code coverage, buffer flushes, “validation it’s safe to unload a DLL/.so” and the like can benefit from the ability, even if you can never be guaranteed you won’t get sig-9’ed.)
If there was no need for legacy support, I’d make destruction of global lifetime objects an opt-in thing, either on a per type or per object basis.
Read less







BCS  January 18, 2025


  0  Collapse this comment
Copy link
Another way around this problem is use a function static variable to lazy construct the global object but put it on the heap, use a raw pointer and then never bother to destruct it.
As long as the static only ever goes out of scope during shutdown of the process (e.g. no DLL unload/reload funny business) the resulting memory leak is mostly harmless. (OTOH, you still lose any other side effects of destruction so those had better just be thing that are correctly cleaned up by the process no long existing.)





Kevin Norris  January 18, 2025


  0  Collapse this comment
Copy link
I prefer the Rust approach to this, where statics are never destructed and there is no means of running code at process termination. Unfortunately, the rest of the world is not as "reasonable" as Rust, and so they get to deal with fun messes like Rust bug #126600, which can be summarized as "libc exit/atexit is terrible and built on a foundation of sand." They've already filed further bug reports against two different libc implementations, the POSIX standard, and the C standard, and fortunately everyone seems to broadly agree that the status quo is bad and also on what the...Read moreI prefer the Rust approach to this, where statics are never destructed and there is no means of running code at process termination. Unfortunately, the rest of the world is not as “reasonable” as Rust, and so they get to deal with fun messes like Rust bug #126600, which can be summarized as “libc exit/atexit is terrible and built on a foundation of sand.” They’ve already filed further bug reports against two different libc implementations, the POSIX standard, and the C standard, and fortunately everyone seems to broadly agree that the status quo is bad and also on what the fix ought to look like, but that will likely take months if not years (at least to get it upstreamed all the way into the C standard, anyway).
Read less






Paul Jackson  January 18, 2025


  0  Collapse this comment
Copy link
You can just use the RtlDllShutdownInProgress function instead of using a canary and making sure the order is right, which is easy to mess up





Raymond Chen Author
January 20, 2025


  0  Collapse this comment
Copy link
RtlDllShutdownInProgress is Windows-specific, so that option is not available to other operating systems.





Paul Jackson  January 21, 2025


  0  Collapse this comment
Copy link
Right, I forgot other OSes exist