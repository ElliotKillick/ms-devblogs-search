Bill Stewart  July 31, 2024


  0  Collapse this comment
Copy link
Alas, this is such a persistent annoyance with vulnerability scanners that I wrote a little WSH JScript script that quotes unquoted service paths. The intended use is to run it as a startup script in a GPO (or some other means).
https://gist.github.com/Bill-Stewart/9379a8df293de418ed96ee6ea82c4459





Oita Valentin  July 29, 2024
· Edited

  0  Collapse this comment
Copy link
Well…
https://thehackernews.com/2019/10/apple-bonjour-ransomware.html
If you test this today, you will have a nice surprise, but relax, this isn’t a security issue.





Taavi Eomäe  July 26, 2024
· Edited

  0  Collapse this comment
Copy link
It’s interesting to read this while at the same time Microsoft’s own Defender EDR labels unquoted service paths a potential vulnerability unconditionally and asks for a fix.





Joshua Hudson  July 24, 2024


  0  Collapse this comment
Copy link
1) A thing that creates an unquoted service path with a changeable installation directory is a potential security vulnerability.
D:\Program Files is not necessarily safe.
2) A thing that creates an unquoted service path in C:\Program Files assumes that the drive wasn’t previously used as an external drive.
In this case, the permissions on \ may well be Everybody – Full Control. Oops.
3) A thing that creates an unquoted service path in C:\Windows ought to be safe under any reasonable assumptions.





Stefan Kanthak  July 26, 2024


  0  Collapse this comment
Copy link
Raymond is still SEVERELY confused, and also got the headline wrong: it has to be "Defense in depth still NOT understood and thus NOT exercised"!
0) His so-called "airtight hatchway" is NOT airtight: standard installations of Windows still provide your UNFORTUNATE customers/users with just a SINGLE user account that happens to be an (since Vista UAC-controlled) ADMINISTRATOR account. And UAC, braindead in itself, especially since introduction of auto-elevation with Windows 7, is NO security boundary, but security theater!
1) "Defense in depth" means to fix ALL weaknesses: you MUST NOT (and CAN NOT see above) rely on the NTFS-ACL (applied since just...Read moreRaymond is still SEVERELY confused, and also got the headline wrong: it has to be “Defense in depth still NOT understood and thus NOT exercised”!
0) His so-called “airtight hatchway” is NOT airtight: standard installations of Windows still provide your UNFORTUNATE customers/users with just a SINGLE user account that happens to be an (since Vista UAC-controlled) ADMINISTRATOR account. And UAC, braindead in itself, especially since introduction of auto-elevation with Windows 7, is NO security boundary, but security theater!
1) “Defense in depth” means to fix ALL weaknesses: you MUST NOT (and CAN NOT see above) rely on the NTFS-ACL (applied since just some years) which prevents standard users accounts to create %SystemDrive%\Program.exe: heck, it may not be present at all!
2) An unquoted executable pathname in a command line is PROOF that a company which ships such CRAP, its QA, its developers and their supervisors, are SLOPPY and STILL unaware of its security risks; they DONT CARE for their customers security/safety, despite that this is a well-known/well-documented weakness which they are UNABLE or unwilling to handle properly!
If you need a recent example of such EPIC FAILURE: on fully patched Windows 10 “C:\Program Files\RUXIM\RUXIMICS.exe” calls CreateProcess() with a command line “C:\Program Files\RUXIM\RUXIMIH.exe /interaction ‹guid› …”
PS: I recommend to hire some Vogons and let them read the “Security remarks” of the CreateProcess*() documentation to ALL your employees, ALOUD and in their very best (bari)tone, until ALL these weaknesses have been fixed!
Read less







aaaaaa 123456789  July 24, 2024


  0  Collapse this comment
Copy link
Sure, but a service that installs itself in an unsecured location is already vulnerable.
Here’s your attack:
1) Craft evilprogram.exe to do evil things
2) Delete D:\Program Files\totallyrealservice.exe
3) Rename evilprogram.exe to totallyrealservice.exe and copy it to D:\Program Files\
The space in the path did nothing to help or hurt you here. Running a program as administrator from a location with non-administrator write access is an escalation vulnerability in and of itself.





Joshua Hudson  July 28, 2024


  0  Collapse this comment
Copy link
Not so. Having tried it, D:\Program Files gets created with correct permissions. Only D:\ is weak, and do to the way ACLs work on Windows you won’t be able to delete or rename D:\Program Files.



alan robinson  July 24, 2024


  0  Collapse this comment
Copy link
I assume there’s some kind hope for a bug bounty payout involved in these kinds of nonsense reports? This does reveal why it’s often so much trouble to actually submit a report of this kind. The times I’ve ever been tempted (never MS products, of course!) I’ve always given up because it’s not worth the trouble just to help another company’s software be better.





Raymond Chen Author
July 24, 2024


  0  Collapse this comment
Copy link
I think a lot of it is people trying to build security cred, putting “Found X security vulnerabilities in Windows” on their resume or publishing a blog post on the “vulnerability” they found.




Wilhelm Nöker  July 24, 2024


  3  Collapse this comment
Copy link
Earlier this year I had to fix a vulnerability of this kind in several software packages that I wrote for my employer. I was puzzled what could have persuaded the younger me from fifteen years ago to call CreateService() with the unmodified output of GetModuleFileName(), considering that MSDN has always pointed out that the lpBinaryPathName parameter must be quoted if it contains a space.
As it turns out, I inherited the error from sample code that came with the commercial OPC toolkit from a major vendor. And I suspect that they had blindly copied code from an MSDN sample: Installing a...Read moreEarlier this year I had to fix a vulnerability of this kind in several software packages that I wrote for my employer. I was puzzled what could have persuaded the younger me from fifteen years ago to call CreateService() with the unmodified output of GetModuleFileName(), considering that MSDN has always pointed out that the lpBinaryPathName parameter must be quoted if it contains a space.
As it turns out, I inherited the error from sample code that came with the commercial OPC toolkit from a major vendor. And I suspect that they had blindly copied code from an MSDN sample: Installing a service. (Yes, I did use the “feedback” link on that page, but the contents doesn’t seem to have changed in the few months since then.)
Fun fact: Windows (at least since Windows 7) contains diagnostic code that will show a message box, if a file C:\Program.exe is detected during startup. This warning appears no matter if there are unquoted service paths in the system or not. And it definitely does not prevent Service Control Manager from trying to launch such a C:\Program.exe as a service.
Read less







Raymond Chen Author
July 29, 2024


  0  Collapse this comment
Copy link
I fixed the page you referenced. Thanks for pointing it out. The bug was fixed on the page it was copied from but the fix was not propagated to the copy.