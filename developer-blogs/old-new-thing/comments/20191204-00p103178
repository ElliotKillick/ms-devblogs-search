Alexis Ryan  December 8, 2019


  0  Collapse this comment
Copy link
I’d imagine concern over something like this because of heartbleed. the code may not expose anything but shows someone is writing dubious code





Julien Oster  December 5, 2019


  0  Collapse this comment
Copy link
Ok, I agree that it's very likely not exploitable in this case, but I don't actually think there is a guarantee that it is not, at least unless the heap padding is contractually guaranteed (which it likely is not).
I know this is rather far fetched, but imagine that the out-of-bounds byte is not only outside any heap padding, but crosses into a mapped region in which reads have side effects. Like some MMIO device mapping, or (shudder) some user space code that implements its own faulting by catching the exception resulting from the unmapped read and mapping something on-demand, with...Read moreOk, I agree that it’s very likely not exploitable in this case, but I don’t actually think there is a guarantee that it is not, at least unless the heap padding is contractually guaranteed (which it likely is not).
I know this is rather far fetched, but imagine that the out-of-bounds byte is not only outside any heap padding, but crosses into a mapped region in which reads have side effects. Like some MMIO device mapping, or (shudder) some user space code that implements its own faulting by catching the exception resulting from the unmapped read and mapping something on-demand, with side effects.
I know you know that this is not the case here, because you know the heap layout and because you probably know that no other part of the program or library would map such side effect laden memory regions. But on some future OS version for example, it just might, even though this is admittedly one of the more unlikely bugs to ever turn exploitable. The bottom line is: Don’t assume too much.
Read less







Kalle Niemitalo  December 4, 2019


  0  Collapse this comment
Copy link
checked_mult could have a timing side channel.





Lucius User  December 4, 2019


  0  Collapse this comment
Copy link
I’d disagree that an out of bounds read that is never disclosed is harmless. While it is harmless in the binary-as-compiled, c compilers are becoming better and better at breaking the code in fun and exciting ways at even a slightest hint of undefined behavior (i am assuming it applies here because it looks like the original code is written in c±). In that case, since an out of bounds read is UB and can be assumed by the compiler to never happen, it can delete a bounds check that is located below the offending code.





Ismo Salonen  December 4, 2019


  0  Collapse this comment
Copy link
If the OOB read is from memory that is already mapped into your address space then technically there is no information disclosure but just a programming bug (in this case UB).  If the read was outside your mapped address space and iff it succeeded then it would be information disclosure. Compiler does not always know if pointer is valid (imagine function which has char * argument, there is no other information passed than the pointer value).
Of course all such bugs must be corrected, you never know if the pointer was just one byte past your address space and...Read moreIf the OOB read is from memory that is already mapped into your address space then technically there is no information disclosure but just a programming bug (in this case UB).  If the read was outside your mapped address space and iff it succeeded then it would be information disclosure. Compiler does not always know if pointer is valid (imagine function which has char * argument, there is no other information passed than the pointer value).
Of course all such bugs must be corrected, you never know if the pointer was just one byte past your address space and then you have unhandled exception and program crashes.
Read less







Julien Oster  December 5, 2019


  0  Collapse this comment
Copy link
Absolutely not. A read from a region that is not mapped does not succeed, by definition. What would it return, since there is literally nothing there? An information disclosure happens whenever you return information that you did not intend to disclose. It’s your own address space with your own mappings, but you still can have secrets like, just as some examples, passwords, secret keys, or even just some random pointer that gives a good hint about your ASLR slide right next to your harmless and disclosable memory.




smf  December 4, 2019


  0  Collapse this comment
Copy link
I doubt it would just remove the bounds check, unless it could guarantee that the bounds check could never fail, which it obviously can fail.
Any code paths where it can detect an actual out of bounds access could get optimized away entirely, because of undefined behavior. In which case there is no problem as code that is optimized away can’t have a security issue.