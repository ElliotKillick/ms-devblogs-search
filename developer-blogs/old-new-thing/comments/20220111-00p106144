Juan Castro  January 12, 2022


  0  Collapse this comment
Copy link
Reading the ‚Äúfaster syscall‚Äù article:
‚ÄúI was reminded of a meeting that took place between Intel and Microsoft over fifteen years ago. (Sadly, I was not myself at this meeting, so the story is second-hand.)‚Äù
Took me some ten seconds to understand that you were not personally at the meeting. At first glance I thought you were there but were immediately possessed by a supernatural entity. Or high.





Steve P  January 12, 2022


  0  Collapse this comment
Copy link
Reminds me of an anti-disassembly trick I encountered walking through some commercial code with a debugger on Apple II  (sorry, don't remember what it was or why I was doing this, it was a long time ago).
The disassembly was clean at the entry point and went on for a few lines of sensible and expected code until it hit a short jmp instruction, after which the code was complete gibberish.  That short jmp landed in the middle of a multi-byte instruction above it.  Re-aligning the disassembly to this mid-instruction address revealed the code for the remainder of...Read moreReminds me of an anti-disassembly trick I encountered walking through some commercial code with a debugger on Apple II  (sorry, don‚Äôt remember what it was or why I was doing this, it was a long time ago).
The disassembly was clean at the entry point and went on for a few lines of sensible and expected code until it hit a short jmp instruction, after which the code was complete gibberish.  That short jmp landed in the middle of a multi-byte instruction above it.  Re-aligning the disassembly to this mid-instruction address revealed the code for the remainder of the function.  More of a speed-bump than a protection scheme ‚Ä¶ but cool üôÇ
Read less







Neil Rashbrook  January 12, 2022


  0  Collapse this comment
Copy link
An alternative approach I saw in Sinclair BASIC is to replace the JMP instruction with a CALL (actually an RST) instruction, put the error number as a byte after the instruction, and then extract the return address from the stack and read the error number that way.





Juan Castro  January 12, 2022


  0  Collapse this comment
Copy link
Documentation for a good number of processors actually recommends that as a (pardon me) routine way to call routines. Embed immediate parameters in the code (or even non-immediate ones if the code is in RAM), then get them from inside the procedure through the saved instruction pointer (whether in the stack or in a link register).





Antonio Rodr√≠guez  January 13, 2022
¬∑ Edited

  0  Collapse this comment
Copy link
Stack space was scarce these days. The 6502 supported a single stack of 256 bytes (S, the stack pointer register, was 8 bits wide). The 8080/Z80 supported bigger stacks, but you wouldn't want to reserve a 4 KB stack if you had just 16 KB of RAM (of which you usually had to subtract video memory and system globals). In fact, the standard calling convention for Apple ProDOS was placing the call parameters after the JSR (6502's equivalent of CALL):
<code>
Each function had a fixed number of parameters, so the address of the first instruction after the call could...Read moreStack space was scarce these days. The 6502 supported a single stack of 256 bytes (S, the stack pointer register, was 8 bits wide). The 8080/Z80 supported bigger stacks, but you wouldn‚Äôt want to reserve a 4 KB stack if you had just 16 KB of RAM (of which you usually had to subtract video memory and system globals). In fact, the standard calling convention for Apple ProDOS was placing the call parameters after the JSR (6502‚Äôs equivalent of CALL):
    JSR $BF00          ;ProDOS MLI's entry point
    DB xx xx xx        ;Function number and parameters
    {code continued here}
Each function had a fixed number of parameters, so the address of the first instruction after the call could be calculated by the MLI (the kernel‚Äôs call dispatcher).
Read less







Juan Castro  January 13, 2022


  0  Collapse this comment
Copy link
That‚Äôs actually due not to stack scarcity, but register scarcity. In CP/M (an OS of somewhat similar complexity) all parameters to system calls are passed in registers, since the 8080 has three 16-bit pointer registers, doubling as 6 8-bit registers, plus the accumulator. And a proper 16-bit stack, of course.
Being experienced in the 8080, Z80, and 6809, I took a look at the 6502 and my reaction was, ‚ÄúYou GOTTA be kidding me. No thanks.‚Äù
Shame. Maybe if alternate-universe me had been exposed to the 6502 first, I‚Äôd actually enjoy programming for it.





word merchant  January 14, 2022


  0  Collapse this comment
Copy link
If you want to see how beautiful 6502 code could be, a good place to start would be a disassembly of the BBC Micro‚Äôs OS 1.2 and Basic 2.
Both written by people right at the top of their game (sadly not me).





Raymond Chen Author
January 13, 2022


  0  Collapse this comment
Copy link
The joke is that the 6502 is a 256-register processor (the zero page). The catch is that you are programming in microcode.





Henke37  January 12, 2022


  0  Collapse this comment
Copy link
Just don‚Äôt get in the way of the return predictor when doing that or you will suffer a performance penalty.





Raymond Chen Author
January 12, 2022


  0  Collapse this comment
Copy link
The types of microprocessors where these tricks were common didn‚Äôt even have instruction prefetch, much less a return predictor.



Antonio Rodr√≠guez  January 11, 2022
¬∑ Edited

  0  Collapse this comment
Copy link
In the Apple II, at least, the BIT instruction was used a lot for its original purpose: testing I/O status. All indicators for hardware in the motherboard (and in many expansion cards) used the bit 7, which got transferred into the N (sign) flag by the BIT instruction. For example, testing the keyboard and branching if there is a pending keypress was done this way in just two instructions:
<code>
An infinite loop which waited for a keypress could be written in a tight loop of just two instructions, too:
<code>
In these times, most programs skipped the firmware services for I/O and accessed...Read moreIn the Apple II, at least, the BIT instruction was used a lot for its original purpose: testing I/O status. All indicators for hardware in the motherboard (and in many expansion cards) used the bit 7, which got transferred into the N (sign) flag by the BIT instruction. For example, testing the keyboard and branching if there is a pending keypress was done this way in just two instructions:
    2C 00 C0    BIT $C000
    30 xx       BMI {target}
An infinite loop which waited for a keypress could be written in a tight loop of just two instructions, too:
wait:
    2C 00 C0    BIT $C000
    10 FB       BPL wait
In these times, most programs skipped the firmware services for I/O and accessed hardware directly, so this use was pretty frequent.
Read less