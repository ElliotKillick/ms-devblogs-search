Ben Voigt  March 26, 2025


  0  Collapse this comment
Copy link
I’ve always thought this was “zero fill” (or “zero pad”), because it’s not extending from an existing zero.





Rosyna Keller  March 25, 2025


  1  Collapse this comment
Copy link
“Nowadays, we don’t have people trying to retrofit an ABI onto a newly-released processor.”
Is this a jab at ARM64EC?





Aaron Giles  March 24, 2025


  0  Collapse this comment
Copy link
One additional consideration (at least when we were discussing the ABI for AArch64) is security.
Sure, the ABI can specify that parameters are to be sign-extended, but any callee that trusts the caller to sign-extend its parameters is leaving open a potential attack surface. It’s safer for the callee to assume nothing about the upper bits. And once you bake in that assumption, you’ve effectively pushed any sign/zero-extension logic onto the callee, so might as well leave those upper bits undefined.





Raymond Chen Author
March 24, 2025


  0  Collapse this comment
Copy link
There’s no point trying to defend against an in-process attacker. They already are inside the house. Sanitizing the upper 32 bits is the job of the marshaler.





Raymond Chen Author
March 28, 2025


  0  Collapse this comment
Copy link
There is some component that receives the inbound request. It receives some data blob that originated from outside the process (by reading from a network socket, or receiving a chunk of shared memory), and it then has to parse that data blob and turn it into a function call. The outsider doesn’t pass registers; it passes blobs. I guess if your data blob is “here’s a bunch of values to shove into registers”, then you need to validate those values before actually putting them into registers.





Aaron Giles  March 25, 2025


  0  Collapse this comment
Copy link
Within a process, true, but if you export your APIs to the outside world then the issue is something to consider.
For example, if you are porting an API surface that numbers in the many thousands of exposed calls from one platform to AArch64, it’s a security win if the compiler doesn’t make assumptions about the cleanliness of incoming data.





Joshua Hudson  March 25, 2025


  0  Collapse this comment
Copy link
I’m not convinced Aaron Giles isn’t talking about the system call gate and its corresponding calling convention; which typically looks almost exactly like the function calling convention.



David Taylor  March 24, 2025


  0  Collapse this comment
Copy link
“sign extension changes the mathematical value of values greater than or equal to 2³²”
Should presumably say ≥ 2³¹.





Brian Boorman  March 24, 2025


  1  Collapse this comment
Copy link
Isn’t it actually ≥ 2³² – 1 ?





Brian Boorman  March 26, 2025


  0  Collapse this comment
Copy link
Raymond said:
“2³¹ − 1 is 0x7FFFFFFF, and sign extension does not change that value.”
Sure, but my comment (correct or not) said “2³² – 1” which is the value 0xFFFF_FFFF





Raymond Chen Author
March 26, 2025


  0  Collapse this comment
Copy link
” ≥ 2³¹” is correct (thanks). 2³¹ − 1 is 0x7FFFFFFF, and sign extension does not change that value.