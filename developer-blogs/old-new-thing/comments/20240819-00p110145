GL  August 24, 2024
· Edited

  0  Collapse this comment
Copy link
It took me a while before realizing what is supposed to happen. The first set of factory methods are functionally incorrect --- the C++ specification defines them to alter the list by inserting pointers invalid upon return, because the object `n` of automatic storage duration has reached its end of lifetime, and since the defined effect is to insert invalid pointers, it is incorrect to do "NRVO" and construct directly into the final destination (i.e., the standard requires non-desired behavior). The overloaded constructors are correct, but only if you're using a version of C++ with prvalue semantics --- if I'm...Read moreIt took me a while before realizing what is supposed to happen. The first set of factory methods are functionally incorrect — the C++ specification defines them to alter the list by inserting pointers invalid upon return, because the object `n` of automatic storage duration has reached its end of lifetime, and since the defined effect is to insert invalid pointers, it is incorrect to do “NRVO” and construct directly into the final destination (i.e., the standard requires non-desired behavior). The overloaded constructors are correct, but only if you’re using a version of C++ with prvalue semantics — if I’m reading correctly, it guarantees that “this” in the constructor is the final destination. The member functions appear weird, because if you want to make a new node with `new`, then you have to say `new node(existing.create_after())`.
Relying on prvalue semantics (“guaranteed copy elision”) for object identity (thanks to Uli Gerhardt for the phrase) seems to be obfuscating the code, and I would avoid that.
Read less







Raymond Chen Author
August 26, 2024


  0  Collapse this comment
Copy link
I don't see a clause in the C++ specification that prohibits NRVO if the object contains pointers. It seems to be explicitly permitted by [class.copy.elision] 1.1: "in a  statement in a function with a class return type, when the expression is the name of a non-volatile object with automatic storage duration (other than a function parameter or a variable introduced by the exception-declaration of a handler ([except.handle])) with the same type (ignoring cv-qualification) as the function return type, the copy/move operation can be omitted by constructing the object directly into the function call's return object." The exceptions are for...Read moreI don’t see a clause in the C++ specification that prohibits NRVO if the object contains pointers. It seems to be explicitly permitted by [class.copy.elision] 1.1: “in a return statement in a function with a class return type, when the expression is the name of a non-volatile object with automatic storage duration (other than a function parameter or a variable introduced by the exception-declaration of a handler ([except.handle])) with the same type (ignoring cv-qualification) as the function return type, the copy/move operation can be omitted by constructing the object directly into the function call’s return object.” The exceptions are for function parameters or caught exceptions. Now, you can’t rely on NRVO (which is the source of the problem), but NRVO does not appear to be prohibited here, and in fact all three major compilers do it.
Read less






Alessandro Morelli  August 21, 2024
· Edited

  0  Collapse this comment
Copy link
Would it be enough to make node non-copyable and non-moveable to ensure NRVO?





Raymond Chen Author
August 21, 2024


  0  Collapse this comment
Copy link
(1) Maybe you want it to be copyable or movable. (2) A non-copyable, non-movable object cannot participate in NRVO anyway. “even when it [NRVO] takes place and the copy/move constructor is not called, it still must be present and accessible.”




紅樓鍮  August 20, 2024


  0  Collapse this comment
Copy link
Wouldn’t node need non-trivial move constructor and move assignment operator that properly update external pointers to self? Will the lack of guaranteed NRVO still pose a correctness issue if they’re added?





Rutger Ellen  August 20, 2024


  0  Collapse this comment
Copy link
to be completely fair I at first did not spot the bug because my head converted these objects to pointers. I know this is for example purposes but creating an object on the stack and then adding it to a linked list that is implemented using pointers (duh) is such a strange thing for me that my mental parser missed this to begin with.





Raymond Chen Author
August 20, 2024


  0  Collapse this comment
Copy link
They don’t have to be created on the stack. You can do new node(...) to create a node and attach it to an existing linked list.





Akash Bagh  August 24, 2024


  0  Collapse this comment
Copy link
this comment has been deleted.



Jyrki Vesterinen  August 19, 2024


  0  Collapse this comment
Copy link
I don’t see copy elision as all that important. It’s just a performance optimization.





Uli Gerhardt  August 20, 2024


  2  Collapse this comment
Copy link
Not in this case. It’s about the identity of the returned object because it’s address is stored.





Stuart Ballard  August 20, 2024


  1  Collapse this comment
Copy link
Thank you for pointing (no pun intended) this out! It's a really key point that's easy to miss from the way the article is written.
Seems like this might be a case for separating the allocation from the initialization - have just a single constructor, that always assigns the pointers to null or to this, and then use instance methods to connect it up, like
<code>
Or be a bit cleverer and make it connect entire lists together:
<code>
Read moreThank you for pointing (no pun intended) this out! It’s a really key point that’s easy to miss from the way the article is written.
Seems like this might be a case for separating the allocation from the initialization – have just a single constructor, that always assigns the pointers to null or to this, and then use instance methods to connect it up, like
void insert_before(node* other)
{
   prev = other->prev;
   next = other;
   other->prev = this;
   prev->next = this;
}
Or be a bit cleverer and make it connect entire lists together:
void insert_before(node* other)
{
   other->prev->next = next;
   next->prev = other->prev;
   other->prev= this;
   next = other;
}
Read less