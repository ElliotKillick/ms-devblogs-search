Florian Schneidereit  October 5, 2019


  0  Collapse this comment
Copy link
Since we’re into dependency properties, maybe Raymond can elaborate on why the UWP implementation is missing handy features like property value coercion. The workarounds I heard of are either complex, or break binding scenarios.





Joe Beans  October 5, 2019


  0  Collapse this comment
Copy link
UWP is a crippled clone of Silverlight which was already a crippled version of WPF missing coercion and a bunch of other things. Even so, it was still insulting to see the Surface Duo running Android instead of UWP. Blaming app support is a hilarious reason to shelve Windows 10 for a joke OS from a lazy competitor whose products look like high school projects; with MS tooling you only need a team of maybe 5 good programmers to write all the apps a mobile device needs. I could even find them for you. You could have made bank for pennies.





Florian Schneidereit  October 6, 2019


  0  Collapse this comment
Copy link
Yes, I know it is kind of a crippled Silverlight, but maybe Raymond can explain why they designed it like that, and not as powerful as WPF.
App support is indeed a problem. Windows Mobile suffered and eventually died from it. One problem is that PWA never really took of, or still it takes too much time and the outcome is uncertain. If the Top-20-Apps from Android/iOS would all be ready as PWA - putting Windows 10X on a device like the Surface Duo would start to make sense, because at this point it doesn't matter that native versions of these...Read moreYes, I know it is kind of a crippled Silverlight, but maybe Raymond can explain why they designed it like that, and not as powerful as WPF.
App support is indeed a problem. Windows Mobile suffered and eventually died from it. One problem is that PWA never really took of, or still it takes too much time and the outcome is uncertain. If the Top-20-Apps from Android/iOS would all be ready as PWA – putting Windows 10X on a device like the Surface Duo would start to make sense, because at this point it doesn’t matter that native versions of these apps are missing, they would be readily available as PWA.
And TBH, most UWP apps don’t look and work better than a high school project, either.
Read less







Joe Beans  October 10, 2019


  0  Collapse this comment
Copy link
If MS had put the effort into mobile that they did with console gaming, they would have won. You only had to have a mustard seed of vision and you would have seen it. The tile/flat UI system looked better and was less work. But UWP was never given a complete set of desktop UI controls so there was never a bridge to adoption. Mobile and desktop were under digital apartheid literally isolated to separate XAML universes with no mixing. If you're doing MVVM right, almost all of your code is in the viewmodels anyway so the XAML facade should...Read moreIf MS had put the effort into mobile that they did with console gaming, they would have won. You only had to have a mustard seed of vision and you would have seen it. The tile/flat UI system looked better and was less work. But UWP was never given a complete set of desktop UI controls so there was never a bridge to adoption. Mobile and desktop were under digital apartheid literally isolated to separate XAML universes with no mixing. If you’re doing MVVM right, almost all of your code is in the viewmodels anyway so the XAML facade should be easy to swap, unless you have nothing to swap it with.
Read less





pete.d  October 4, 2019


  0  Collapse this comment
Copy link
"clients can assign or bind a custom collection" -- but, with the same restriction noted previously: that with this design, it won't be possible to set the property value in a style or other lower-precedence scenarios.
IMHO it is instructive to look at the framework's  design. In particular, it offers two different properties:  and . If you want to use the "implicit collection" syntax above, you have to use . It's read-only, so you can only use the "implicit" syntax with this property (in XAML...of course you can add items in code-behind too). If you want to provide your...Read more“clients can assign or bind a custom collection” — but, with the same restriction noted previously: that with this design, it won’t be possible to set the property value in a style or other lower-precedence scenarios.
IMHO it is instructive to look at the framework’s ItemsControl design. In particular, it offers two different properties: Items and ItemsSource. If you want to use the “implicit collection” syntax above, you have to use Items. It’s read-only, so you can only use the “implicit” syntax with this property (in XAML…of course you can add items in code-behind too). If you want to provide your own collection object, either through the “explicit” syntax or a binding, you have to use ItemsSource
With this design, all mechanisms are supported, but without the hazard of a non-null default property value for a mutable object, and without the limitations of forcing the property to always have a local value. For me, this is an excellent tradeoff, gaining a much clearer, less error-prone public interface (you get a run-time exception of you try to use both properties at the same time, so it forces you to avoid creating subtle, hard-to-find bugs), at the expensive of an inconsequentially redundant property (one or the other of these properties will pretty much always go unused).
Read less