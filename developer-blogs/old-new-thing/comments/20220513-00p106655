Jan Ringoš  May 17, 2022


  0  Collapse this comment
Copy link
I am big a fan of: delete p; also means p = nullptr;
Even if just yesterday I fixed a code which precisely that behavior would break. MSVC warning nudged me to do it.





Alexis Ryan  May 16, 2022


  0  Collapse this comment
Copy link
I’m not super familiar with modern c++ so these series about modern features are super useful particularly when some part of a feature I just learnt about exactly solves a problem i encountered writing my code





Jacob Manaker  May 13, 2022
· Edited

  0  Collapse this comment
Copy link
An even oner liner:
void reset(T*&& ptr = nullptr)
{
    if (T* old_ptr = std::exchange(m_ptr, std::exchange(ptr, nullptr))) get_deleter()(old_ptr);
}
 (yes, I may have an unhealthy addiction to concision).





Neil Rashbrook  May 14, 2022


  0  Collapse this comment
Copy link
If only the deleter was required to be no-op on a nullptr parameter you would have been able to reduce that further to
void reset(T*&& ptr = nullptr)
{
    get_deleter()(std::exchange(m_ptr, std::exchange(ptr, nullptr)));
}




Adam Rosenfield  May 13, 2022


  0  Collapse this comment
Copy link
I’d guess that there are also apps out there that delete a pointer, allocate a new object of the same type, and then accidentally reuse the previously deleted pointer (UB) as an alias for the newly allocated object which just happens to occupy the same storage location by chance.  (Not too unlike the old story about SimCity on Windows 95.)