Flux  August 5, 2020


  0  Collapse this comment
Copy link
I remember there was a time when Microsoft actively tried to avoid names that, once abbreviated, became the joke of the day. (Even today, things like Cortana and Edge are exceptions instead of being representatives of Microsoft naming practices.) Back then, nobody would call the app certification framework something that could be read “wack”, as in “a thing or things that are unsatisfactory, worthless, or of low quality”. But of course, Microsoft Store apps already have a reputation for being wacky. I just never thought they were truly WACKy.





Adam Rosenfield  August 5, 2020


  0  Collapse this comment
Copy link
I’m assuming that prior to that change, the WACK only did a runtime check to see if actual calls to FormatMessage() included that flag, since otherwise they’d need to solve the halting problem.  Thus if a clever program that defined the flag itself and did something to detect if it was running under test like:
if (!RunningUnderWack()) {
    // Use FORMAT_MESSAGE_ALLOCATE_BUFFER
}
then it could work around this policy.  Of course this is all moot now that the policy was changed to allow it.





Joshua Hudson  August 5, 2020


  0  Collapse this comment
Copy link
This is all moot until they permit dynamic compilation on the Windows Store anyway.