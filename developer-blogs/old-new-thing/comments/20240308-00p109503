Markus Schaber  March 11, 2024


  0  Collapse this comment
Copy link
That’s why C++ should rest in peace. Rust would be an alternative – there, the compiler actively enforces this kind of correctness, instead of requiring the user to manually force copies of values.





Me Gusta  March 11, 2024
· Edited

  0  Collapse this comment
Copy link
Just to be clear, Rust forces a copy of a variable into a function that you marked as pass by reference?
If not, is it something else, like Rust can look far enough ahead to and sees that there is a potential resource violation and then does a surprising copy of a variable into a function that is marked as pass by reference?





Bruno Liron  March 11, 2024


  0  Collapse this comment
Copy link
I have almost no experience in Rust so don’t trust me too much on that, but in this case, I think the Rust compiler would check if the variable’s lifetime is greater than the reference’s lifetime, and if it isn’t, it would throw a compile error.





Kevin Norris  March 12, 2024


  0  Collapse this comment
Copy link
Yes, Rust will fail to compile a closure that tries to borrow an object which does not outlive the closure. Here’s a simple example of that error. It also suggests moving the value into the closure by prefixing it with the “move” keyword.



Henk de Koning  March 9, 2024


  0  Collapse this comment
Copy link
Deep. Thanks!