Paulo Pinto  September 11, 2023


  0  Collapse this comment
Copy link
Another good example of the pain that is to deal with COM during the decades, with multiple library reboots, and those examples are missing the interop issues with .NET and VB6, on the same context of transfering ownership.
One would expect the tooling to have improved, with so many approaches on how to do COM from C++.





Markus Schaber  September 10, 2023


  0  Collapse this comment
Copy link
There’s the advantage of modern languages like Rust: They have the same power, but with simpler syntax (because it hasn’t been bolted into the language as an afterthought), and the compiler guarantees that you cannot make those mistakes, because ownership and transferring it are concepts of the language, not just convention.





Neil Rashbrook  September 9, 2023


  0  Collapse this comment
Copy link
In the smart pointer library that I'm most used to, the default is to get (via a cast operator) and copy, and if you want to detach, you end up with a templated type which when assigned to the smart pointer automatically attaches. There's also a method to detach into a recipient, which is the preferred way to populate one, although one of the ways you can still mess things up is by assigning it manually. There is no address-of operator, but there is a global template class which takes a smart pointer and has a cast operator that returns...Read moreIn the smart pointer library that I’m most used to, the default is to get (via a cast operator) and copy, and if you want to detach, you end up with a templated type which when assigned to the smart pointer automatically attaches. There’s also a method to detach into a recipient, which is the preferred way to populate one, although one of the ways you can still mess things up is by assigning it manually. There is no address-of operator, but there is a global template class which takes a smart pointer and has a cast operator that returns a recipient.
Read less