Jonathan Duncan  June 16, 2021
· Edited

  0  Collapse this comment
Copy link
A couple (perhaps) interesting observations:
Although there is both bl label and blx label instructions there is only blx reg, presumably because the address lsb in the register can tell you if you’re exchanging or not.
On the push {r4, lr} / pop {r3, pc} thing the 16bit compact encoding uses the same bit to indicate lr and pc, so the “pop registers and return in one” thing isn’t just a good idea, its the law. The “wide” encoding of pop does however allow you to pop into lr if you so wish.





Alex Martin  June 15, 2021
· Edited

  0  Collapse this comment
Copy link
Is the full-width ARM instruction set actually disabled, or just “you’re not supposed to?” If the latter, which seems more likely, that might explain the question from before of why Windows bothers to disable swp. Some maniacal programmer who’s dead-set on breaking ABI rules could theoretically bx into full-width ARM and encode the deprecated instructions that way.
Not that any of this is important or relevant to anything…





Aaron Giles  June 15, 2021


  0  Collapse this comment
Copy link
You can’t disable the original ISA, so it is just actively discouraged. However, there are some paths in the OS (exception handling is one) which presume Thumb-2, so you’re definitely playing with fire if you try to run “classic” ARM code under Windows.





Raymond Chen Author
June 15, 2021
· Edited

  0  Collapse this comment
Copy link
Some CPU features can be outright disabled in the control registers. Others are prohibited by convention. The purpose of these processor introduction series is to learn enough to read compiler-generated output, and the compiler is going to abide by convention. Therefore, if you see swp or some other prohibited operation, that’s your clue that you may be disassembling data as code.