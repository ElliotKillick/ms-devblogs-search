Dmitry  March 1, 2024
¬∑ Edited

  0  Collapse this comment
Copy link
After reading that ‚ÄùC++ with the standard library is a non-disastrous language‚Äù I was going to write that at least 7 billion people would argue that and Raymond sometimes has not only social skills of a thermonuclear device (as we all now from his blog posts) but sense of humour of the same kind as well.
And then I saw the footnote.





Joshua Hudson  February 28, 2024


  0  Collapse this comment
Copy link
COM is a disaster.
The only part of COM that should ever have existed was the fake COM created for Windows 95 while they were playing COM chicken; and the only reason that needs to exist is for shell plugins.
The entire rest of COM is dead weight; and any time a developer encounters it it means Microsoft designed the API surface wrong. These random COM APIs for windowing functions (application icon/prevent pinning/multi-desktop support) should be replaced outright. Not wrapped, replaced. Make the COM API call the replacement, and the replacement live in User32.dll and not depend on any part of COM...Read moreCOM is a disaster.
The only part of COM that should ever have existed was the fake COM created for Windows 95 while they were playing COM chicken; and the only reason that needs to exist is for shell plugins.
The entire rest of COM is dead weight; and any time a developer encounters it it means Microsoft designed the API surface wrong. These random COM APIs for windowing functions (application icon/prevent pinning/multi-desktop support) should be replaced outright. Not wrapped, replaced. Make the COM API call the replacement, and the replacement live in User32.dll and not depend on any part of COM in any way.
Read less







Joe Beans  March 1, 2024


  0  Collapse this comment
Copy link
COM has been used to publish undocumented features as interfaces that have to be discovered using other means than simply dumping DLL exports. Two examples that come to mind are IPolicyConfig and IApplicationView.





alan robinson  February 29, 2024


  0  Collapse this comment
Copy link
While I mostly agree with you, your statement is very much unsubstantiated opinion. Giving some actual examples of why COM is the worst way to provide functionality would make your point a lot more compelling and debatable.
Continuing the opinion based attacks on COM for a second*, the reason I don‚Äôt like it is how much work it is to call from vanilla C/C++ or even MFC as compared to the dead** simple win32 API.
* yes I see the irony
** reports of it‚Äôs death are hopefully quite exaggerated.





Paulo Pinto  March 6, 2024


  0  Collapse this comment
Copy link
C++/CX was a sweet spot, finally Microsoft had something that could rival C++ Builder in productivity for Windows desktop applications in C++, including COM authoring.
It was killed by a group of folks clamouring language extensions are bad, for a technology that isn‚Äôt portable to other platforms to start with, and strangely the same group doesn‚Äôt have any issues using language extensions on other C++ compilers.





Joe Beans  March 1, 2024


  0  Collapse this comment
Copy link
What really sucks is how COM is called from C#. On the one hand it‚Äôs nice that every typecast is an implicit QueryInterface call. On the other hand, the rules for calling Marshal.ReleaseComObject() are shady and usually result in crashes. And worse, you‚Äôre not allowed to use interface inheritance, so every time you define a derived interface you have to re-declare all the inherited methods with it.





Joshua Hudson  March 1, 2024


  0  Collapse this comment
Copy link
It's the memory model constraints. I've had too many cases of having to launch another thread or even another process because something was only exposed as a COM API. And then I have to link in a COM support library or a reference library that I simply don't need but trying to get rid of is too much work. And now I'm calling APIs that don't exist on server core so I have to deal with that too.
The things like app pinning path/no pin should have been SetProp() not a shell COM invocation.
Most of the Windows Update COM APIs should...Read moreIt‚Äôs the memory model constraints. I‚Äôve had too many cases of having to launch another thread or even another process because something was only exposed as a COM API. And then I have to link in a COM support library or a reference library that I simply don‚Äôt need but trying to get rid of is too much work. And now I‚Äôm calling APIs that don‚Äôt exist on server core so I have to deal with that too.
The things like app pinning path/no pin should have been SetProp() not a shell COM invocation.
Most of the Windows Update COM APIs should have been dism commands.
Read less






Raymond Chen Author
February 29, 2024


  0  Collapse this comment
Copy link
The examples you give (application icon, prevent pinning, multi-desktop) aren‚Äôt features of user32, so why should user32 export them?





Joshua Hudson  February 29, 2024


  0  Collapse this comment
Copy link
1) Because accessing them shouldn‚Äôt impose a thread model that persists after the call finishes.
2) Because it ought not to import shell32 into the calling process that wouldn‚Äôt otherwise have it, and definitely shouldn‚Äôt start importing any shell plugin dlls.
3) Because the shell ought to be a replaceable component. It‚Äôs not the rock solid shell we used to have fifteen years ago. I should be able to actually use the registry key for replace shell to do something useful rather than render half of the windows configuration screens unusable and have no possibility of providing multi-desktop support.





Joe Beans  March 1, 2024


  0  Collapse this comment
Copy link
The shell functionality should be a per-user service. Right now there are a bunch of things you can‚Äôt do unless explorer.exe is running as ‚Äúthe shell‚Äù. Particularly, UWP apps stop working and PIDL update events (SHChangeNotify) don‚Äôt get broadcast. Plus there‚Äôs something internal and weird about the way explorer cloaks windows to make ‚Äúvirtual desktops‚Äù work that can‚Äôt really be reproduced. Cheesy.



Á¥ÖÊ®ìÈçÆ  February 28, 2024
¬∑ Edited

  0  Collapse this comment
Copy link
Rust has , which decreases the refcount but, if the refcount drops to 0, moves the value out of the heap (returning it to the caller) instead of destroying it. You can then do whatever you want with the value you've got. The object identity has changed (it has been moved out of where it was stored, and of course weakrefs have been disconnected), but in 99% of the cases you don't care about object identity; you simply care that the value is still there and can be recycled for profit (if anything you do specifically requires that the value...Read moreRust has Arc::into_inner, which decreases the refcount but, if the refcount drops to 0, moves the value out of the heap (returning it to the caller) instead of destroying it. You can then do whatever you want with the value you‚Äôve got. The object identity has changed (it has been moved out of where it was stored, and of course weakrefs have been disconnected), but in 99% of the cases you don‚Äôt care about object identity; you simply care that the value is still there and can be recycled for profit (if anything you do specifically requires that the value is inside an Arc, you can simply construct a new Arc and put the value back in).
Arc::into_inner is almost exactly what I meant when I mentioned how, in theory, final_release could‚Äôve been designed to be an object pooling mechanism. Of course, doing so soundly requires the weakref control block (WCB henceforth) to be disconnected, and a new WCB to be allocated and attached, so it‚Äôs really not the same COM object any more; but again, you usually don‚Äôt care about object identity.
PS: Note how the requirement for object pooling with final_release is that the existing WCB needs to be disconnected, and then a new WCB attached; in reality, final_release already disconnects the existing WCB (it‚Äôs required for correctness), so what needs to be added is simply a new function
namespace winrt {
  template <typename T> requires { /* ... */ }
  winrt::com_ptr<T>
  as_com(std::unique_ptr<T> the_thing_you_get_from_final_release);
}
which takes the std::unique_ptr<T> you get from final_release, attaches a new WCB, and returns a com_ptr which now points to a healthy (and new) COM object. final_release itself doesn‚Äôt actually need to be changed.
Read less







Neil Owen  February 28, 2024


  0  Collapse this comment
Copy link
I can agree that both COM and C++ are a disaster üòú, at least in the sense that the parts of C++ that necessitated the creation of COM are a disaster (such a lack of a binary standard). COMs main problem to me is that it tries to solve way too many problems with one giant solution (common binary interface, object lifetime, cross-process communication, cross-computer communication, threading models, etc). This makes it complicated, difficult to learn, and it's so tied together and integrated it's difficult for it to really move forward as other technologies and ideas have advanced. That said,...Read moreI can agree that both COM and C++ are a disaster üòú, at least in the sense that the parts of C++ that necessitated the creation of COM are a disaster (such a lack of a binary standard). COMs main problem to me is that it tries to solve way too many problems with one giant solution (common binary interface, object lifetime, cross-process communication, cross-computer communication, threading models, etc). This makes it complicated, difficult to learn, and it‚Äôs so tied together and integrated it‚Äôs difficult for it to really move forward as other technologies and ideas have advanced. That said, Object Resurrection seems like a terrible idea, so supporting it isn‚Äôt really a point in it‚Äôs favor. The ‚Äúthis framework allows me to do really terrible things‚Äù isn‚Äôt really a great argument for it not being a disaster.
Read less







gast128  March 7, 2024


  0  Collapse this comment
Copy link
COM is a specification for component development. It isn't a big specification either; the book 'Inside COM' from Dale Rogerson covers the most important aspects in a reader friendly way. Getting the reference counting correct used to be a challenge but with smart pointers (e.g. CComPtr) one can hardly go wrong these days. Apartments o.t.h. are still misty and counterproductive amplified by conflicting or confusing documentation.
For me C++is not a disaster though I am not a fan of all the bells and whistles (e.g. fold expressions) added to it lately. Agree that a separate binary / component interface would be...Read moreCOM is a specification for component development. It isn‚Äôt a big specification either; the book ‚ÄòInside COM‚Äô from Dale Rogerson covers the most important aspects in a reader friendly way. Getting the reference counting correct used to be a challenge but with smart pointers (e.g. CComPtr) one can hardly go wrong these days. Apartments o.t.h. are still misty and counterproductive amplified by conflicting or confusing documentation.
For me C++is not a disaster though I am not a fan of all the bells and whistles (e.g. fold expressions) added to it lately. Agree that a separate binary / component interface would be nice for the C++ standard though not sure how that works out with a heavy templated standard library. The C++ committee half-baked decision to freeze parts because of an implicit binary interface stops progression and bug fixing.
Read less







Paulo Pinto  March 6, 2024


  0  Collapse this comment
Copy link
What makes COM a disaster is Microsoft lack of willigness to provide good tooling for using it, similar to how C++ Builder extensions. There was a timid effort with C++/CX that was killed due to internal politics in name of "portability" for what is and will remain a Windows only technology.
That after 30 years COM tooling still lags behing similar technologies on other platforms (XPC, AIDL, D-BUS), despite its surface exposure in Windows APIs, is quite telling on how Microsoft values the experience of using COM.
The problem isn't COM by itself, rather how its development experience has been managed.
Read moreWhat makes COM a disaster is Microsoft lack of willigness to provide good tooling for using it, similar to how C++ Builder extensions. There was a timid effort with C++/CX that was killed due to internal politics in name of ‚Äúportability‚Äù for what is and will remain a Windows only technology.
That after 30 years COM tooling still lags behing similar technologies on other platforms (XPC, AIDL, D-BUS), despite its surface exposure in Windows APIs, is quite telling on how Microsoft values the experience of using COM.
The problem isn‚Äôt COM by itself, rather how its development experience has been managed.
Read less







Á¥ÖÊ®ìÈçÆ  February 28, 2024
¬∑ Edited

  0  Collapse this comment
Copy link
...the parts of C++ that necessitated the creation of COM are a disaster (such a lack of a binary standard)
Many consider not constantly breaking the ABI to be one of C++'s original sins (search: ), and many of them admire Rust's complete lack of ABI stability outside of designated FFI types.
Actually, most languages don't have a stable ABI for non-FFI types; for those languages, the impact of the lack of a stable ABI is usually small because most libraries are open source and compiled from source (or at least an intermediate form, such as CIL for .NET).
Read more‚Ä¶the parts of C++ that necessitated the creation of COM are a disaster (such a lack of a binary standard)
Many consider not constantly breaking the ABI to be one of C++‚Äôs original sins (search: std::regex), and many of them admire Rust‚Äôs complete lack of ABI stability outside of designated FFI types.
Actually, most languages don‚Äôt have a stable ABI for non-FFI types; for those languages, the impact of the lack of a stable ABI is usually small because most libraries are open source and compiled from source (or at least an intermediate form, such as CIL for .NET).
Read less







Stuart Ballard  February 28, 2024


  0  Collapse this comment
Copy link
Seems to me the issue is that object resurrection is in the weird middle ground of being unsupported and (almost always) broken, but not actually impossible - and in particular, all too possible to do accidentally.
If there were a way for an object to explicitly tell the framework/runtime/infrastructure something to the effect of "hey, I know I was about to destruct, but actually I changed my mind, resurrect me", then the infrastructure could also provide well defined answers to all the corner cases and tradeoffs. Conversely, if the language had something like Rust's language-level ownership and lifetime tracking, the compiler...Read moreSeems to me the issue is that object resurrection is in the weird middle ground of being unsupported and (almost always) broken, but not actually impossible ‚Äì and in particular, all too possible to do accidentally.
If there were a way for an object to explicitly tell the framework/runtime/infrastructure something to the effect of ‚Äúhey, I know I was about to destruct, but actually I changed my mind, resurrect me‚Äù, then the infrastructure could also provide well defined answers to all the corner cases and tradeoffs. Conversely, if the language had something like Rust‚Äôs language-level ownership and lifetime tracking, the compiler could enforce that resurrection can‚Äôt happen.
Since neither of those things apply, we end up in a world where objects can get into this weird limbo half-destructed state that there‚Äôs no good way to resolve or escape from.
Read less