Sigge Mannen  February 12, 2022


  0  Collapse this comment
Copy link
Is it allowed to have nested aggregation? Ie, the inner object itself aggregates other objects and exposes interfaces that outer object doesn’t know about?
In that case, wouldn’t it require the most outer IUnknown to send all interface-requests to the non-delegating unknown?





Raymond Chen Author
February 12, 2022


  0  Collapse this comment
Copy link
Yes it is allowed. The rule is the same for single and nested aggregation: The outer IUnknown decides which interfaces of the inner object it wants to aggregate.





Sigge Mannen  February 13, 2022


  0  Collapse this comment
Copy link
So, let’s say we have a following Object hierarchy: IOuterObject aggregates IInnerObject, and IInnerObject aggregates IInnerstObject.
Would it be correct behaviour that asking for IInnerstObject interface from IOuterObject fail and asking for IInnerstObject from IInnerObject succeed?





Raymond Chen Author
February 13, 2022


  0  Collapse this comment
Copy link
You're confusing objects and interfaces. Say we have an outer object Outer that implements IOuter. It aggregates an inner object Inner that implements IInner, and the inner object in turn aggregates Innerst which implements IInnerst. The Outer object chooses which interfaces it wants to expose, and it could decide "I want to expose IOuter (from myself) and IInner (from my Inner), but nothing else." On the other hand Inner might say "I want to expose...Read moreYou’re confusing objects and interfaces. Say we have an outer object Outer that implements IOuter. It aggregates an inner object Inner that implements IInner, and the inner object in turn aggregates Innerst which implements IInnerst. The Outer object chooses which interfaces it wants to expose, and it could decide “I want to expose IOuter (from myself) and IInner (from my Inner), but nothing else.” On the other hand Inner might say “I want to expose both IInner (from myself) and IInnerst (from Innerst).” This is all legal. The only object that has access to Inner is Outer. (Not even Innerst has access to Inner, because the controlling unknown for Innerst is Outer.)
Read less





Felix Kasza  February 11, 2022
· Edited

  0  Collapse this comment
Copy link
Never mind COM aggregation — I am deeply grateful for the illuminating link you provided! Having read this valuable treatise, I must confess that I am still unsure whether my ex-boss is an “unknown superior” or indeed a direct descendant of Yog-Sothoth, but that surely is a failing of mine.
More importantly, the existence of Building 7 has been proven! “The twenty-third building, or Building 7 […]” states quite clearly that the building exists and that...Read moreNever mind COM aggregation — I am deeply grateful for the illuminating link you provided! Having read this valuable treatise, I must confess that I am still unsure whether my ex-boss is an “unknown superior” or indeed a direct descendant of Yog-Sothoth, but that surely is a failing of mine.
More importantly, the existence of Building 7 has been proven! “The twenty-third building, or Building 7 […]” states quite clearly that the building exists and that only five people (as of 1996) knew where it is. Apparently the controlling thingummies also offed the construction workers in job lots, and since nobody ever complained, they must all have been single, unemployed orphans …
Thanks again for the link, the text is hilarious!
Recommendation: Would laugh again, 9/10
Read less







Ivan K  February 11, 2022


  0  Collapse this comment
Copy link
punknownouter. just what i needed. You’re just what i needed, sang… someone??





Dennis Mabrey  February 10, 2022


  0  Collapse this comment
Copy link
I thought COM had an IWeakReference interface for solving reference cycles.   You have to forgive me it has been over 20 some years since I’ve seen any COM in my life.





Raymond Chen Author
February 11, 2022


  0  Collapse this comment
Copy link
IWeakReference is used by the Windows Runtime to represent weak references to objects derived from IInspectable. But classic COM objects don't derive from IInspectable. Furthermore, it always produces a weak reference to the outer object (because that is the point of aggregation: the outer object is the only identity the outside world sees), so it doesn't help the case where the outer object wants a weak reference to the inner object. And even if it...Read moreIWeakReference is used by the Windows Runtime to represent weak references to objects derived from IInspectable. But classic COM objects don’t derive from IInspectable. Furthermore, it always produces a weak reference to the outer object (because that is the point of aggregation: the outer object is the only identity the outside world sees), so it doesn’t help the case where the outer object wants a weak reference to the inner object. And even if it worked for aggregated inner objects, it is not an improvement. You “optimized out” a QueryInterface but replaced it with a Resolve+QueryInterface.
Read less






Henry Skoglund  February 10, 2022


  0  Collapse this comment
Copy link
Wasn’t COM Tear-offs just an implementation detail to save RAM and CPU time?
I remember experiencing COM Nirvana (on a beautiful spring day around the turn of the century) without ever using those ATL macros for creating Tear-offs.





GL  February 10, 2022
· Edited

  0  Collapse this comment
Copy link
Yes, tear-offs are an implementation detail. However, due to that possibility, COM denies the identity of differently obtained interfaces of the same object for reference-counting purposes. So
<code>
is incorrect as far as COM is concerned. That it sometimes works is an implementation detail.
Side question: Are tear-offs are just aggregation of things written by the same group of people?
Read moreYes, tear-offs are an implementation detail. However, due to that possibility, COM denies the identity of differently obtained interfaces of the same object for reference-counting purposes. So
IUnknown *pUnk; // initialized somewhere else
IFoo *pFoo;
pUnk->QueryInterface(IID_IFoo, (void **)&pFoo); // S_OK
pUnk->Release();
pUnk->Release(); // Oops!
is incorrect as far as COM is concerned. That it sometimes works is an implementation detail.
Side question: Are tear-offs are just aggregation of things written by the same group of people?
Read less