Matthew van Eerde (^_^)  June 19, 2023


  1  Collapse this comment
Copy link
If they thought
VERIFY_ARE_EQUAL(values.size(), (std::vector::size_type)0);
 was too unwieldy they’re going to really hate my suggestion of
VERIFY_ARE_EQUAL(values.size(), static_cast<std::vector::size_type>(0));





Georg Rottensteiner  June 19, 2023


  0  Collapse this comment
Copy link
Those extended C++ casts are a perfect anti-example of “make it easy to use and people will use it”. A bit too much of C++/STL went into code “elegance” and totally missed the convenience part. If it’s unwieldy people will avoid it.





Henke37  June 21, 2023


  0  Collapse this comment
Copy link
It’s meant to be annoying to use. Casts are a code smell.





a b  June 20, 2023
· Edited

  0  Collapse this comment
Copy link
They are unwieldy to be sure, but C-style casts (also used in C# and Java) are even worse because they require additional parentheses around the whole expression to access object’s members which pisses me off every time I need to add them.
I prefer this:
static_cast<Bar>(foo).doit()
Over this:
((Bar) foo).doit()





Richard Thompson  June 20, 2023


  0  Collapse this comment
Copy link
For constants casting is actually wrong, the suffix has to be used to avoid out-of-range errors.
Trouble is that people seem not to know about many of them.
The C++ variable casts are long for a reason - you read code more than write it, and the difference between each cast is quite large so you really need to be able to read it and know what's going on. static_cast et al are pronounceable and searchable.
Yes,...Read moreFor constants casting is actually wrong, the suffix has to be used to avoid out-of-range errors.
Trouble is that people seem not to know about many of them.
The C++ variable casts are long for a reason – you read code more than write it, and the difference between each cast is quite large so you really need to be able to read it and know what’s going on. static_cast et al are pronounceable and searchable.
Yes, it makes some edge cases feel a bit unwieldy, but in many cases that is also a hint that it’s not actually the right solution – like the numeric constant suffixes.
Read less






Dustin Howett  June 19, 2023
· Edited

  0  Collapse this comment
Copy link
Hey, at least you didn’t go for the slightly longer…
VERIFY_ARE_EQUAL(values.size(), static_cast<decltype(values)::size_type>(0));