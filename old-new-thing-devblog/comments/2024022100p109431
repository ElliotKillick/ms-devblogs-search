Joshua Hudson  February 21, 2024
· Edited

  0  Collapse this comment
Copy link
I've been thinking about the IMemoryBufferReference.Closed() event problem. I've come to the following conclusion:
1) Changing all extant implementations to free the buffer *after* the closed event should be a non-breaking change.
2) This would enable somebody who was previously trying to use it for cancel to actually work rather than accessing freed heap. This would allow the event receiver to block inside the closed event for the other thread to cancel. It's pretty ugly way to...Read moreI’ve been thinking about the IMemoryBufferReference.Closed() event problem. I’ve come to the following conclusion:
1) Changing all extant implementations to free the buffer *after* the closed event should be a non-breaking change.
2) This would enable somebody who was previously trying to use it for cancel to actually work rather than accessing freed heap. This would allow the event receiver to block inside the closed event for the other thread to cancel. It’s pretty ugly way to implement cancel but it’s better than nothing.
Now if the IMemoryBufferReference user is a thread pool work item we would have to do something exotic. The work item state would need a synchronization primitive (probably a CriticalSection) and we would need to hold it across everything but the co_await points. This does solve the block problem easily though. Set the context to cancel and enter the state machine call. One or the other blocks and everything proceeds. The problem with this is you *can’t* write this in C++ because of compiler limitations but if you expand out the definitions you should be able to write a thing in C that can be co_awaited.
Read less