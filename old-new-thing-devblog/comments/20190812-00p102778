Simon Clarkstone  August 12, 2019


  0  Collapse this comment
Copy link
I spent a while wondering why this seemed familiar, then I rememberd it is like the GreenArrays F18A's multiply-step instruction. It does a conditional add based on the bottom bit of a register and a shift of two registers joined together, so that you can multiply numbers by repeating the multiply-step instruction (though with NOPs in-between, because the multiply-step instruction has a preceding delay-slot, as does the addition instruction).
The F18A is a weird processor;...Read moreI spent a while wondering why this seemed familiar, then I rememberd it is like the GreenArrays F18A’s multiply-step instruction. It does a conditional add based on the bottom bit of a register and a shift of two registers joined together, so that you can multiply numbers by repeating the multiply-step instruction (though with NOPs in-between, because the multiply-step instruction has a preceding delay-slot, as does the addition instruction).
The F18A is a weird processor; it’s a grid of tiny microprocessors that pass data asynchronously. It was invented by Chuck Moore, the same guy who invented the early Forths (and IIRC distains ANSI Forth as too complex and over-generalised).
Read less







Julien Oster  August 20, 2019


  0  Collapse this comment
Copy link
That F18A thing is interesting. Whatever happened to it?




Zak Larue-Buckley  August 12, 2019


  0  Collapse this comment
Copy link
I’m just suprised there is a hardware divide at all. Thats quite a luxury!
How did it compare to a pure software integer divide in terms of cycles?





Fabian Giesen  August 12, 2019


  0  Collapse this comment
Copy link
From the description of the instructions, there isn't much of one! Getting one bit of quotient at a time is a tell-tale sign of the type of algorithm used: namely, a basic digit recurrence algorithm (either restoring or non-restoring). The main step in either variant is a single integer subtraction and a 1-bit shift per iteration. The subtraction is just a regular ALU operation; the shift register to record the quotient bits and the "glue...Read moreFrom the description of the instructions, there isn’t much of one! Getting one bit of quotient at a time is a tell-tale sign of the type of algorithm used: namely, a basic digit recurrence algorithm (either restoring or non-restoring). The main step in either variant is a single integer subtraction and a 1-bit shift per iteration. The subtraction is just a regular ALU operation; the shift register to record the quotient bits and the “glue logic” instructions to initially set up the divide do need some extra hardware, but by putting the responsibility of sequencing the division on the SW side, you get away with quite little extra hardware to support the division indeed!
Getting 1 cycle per quotient bit plus setup (for 32:16 divisions; 32:32 seem to work out to two cycles per bit plus setup) for this tiny number of extra HW is pretty solid! For comparison, the fastest pure SW divide routines based on digit-recurrence for the old ARMs (which didn’t have dividers) I know came out around 3 cycles per quotient bit (plus setup). Then a bit later (starting around ARM7TDMI or maybe it was ARM9E?) they had fairly fast multipliers but still no dividers and the best way to do large divisions used a multiply-based Newton-Raphson iteration. Still came out above 1 cycle/bit for most cases though. (And really leaned on the fast multiplier to do so.)
Read less