Thiago Macieira  December 26, 2022


  1  Collapse this comment
Copy link
If you go back further on that table on Wikipedia, you can find out why the compiler version is at the large numbers now: it's an unbroken sequence going all the way back to the DOS-based and often pre-C++ Microsoft C compilers, My first C compiler ever was Microsoft C/C++ Compiler 7.0, which was a DOS executable with DPMI requirements because 640 kB was not enough. That means I mostly launched Windows 3.1 so I...Read moreIf you go back further on that table on Wikipedia, you can find out why the compiler version is at the large numbers now: it’s an unbroken sequence going all the way back to the DOS-based and often pre-C++ Microsoft C compilers, My first C compiler ever was Microsoft C/C++ Compiler 7.0, which was a DOS executable with DPMI requirements because 640 kB was not enough. That means I mostly launched Windows 3.1 so I could open a DOS prompt so I could run the compiler.
The next highest number is the product version, which is the unbroken line of Visual C++ version numbers. It was simply the C++ compiler version minus 6, but since MS skipped Visual C++ 13.0, that dropped to 5. Then around v14 and VIsual Studio 2015, something happened.
Starting with Visual Studio 2017 and VC++ 15.x, Microsoft stopped breaking binary compatibility with each release. Instead, all new binaries are binary-compatible with VC++ 14.0, which is why the toolset is still 14.x and why the MS Visual C++ runtime DLL is also version 140 (msvcp140.dll). This is a good thing, for those of us who need to deal with one binary release for multiple customers: we can build using the oldest still relevant release and anyone who has a newer version is properly supplied. And it happens outside of Windows and Microsoft products too: think that GCC 12 comes with libstdc++.so.6 (full version is 6.0.30) because that retains compatibility with the first GCC that released libstdc++.so.6.
No, that was not GCC 6. That was 3.4. So having weird version numbers is not exclusive to Microsoft either.
Bonus chatter: you will also not find “6.0.30” anywhere in the GCC sources.
Read less







Miroslav Župa  December 23, 2022


  1  Collapse this comment
Copy link
I think compiler minor version and toolchain minor version being tied is not a coincidence, but a conscious effort. If I was responsible for this, and I didn't have any reason to break this convention, then I would keep it for as long as I could.
One thing worth a mention might be the reason why there are only v14x toolset/toolchain versions and 19xx compiler versions mentioned in this blog post. This is because all these...Read moreI think compiler minor version and toolchain minor version being tied is not a coincidence, but a conscious effort. If I was responsible for this, and I didn’t have any reason to break this convention, then I would keep it for as long as I could.
One thing worth a mention might be the reason why there are only v14x toolset/toolchain versions and 19xx compiler versions mentioned in this blog post. This is because all these versions share ABI. When/if ABI break occurs in the future, we will likely see major version bump to v15x for toolset and 20xx for compiler.
Read less







Krzysztof Kawa  December 20, 2022


  0  Collapse this comment
Copy link
Was there ever any effort started internally to unify these numbering schemes? Since the VS name has the highest number anyway it would seem to be pretty easy to line them up without breaking any backward compatibility. Some schemes would just need to make a little jump every now and then, but they seem to be doing that anyway, so wouldn't be a problem.
For example:
Visual Studio 2025
Product: 2025.01
Toolset: v250
msvcp: 250
msvcruntime:...Read moreWas there ever any effort started internally to unify these numbering schemes? Since the VS name has the highest number anyway it would seem to be pretty easy to line them up without breaking any backward compatibility. Some schemes would just need to make a little jump every now and then, but they seem to be doing that anyway, so wouldn’t be a problem.
For example:
Visual Studio 2025
Product: 2025.01
Toolset: v250
msvcp: 250
msvcruntime: 250
Toolchain: 25.01
_MSC_VER: 2501
_MSC_FULL_VER: 2501xxxxx
Compiler: 25.01.xxxxx
Or are the owners of all these schemes just not interested enough in making this easier?
Read less