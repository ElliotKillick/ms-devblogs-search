Jonathan Duncan  June 2, 2020


  0  Collapse this comment
Copy link
Shouldnt the library create its own thread/pool and just offload work to that, either switching to an async api or pretending to be a synchronous api by waiting for the async work to complete.





Raymond Chen Author
June 2, 2020


  0  Collapse this comment
Copy link
The function may perform operations with thread affinity. There are the obvious ones, like manipulating UI objects and asynchronous I/O, but also subtle ones like impersonation, locale, language settings, I/O completion port saturation…




紅樓鍮  June 2, 2020


  0  Collapse this comment
Copy link
Why don’t they ask the calling code for a fiber via a function parameter?





Joshua Hudson  June 1, 2020


  0  Collapse this comment
Copy link
Every time I look at fibers I think maybe that'll be useful sometime. With good async I/O it probably will be. But can't use it in managed languages so what's the point investigating as it won't make production.
You can grow the stack at create time with ConvertThreadToFiber/ConvertFiberToThread, but please don't. In the rare case of writing a native library with a worker thread I usually bother to give it a tiny stack. (I've been assuming...Read moreEvery time I look at fibers I think maybe that’ll be useful sometime. With good async I/O it probably will be. But can’t use it in managed languages so what’s the point investigating as it won’t make production.
You can grow the stack at create time with ConvertThreadToFiber/ConvertFiberToThread, but please don’t. In the rare case of writing a native library with a worker thread I usually bother to give it a tiny stack. (I’ve been assuming 24k for kernel32 functions and worker threads rarely need to call anything else).
Read less