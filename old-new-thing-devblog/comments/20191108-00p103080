gast128  November 13, 2019


  0  Collapse this comment
Copy link
We needed something like this a couple of years ago. Basically if the GUI was too busy with painting, the timer message didn't came through since WM_PAINT has a higher priority. We then switched to multimedia timers with the additional architectural overhead of getting the message in the GUI thread. Unfortunately that gave us a bug report since it has only a limited time range and sometimes the application had to wait for a longer...Read moreWe needed something like this a couple of years ago. Basically if the GUI was too busy with painting, the timer message didn’t came through since WM_PAINT has a higher priority. We then switched to multimedia timers with the additional architectural overhead of getting the message in the GUI thread. Unfortunately that gave us a bug report since it has only a limited time range and sometimes the application had to wait for a longer period. We now use a timer queue as recommended by MSDN but things would have been simple if there was just a high(er) priority WM_TIMER message.
Read less







Vadim Zeitlin  November 9, 2019


  0  Collapse this comment
Copy link
Is PM_NOREMOVE really necessary here or is it used just for convenience of not having to process the timer message right here? I.e. will a message be still synthesized if this flag is omitted?





Raymond Chen Author
November 9, 2019


  0  Collapse this comment
Copy link
It’s just for the convenience of not having to process it now and avoid having two different code paths for timer messages. The message is left in the queue for the message pump to deal with, as if it were generated in the conventional manner.




aidtopia  November 8, 2019


  0  Collapse this comment
Copy link
This feels like we’re depending on non-contractual behavior, specifically, that the PeekMessage will synthesize an actual entry and stuff it in the queue if some “timer-expired” flag is set.  I could imagine implementations that don’t do it that way, e.g., just fill out the MSG and leave the “timer-expired” flag alone.  I don’t see anything in PeekMessage’s documentation that seems to promise the behavior this relies on.





SpecLad  November 8, 2019


  0  Collapse this comment
Copy link
I think that if your application is well-written, it will still work even if PeekMessage doesn’t put a real message in the queue. It just won’t update the UI in time.





Raymond Chen Author
November 8, 2019


  0  Collapse this comment
Copy link
PeekMessage synthesizes create-on-demand messages as necessary. A large category of apps (apps that use solely PeekMessage and never GetMessage) rely on this.