Кирилл Ярин

2 weeks ago

  0  Collapse this comment
Copy link
I wish I could ask this under “Can INI files be Unicode?” post on 2024-06-06, but discussion is closed over there.
Why batch files (.bat and .cmd) can not be UTF-16?





Dos Moonen  October 11, 2024


  0  Collapse this comment
Copy link
The next C standard after C23 will include N3366 – Restartable Functions for Efficient Character Conversions
So now C++ can build upon those functions





Christian Chung  October 9, 2024


  0  Collapse this comment
Copy link
Does anywhere online have a place for finding these types of things? I’ve never even heard of LCMapStringEx until now





IS4  October 9, 2024


  0  Collapse this comment
Copy link
The solution is not to use C++. Use C# which standardizes all these conversions!





alan robinson  October 9, 2024


  2  Collapse this comment
Copy link
A lot of this discussion misses in my mind the most important use case. 99.9% of the time or maybe more that I use a to lower or to upper function it's because I want to do case insensitive comparison.  Given the potentials for multiple mappings revealed in the comments it seems like rather than combining two functions to do this we really should be using a standard compare case insensitive method that works...Read moreA lot of this discussion misses in my mind the most important use case. 99.9% of the time or maybe more that I use a to lower or to upper function it’s because I want to do case insensitive comparison.  Given the potentials for multiple mappings revealed in the comments it seems like rather than combining two functions to do this we really should be using a standard compare case insensitive method that works across all UTF encodings and locales, or even a more permissive fuzzy match method that ignores whitespace.
Read less







Kevin Norris  October 10, 2024


  0  Collapse this comment
Copy link
The correct way to do this is to use the Unicode standard's CaseFolding.txt file, or more likely a library that wraps it and makes it ergonomic to use, such as ICU.
If you also want to deal with other problems of "this string looks similar/identical to that string, but they're not the same characters," then you're probably looking for NFD/NFKD normalization, which should be applied after case folding since case folding may reintroduce non-normalized characters. Use...Read moreThe correct way to do this is to use the Unicode standard’s CaseFolding.txt file, or more likely a library that wraps it and makes it ergonomic to use, such as ICU.
If you also want to deal with other problems of “this string looks similar/identical to that string, but they’re not the same characters,” then you’re probably looking for NFD/NFKD normalization, which should be applied after case folding since case folding may reintroduce non-normalized characters. Use NFD if you just want to make combining and precomposed accents equivalent, or NFKD if you also want to eliminate distinctions like circled numerals, fancy mathematical scripts, or non-breaking spaces. NFD is suitable for use on strings that will be displayed (case folding is not). NFKD is (generally) suitable for cases where your users are not trying to do weird things, such as typing formatted text into a plain text field using the mathematical symbols block.
If you’re dealing with “somebody is intentionally trying to construct strings that look like other strings, but are actually different, and that represents a security issue,” then you need to apply a Confusables check, which works differently but resembles a significantly more aggressive variation of NFKD (i.e. it is aggressive enough that the text may be rendered functionally illegible, so you should only use it for comparison purposes and never try to display it to the user). ICU has the class SpoofChecker for this. Its main use case is the URL bar of a web browser (to detect domain names with funny Unicode characters that pretend to be other domains for phishing purposes).
Read less






Frank Schmitt  October 8, 2024


  1  Collapse this comment
Copy link
Germans decided in 2017 that converting ß into SS is stupid and officially started to use a capital letter version:
ẞU+1E9ELATIN CAPITAL LETTER SHARP SLateinischer Großbuchstabe scharfes Sẞ





Kristof Roomp  October 8, 2024


  1  Collapse this comment
Copy link
Especially people that lived through the Unicode migration of Windows and thought that now that all characters are 16 bit we never have to worry that kind of stuff again. Dangers of early adoption I suppose.





Jonathan Wilson  October 8, 2024


  1  Collapse this comment
Copy link
Is there a reason wcslwr isn’t a solution to this problem?
Or do they not handle all the wierd stuff from various languages properly?





Mike Winterberg  October 9, 2024
· Edited

  0  Collapse this comment
Copy link
_wcslwr_s_l is implemented with LCMapStringW(LCMAP_LOWERCASE).




Henke37  October 7, 2024


  2  Collapse this comment
Copy link
My favorite gotcha here is Greek. There’s a character with one uppercase version and two lowercase versions.





Rob Bernstein  October 7, 2024


  3  Collapse this comment
Copy link
So there’s no facility built into Standard C++ that handles this correctly even in C++23?





LB  October 10, 2024
· Edited

  0  Collapse this comment
Copy link
There is no single correct way to handle it, see the comment above yours about Greek having two lowercase versions of the same uppercase character, and the comment below ours about Turkish. Human languages are significantly more complicated than some standard library functions can hope to deal with, and they’d have to be continually updated as human languages evolve. Dedicated libraries with bindings to multiple languages (such as ICU) are currently the best option.