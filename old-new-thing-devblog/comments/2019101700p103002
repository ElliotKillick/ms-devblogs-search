Zak Larue-Buckley  October 17, 2019


  0  Collapse this comment
Copy link
The approach I’ve used with this problem before (non-elevated UI process running in session and elevated service running in session 0) is to have the service host a named pipe and the client connect to it to send commands to perform operations.





cheong00  October 17, 2019


  0  Collapse this comment
Copy link
I would have just use the “sc control” way to send a number if it’s simple action to invoke (like a sync task without need of custom parameter), or go the *nix way to use UdpClient if the task would need more information to run.





Dave Bacher  October 17, 2019


  0  Collapse this comment
Copy link
The argument runs like this...
If you choose to use named pipes, you're responsible for whatever connects on that pipe and sends you data - valid or not.
If you choose to use RPC / COM, Microsoft is at least taking care of the marshalling / message packing / unpacking for you, and likely a good chunk of the security as well in many cases.  If there's a bug there (which tends to be...Read moreThe argument runs like this…
If you choose to use named pipes, you’re responsible for whatever connects on that pipe and sends you data – valid or not.
If you choose to use RPC / COM, Microsoft is at least taking care of the marshalling / message packing / unpacking for you, and likely a good chunk of the security as well in many cases.  If there’s a bug there (which tends to be a spot where there is a bug), it’s on Microsoft and when they fix it – you get the fix without doing anything.
The argument against doing it is… it’s hard to predict when Microsoft will randomly break something.  And your users will blame you, not Microsoft.
Read less







Daniel Sturm  October 19, 2019


  0  Collapse this comment
Copy link
The argument against COM in my book is that it’s ungodly complicated to correctly use and set up so the chances that you introduce bugs there are much higher than if you use some standard serialization library and put ACLs on your named pipe (which you have to do for the COM solution too).





Zak Larue-Buckley  October 18, 2019


  0  Collapse this comment
Copy link
In my experience, running into a bug in a 3rd party component or service is not a good place to be. It doesn't win you much sympathy with your customers (who just want your product to work!) and you are more limited in your options to resolve it.
It may be an urgent issue for you, but not for the 3rd party vendor. It does get fixed without you doing anything, but not on your terms...Read moreIn my experience, running into a bug in a 3rd party component or service is not a good place to be. It doesn’t win you much sympathy with your customers (who just want your product to work!) and you are more limited in your options to resolve it.
It may be an urgent issue for you, but not for the 3rd party vendor. It does get fixed without you doing anything, but not on your terms or time-frames!
Read less






Aged .Net Guy  October 17, 2019


  0  Collapse this comment
Copy link
For more loosely coupled interactions, MSMQ is another traditional means of connection. We’ve done that when the non-privileged side is triggering mostly “fire and forget” requests for action to the elevated worker.