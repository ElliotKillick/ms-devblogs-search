Neil Rashbrook  March 8, 2024
· Edited

  1  Collapse this comment
Copy link
So what you're saying is that  is a compiler transform that has the effect of taking  by reference rather than by value. I've probably misunderstood somewhere along the line because I thought that  needed an awaitable object, which a pointer itself isn't. Either that or  isn't a pointer, but it behaves like one, which in that case is just plain confusing to me.
Read moreSo what you’re saying is that co_await is a compiler transform that has the effect of taking m_pendingAction by reference rather than by value. I’ve probably misunderstood somewhere along the line because I thought that co_await needed an awaitable object, which a pointer itself isn’t. Either that or m_pendingAction isn’t a pointer, but it behaves like one, which in that case is just plain confusing to me.
Read less







Raymond Chen Author
March 8, 2024


  0  Collapse this comment
Copy link
co_await is a compiler transform that takes an “awaiter”. Whether m_pendingAction is taken by reference or value depends on the awaiter. The awaiter for winrt::IAsyncAction takes the m_pendingAction by reference since the awaiter knows that it is always materialized as a temporary.





Neil Rashbrook  March 9, 2024
· Edited

  0  Collapse this comment
Copy link
Yes this is all down to me not understanding what the definition of the type of  actually is, which I need so that I can understand why the awaiter wants to take it by reference. (My best guess is that it's actually a smart pointer, but even then my expectation would have been that the awaiter would take a weak reference to the underlying COM object and crash when it got destroyed by mistake.)
Read moreYes this is all down to me not understanding what the definition of the type of m_pendingAction actually is, which I need so that I can understand why the awaiter wants to take it by reference. (My best guess is that it’s actually a smart pointer, but even then my expectation would have been that the awaiter would take a weak reference to the underlying COM object and crash when it got destroyed by mistake.)
Read less





Antonio Rodríguez  March 7, 2024


  1  Collapse this comment
Copy link
If you want to throw a pair of old gloves into the rubbish, make sure you aren’t wearing them. Or else your hands may get trapped in the bin.