Michael Liu  April 5, 2023


  1  Collapse this comment
Copy link
"Boxing" means the conversion of a value type to a reference type. In your C# example, there is no boxing or unboxing; the compiler error occurs not because pt.Value is "boxed" but rather because a struct returned by a property is classified as a read-only value instead of a variable. Here's a better example:
<code>
Read more“Boxing” means the conversion of a value type to a reference type. In your C# example, there is no boxing or unboxing; the compiler error occurs not because pt.Value is “boxed” but rather because a struct returned by a property is classified as a read-only value instead of a variable. Here’s a better example:
void UpdateX(object? pt)
{
    if (pt != null) {
        // Error: Cannot modify the result of an unboxing conversion
        ((Point)pt).X = 42.0;
    }
}

Read less







Mystery Man  April 7, 2023


  0  Collapse this comment
Copy link
You are correct, and there is more. Passing the boxed value as a function parameter defeats the purpose of showing anything about writing to a boxed value. Even if pt was an integer, writing to it would have served no purpose.
This whole blog post looks like a justification looking for a problem. (So far, I had only seen people writing solutions in search of a problem!)





Raymond Chen Author
April 7, 2023


  1  Collapse this comment
Copy link
This blog post is an answer to a real question from a customer. So there was at least one person who had this problem of wanting to modify a boxed value.





Mystery Man  April 8, 2023
· Edited

  0  Collapse this comment
Copy link
Did the customer also receive the boxed value through a method’s parameter? Or did their situation have merit?
I’m not asking questions; they are rhetorical. What I mean to say is, cutting down the noise brings out the point you want to make. That’s all.





Raymond Chen Author
April 9, 2023


  0  Collapse this comment
Copy link
The customer wanted to create a boxed Point with a specific value, and their plan was to create a boxed point and then modifying the boxed value: IBox^ pt = Point(); pt->Value.X = 42.0f; pt->Value.Y = 32.0f;





Me Gusta  April 8, 2023


  0  Collapse this comment
Copy link
Well, if you are writing a Windows Runtime component then yes it is very possible that this could come in through the parameters. Since the component would also have to project back to the Windows Runtime type system, then this situation in general is valid.
You can also see this entire situation in the UWP, one example that I know of is Windows.UI.WindowManagement.AppWindowTitleBar.BackgroundColor. For C++/WinRT this has the signature of:
<code>
For C# this has...Read moreWell, if you are writing a Windows Runtime component then yes it is very possible that this could come in through the parameters. Since the component would also have to project back to the Windows Runtime type system, then this situation in general is valid.
You can also see this entire situation in the UWP, one example that I know of is Windows.UI.WindowManagement.AppWindowTitleBar.BackgroundColor. For C++/WinRT this has the signature of:
IReference<Color> BackgroundColor();

void BackgroundColor(IReference<Color> value);
For C# this has the signature of:
public System.Nullable<Color> BackgroundColor { get; set; }
If you were implementing something like this, what would the setter parameter be?
Read less







紅樓鍮  April 7, 2023


  0  Collapse this comment
Copy link
The box is a reference type, and in C# reference type objects are usually used as containers of mutable values whose mutation is observed by every party holding a reference to the object.  Raymond points out that contrary to that pattern, the contents of the box is immutable, and therefore it cannot be used for shared mutation.





Mystery Man  April 8, 2023


  0  Collapse this comment
Copy link
And I am pointing out that Mr. Chen's demonstration has too much noise that obscures the main point. The function definition, the parameter, the Nullable class, and even the mention of Windows Runtime are extra.
C# features cooperative autoboxing of primitive types via the Object class. But if you type out the code snippet of Michael Liu, the .NET compiler will say, "Cannot modify the result of an unboxing conversion." Thankfully, that message makes it clear...Read moreAnd I am pointing out that Mr. Chen’s demonstration has too much noise that obscures the main point. The function definition, the parameter, the Nullable class, and even the mention of Windows Runtime are extra.
C# features cooperative autoboxing of primitive types via the Object class. But if you type out the code snippet of Michael Liu, the .NET compiler will say, “Cannot modify the result of an unboxing conversion.” Thankfully, that message makes it clear that the reason has to do with unboxing, not an attempt to modify a method parameter.
Read less






紅樓鍮  April 6, 2023
· Edited

  0  Collapse this comment
Copy link
Raymond is probably talking about “boxing” in the Windows Runtime sense, not the .NET sense.