Johan Sk√∂ld  February 15, 2024


  0  Collapse this comment
Copy link
Zig also supports trailing comma in parameter lists. Which may appear useless at first glance, but there is a neat side-effect you get from it: If you pass a file into `zig fmt` it will format that file for you. For parameter lists it puts them all on one line. But if the parameter list has a trailing comma, it will instead put them one on each line. So without trailing comma:
<code>
With trailing comma:
<code>
Read moreZig also supports trailing comma in parameter lists. Which may appear useless at first glance, but there is a neat side-effect you get from it: If you pass a file into `zig fmt` it will format that file for you. For parameter lists it puts them all on one line. But if the parameter list has a trailing comma, it will instead put them one on each line. So without trailing comma:
fn add(a: i32, b: i32) i32 {
    return a + b;
}
With trailing comma:
fn add(
    a: i32,
    b: i32,
) i32 {
    return a + b;
}
Read less







Fr√©d√©ric B.  February 12, 2024
¬∑ Edited

  1  Collapse this comment
Copy link
This is one of the three reasons I‚Äôm baffled that .NET Core switched from XML to JSON for config files (the other two being retro-compatibility and vanilla JSON disallowing comments).





George Byrkit  February 10, 2024


  0  Collapse this comment
Copy link
IIRC, PL/1 was also a ‚Äòsemi-colon is statement separator‚Äô language.  Made porting from C to PL/1 slightly harder, as you had semicolons to eliminate.





Nathan Mates  February 10, 2024


  0  Collapse this comment
Copy link
JSON5 allows the trailing commas, etc. It‚Äôs available as a library/package/etc for most of your favorite programming languages.





Neil Rashbrook  February 10, 2024


  0  Collapse this comment
Copy link
Note that Pascal doesn‚Äôt allow a semicolon before else. The nearest equivalent in C would be, say, trying to write do { break; }; while (1);





Dmitry  February 10, 2024
¬∑ Edited

  0  Collapse this comment
Copy link
Which in fact is entirely in the logic that semicolon is a delimiter, not end-of-statemeny mark, since
<code>
Nothing to separate here. Just like in your do‚Ä¶while example, before while part, where there‚Äôs nothing to mark end of, yes.
Although for C it‚Äôs better to treat {} as a language construct separate from statements like if, while or for, since the rules for semicolon are not as consistent as in Pascal.
P.S. Thanks, blog engine, for breaking EBNF.
Read moreWhich in fact is entirely in the logic that semicolon is a delimiter, not end-of-statemeny mark, since
<If_statement> ::=

  "if" <logical_expr> "then" <statement_1> ["else" <statement_2>].
Nothing to separate here. Just like in your do‚Ä¶while example, before while part, where there‚Äôs nothing to mark end of, yes.
Although for C it‚Äôs better to treat {} as a language construct separate from statements like if, while or for, since the rules for semicolon are not as consistent as in Pascal.
P.S. Thanks, blog engine, for breaking EBNF.
Read less







Á¥ÖÊ®ìÈçÆ  February 11, 2024


  0  Collapse this comment
Copy link
The do-while loop in C is also consistent with if-else and other control statements:
<code>
the  can be any statement, including a simple statement that ends in semicolon:
<code>
the only places I can think of where braces are required are function bodies and switch statements. In those cases, you can consider the tokens  and  to directly belong to the grammars for  and  respectively, and then  becomes completely consistent...Read moreThe do-while loop in C is also consistent with if-else and other control statements:
<do-while> ::= "do" <stmt> "while" "(" <expr> ")" ";"
the <stmt> can be any statement, including a simple statement that ends in semicolon:
do
  stmt;
while (expr);
the only places I can think of where braces are required are function bodies and switch statements. In those cases, you can consider the tokens "{" and "}" to directly belong to the grammars for <func-def> and <switch-stmt> respectively, and then <compound-stmt> becomes completely consistent with <stmt>.
Read less







Dmitry  February 11, 2024


  0  Collapse this comment
Copy link
Well, not really. I mean, if we say that semicolon is a statement terminator (which it mostly is) and call {} a compound statement (but still statement, just like if or while) then there‚Äôs a problem:
<code>
If braces are compound statement and statements are terminated with semicolon, then we should put semicolons after both closing braces. That would work for the else-branch (although for completely different reason called ‚Äùempty statement‚Äù) but something goes wrong with the...Read moreWell, not really. I mean, if we say that semicolon is a statement terminator (which it mostly is) and call {} a compound statement (but still statement, just like if or while) then there‚Äôs a problem:
if (some_expr)
{
  ...
}
else
{
  ...
}
If braces are compound statement and statements are terminated with semicolon, then we should put semicolons after both closing braces. That would work for the else-branch (although for completely different reason called ‚Äùempty statement‚Äù) but something goes wrong with the first branch (what do you call it, guys? we call it then(zen)-branch).
To make it at least feel more consistent, it helps thinking that closing brace implicitly contains the semicolon. Still not as consistent as in Pascal though.
Read less







Á¥ÖÊ®ìÈçÆ  February 12, 2024
¬∑ Edited

  0  Collapse this comment
Copy link
Yes, the real inconsistency is in that some statements end in a semicolon while others don‚Äôt (most notably { ... }, but things like if (...) ... else ... also themselves don‚Äôt have the semicolon for that matters üôÇ



Á¥ÖÊ®ìÈçÆ  February 9, 2024


  0  Collapse this comment
Copy link
And the chad F# allows you to write lists and argument lists with no commas at all!
[
    "Red"
    "Blue"
    "Green"
]

SomeFunction
    1
    2





GL  February 9, 2024


  0  Collapse this comment
Copy link
In C++ you can use trailing commas in brace initialization, and the extra comma does not change how overload resolution works. In C# if you have a normal variadic (i.e., params array, not vaargs) method and you find yourself constantly changing the number of arguments or shuffling them, then it‚Äôs better to call it with an explicitly initialized array, for which you can use trailing comma.





Andy Janata  February 9, 2024


  0  Collapse this comment
Copy link
Not only does Go support the trailing comma, it _requires_ it in the situations shown here.





Rohitab Batra  February 9, 2024


  1  Collapse this comment
Copy link
JSON ‚Äì Not you üôÇ





Swap Swap  February 9, 2024
¬∑ Edited

  2  Collapse this comment
Copy link
The worst consequence of not using a trailing comma is that you can make a mistake when merging two versions or rearranging the lines, and the compiler won't warn you. For example:
<code>
Here, Green and Blue were added in two different branches. They will be concatenated together by the preprocessor, so the effective code will be:
<code>
which is a bug.
Read moreThe worst consequence of not using a trailing comma is that you can make a mistake when merging two versions or rearranging the lines, and the compiler won‚Äôt warn you. For example:
"Red",
"Green"
"Blue"
Here, Green and Blue were added in two different branches. They will be concatenated together by the preprocessor, so the effective code will be:
"Red",
"GreenBlue"
which is a bug.
Read less