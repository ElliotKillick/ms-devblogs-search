Vladimir Z  August 8, 2019


  0  Collapse this comment
Copy link
Doesn’t std::ref makes this, e.g. https://www.fluentcpp.com/2018/04/17/pass-polymorphic-object-stl-algorithm/
std::transform(begin(v), end(v), begin(v), std::ref(base));





Dmitry Vozzhaev  June 17, 2019


  0  Collapse this comment
Copy link
So you hide the comparer behind a pointer, and now who will destruct your comparer?





David Swedensky  June 18, 2019


  0  Collapse this comment
Copy link
It’s only used within a member function so the pointer is guaranteed to be around until it’s finished. No-one stores the lambda outside of this.





Dmitry Vozzhaev  June 18, 2019


  0  Collapse this comment
Copy link
Looks more like a coincidence, not a guarantee. When you copy the value you could do whatever you want with the copy. It’s yours now. And this rule is more fundamental than “my function won’t stash a copy of comparer”





Murray Colpman  June 19, 2019


  0  Collapse this comment
Copy link
This is a standard library function though. Why would it store the copy anywhere, and more importantly, how would it store it and when would it do anything with that copy? If we were creating an object that wasn’t destructed I might see your point but we’re not.



Moritz Beutel  June 17, 2019


  0  Collapse this comment
Copy link
Could it be that the example code isn't quite right? You seem to be using `equiv<T>` as a means of expressing something like `std::bind(&comparer::equiv<T>, this, _1, _2))`, but I don't think it is understood that way by any recent compiler. Also, GCC and ICC complain that the explicit template instantiation must be at namespace scope.
Also, there may be a slightly simpler workaround: if you have a functor `f` and want to pass it by reference,...Read moreCould it be that the example code isn’t quite right? You seem to be using `equiv<T>` as a means of expressing something like `std::bind(&comparer::equiv<T>, this, _1, _2))`, but I don’t think it is understood that way by any recent compiler. Also, GCC and ICC complain that the explicit template instantiation must be at namespace scope.
Also, there may be a slightly simpler workaround: if you have a functor `f` and want to pass it by reference, you can just say `std::ref(f)`.
Read less