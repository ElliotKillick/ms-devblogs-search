Alex Cohn  June 2, 2019


  0  Collapse this comment
Copy link
The tricky part of the old problem is that the linker error message would go away if by a lucky chance some other file in the project has 
#include <winrt/Windows.Foundation.Collections.h>I believe this won’t happen with the new logic.





Neil Rashbrook  May 30, 2019


  0  Collapse this comment
Copy link
> Ah, but we never told the compiler how to call the methods of . 
So why does that result in a linker error rather than a compiler error? For the given C++ example, where it's a parameter to a method, I would only expect to be able to call that method under restricted conditions, e.g. forwarding your own  parameter to the method, since you won't be able to construct your own string. When...Read more> Ah, but we never told the compiler how to call the methods of IVectorView. 
So why does that result in a linker error rather than a compiler error? For the given C++ example, where it’s a parameter to a method, I would only expect to be able to call that method under restricted conditions, e.g. forwarding your own std::string parameter to the method, since you won’t be able to construct your own string. When it’s a return value, I suspect C++ would probably give up, since it wouldn’t know how to destroy the local variable.
Read less







Raymond Chen Author
May 30, 2019


  0  Collapse this comment
Copy link
The method is declared but not implemented. It's implemented in the full header file. But it must be declared so that  can call it. (C++/WinRT is a header-only component, so you cannot defer implementation to a library.) The compile phase doesn't know which object files are going to be linked together, so it doesn't know that the implementation will eventually turn up missing. Only the linker knows that. In the C++ case, the ...Read moreThe method is declared but not implemented. It’s implemented in the full header file. But it must be declared so that begin can call it. (C++/WinRT is a header-only component, so you cannot defer implementation to a library.) The compile phase doesn’t know which object files are going to be linked together, so it doesn’t know that the implementation will eventually turn up missing. Only the linker knows that. In the C++ case, the operator<<(std::basic_ostream<T>&, std::basic_string<T> const &) is declared as a nonmember function in string, not iostream.
Read less







Neil Rashbrook  May 31, 2019


  0  Collapse this comment
Copy link
Ah, so you have stub headers that declare everything, and then full headers which define everything? That explains it, thanks! (I was assuming that you were just dealing with references and pointers to incomplete types, but the type is completely declared, so that’s not the case here.)



George Gonzalez  May 29, 2019


  0  Collapse this comment
Copy link
One might hope that the wide arc of programming progress swings towards real progress, like better error messages that actually make sense to humans.   It shouldn’t take that much AI to backtrack from that low-level dead-end up to something more relatable, like saying “You probably forgot to include xxxxx” or perhaps better yet, “Note: we are including xxxxx which you forgot to include unless you misspelled First”.