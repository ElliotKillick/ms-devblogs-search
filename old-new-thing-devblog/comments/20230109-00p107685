Thiago Macieira  January 12, 2023


  0  Collapse this comment
Copy link
Paper N2625 in the ISO C Language working group has a bigger list, more comprehensive than Raymond's above. For example, the following declarations are also disallowed:
#define ENTOMOLOGY 1 // reserved
#define SIGNIFICANT_RESULTS 1 // reserved
#define TIME_TO_EAT 1 // reserved
#define ATOMIC_WEIGHT .000001f // reserved
#define INTERESTING_VALUE_MIN 0 // reserved
The paper goes on to make a proposal that changes the effect of having a reservation: instead of making programs illegal / undefined for simply having...Read morePaper N2625 in the ISO C Language working group has a bigger list, more comprehensive than Raymond’s above. For example, the following declarations are also disallowed:
#define ENTOMOLOGY 1 // reserved
#define SIGNIFICANT_RESULTS 1 // reserved
#define TIME_TO_EAT 1 // reserved
#define ATOMIC_WEIGHT .000001f // reserved
#define INTERESTING_VALUE_MIN 0 // reserved
The paper goes on to make a proposal that changes the effect of having a reservation: instead of making programs illegal / undefined for simply having such identifiers, it changes the standard to say new identifiers with those prefixes may become reserved in future versions of the language. That way, if you have a variable called “token”, your code won’t be UB.
Read less







Daniel Roskams  January 11, 2023


  0  Collapse this comment
Copy link
The C standard is kind of a joke that no one actually follows. I don’t have hard numbers, but I bet I could count on one hand the number of non-trivial programs on my computer that 100% comply to the C standard. Even people that postulate about writing “standards compliant” or “portable” etc. code have probably named a variable “total” or “strict” or “structureSize” or “isvalid” at some point.





George Tokmaji  January 11, 2023


  0  Collapse this comment
Copy link
Normal variables don’t have external linkage, and the C11 rules in the table only applies to symbols with external linkage.




Letao Wang  January 10, 2023


  0  Collapse this comment
Copy link
These rules are kinda yikes.  They barely ever get mentioned, let alone taught systematically.  Compilers don’t seem to care to enforce them either.  They are like traps that will happily let people walk in, and everything will feel fine until a random day when it explodes.  Either that or they are “rules in name only”, the kind that everyone violates and there are no consequences.





Michael Spam  January 10, 2023


  0  Collapse this comment
Copy link
How many C++ programs have a variable name called total .   Millions? Had no idea it was reserved!





James Touton  January 9, 2023
· Edited

  1  Collapse this comment
Copy link
Note the wording for the double-underscore prohibition:
> Each identifier that contains a double underscore __ […]
The prohibition covers all names that contain a double underscore anywhere in the identifier, not just at the start.





Lukas Mai  January 10, 2023
· Edited

  0  Collapse this comment
Copy link
Yeah, that’s why “the rules for C happen to match the C++ rules” is not quite true. C++ reserves identifiers that contain double underscores anywhere, but C does not. In other words,
int a__b;
 is perfectly valid C, but uses a reserved identifier in C++.




Henke37  January 9, 2023


  0  Collapse this comment
Copy link
I’d argue that the windows api counts as part of the implementation, and as such is allowed to use the reserved names.





MGetz  January 10, 2023


  0  Collapse this comment
Copy link
And yet the windows headers include macros for min and max which clobber the standard std::min and std::max creating what is technically undefined behavior unless the dev defines NOMINMAX. Which is also why that’s a standard define in all my projects, because while the macro versions are technically faster they are also technically undefined behavior.




Adam Rosenfield  January 9, 2023


  0  Collapse this comment
Copy link
Even if they’d be within their rights to do so, I’d wager that the ISO C committee would try to avoid introducing certain new functions like `strafe` that could potentially collide with identifiers being used by real code that didn’t follow the rules.





紅樓鍮  January 9, 2023


  0  Collapse this comment
Copy link
Good C code nowadays always use “poor man’s namespaces” by prefixing the library name to global names, and really the C language standard should start doing the same, even if old names cannot be changed.





aaaaaa 123456789  January 11, 2023
· Edited

  0  Collapse this comment
Copy link
And that’s exactly what happened: C23 uses stdc_ for a bunch of functions it introduces.



Andreas Schulz  January 9, 2023


  0  Collapse this comment
Copy link
not everyone has gotten the memo.
Not even the Windows Terminal team, eh? 😉
https://github.com/microsoft/terminal/issues/3512





Dustin Howett  January 9, 2023


  0  Collapse this comment
Copy link
We’re definitely behind on fixing that one 😅