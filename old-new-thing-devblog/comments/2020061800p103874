Neil Henderson  June 18, 2020


  0  Collapse this comment
Copy link
Is there a typo? C4254 is 'operator' : conversion from 'type1' to 'type2', possible loss of data
I think you meant C4265: 'class' : class has virtual functions, but destructor is not virtual
Also, it wasn't clear to me why 'final' would hide this warning. AFAIK, 'final' on a derived class doesn't introduce a virtual destructor in the base, so therefore the case the compiler is trying to warn about may still be there.
I realise you're...Read moreIs there a typo? C4254 is ‘operator’ : conversion from ‘type1’ to ‘type2’, possible loss of data
I think you meant C4265: ‘class’ : class has virtual functions, but destructor is not virtual
Also, it wasn’t clear to me why ‘final’ would hide this warning. AFAIK, ‘final’ on a derived class doesn’t introduce a virtual destructor in the base, so therefore the case the compiler is trying to warn about may still be there.
I realise you’re talking about a situation where “If you know that nobody derives from Derived, you can mark it as final, which will make the warning go away.” But I’m wondering why does the compiler hide the warning just because Derived is marked final?
// Final hides the C4265 warning but deleting
// Derived via a pointer to Base is still undefined.
struct Derived final : Base
{
    Derived()
    {
        p = new char[50];
    }

    ~Derived()
    {
        delete[] p;  // Does not run
    }

    char *p;
};
Read less







Scarlet Manuka  June 24, 2020


  0  Collapse this comment
Copy link
I think the text should be “If you know that noboody derives from Base”. The article is saying the error occurs on Base because of the possibility that someone will create a Derived class and delete it as a Base, implying that Derived doesn’t necessarily exist in the code at present. If we mark Base as final then we know nobody will create Dervived and so the warning goes away.




Jeremy Richards  June 18, 2020


  0  Collapse this comment
Copy link
"I would prefer the compiler wait until you actually do the delete before generating the warning. But it’s being proactive and warning about a potential problem, even if that potential is not realized immediately."
How would that even work?  I assume you would at least need something like link time code generation enabled since you could easily be deleting the base class pointer in one file that has no idea that that class was inherited...Read more“I would prefer the compiler wait until you actually do the delete before generating the warning. But it’s being proactive and warning about a potential problem, even if that potential is not realized immediately.”
How would that even work?  I assume you would at least need something like link time code generation enabled since you could easily be deleting the base class pointer in one file that has no idea that that class was inherited somewhere completely different.
Read less







Raymond Chen Author
June 18, 2020


  0  Collapse this comment
Copy link
It would be when the compiler observes a “delete p” where p is (1) of compile-time type Base*, (2) Base is unsealed, (3) Base has virtual methods, and (4) Base does not have a virtual destructor. “Deleting unsealed class with virtual methods but no virtual destructor.” Right now, it complains at the declaration of Base rather than at its deletion.





Michael  June 18, 2020


  0  Collapse this comment
Copy link
The C5205 warning introduced in 2019 Update 5 almost does what you want, but it requires one of those virtual functions to be pure :-/ Of course, you may be going to mentioning this warning, but I can't quite tell.
Another consequence of the UB for this is sized deallocation: If Derived adds any data members, operator delete will receive the wrong size. So even if all of the involved destructors are trivial, it's not a...Read moreThe C5205 warning introduced in 2019 Update 5 almost does what you want, but it requires one of those virtual functions to be pure :-/ Of course, you may be going to mentioning this warning, but I can’t quite tell.
Another consequence of the UB for this is sized deallocation: If Derived adds any data members, operator delete will receive the wrong size. So even if all of the involved destructors are trivial, it’s not a “harmless” UB. e.g. https://gcc.godbolt.org/z/EpQw2s
Read less