Jonathan Potter  February 20, 2024


  0  Collapse this comment
Copy link
I‚Äôd love to know where you find this API documentation utopia where all possible error codes are clearly documented üôÇ





Tom Lint  February 22, 2024


  0  Collapse this comment
Copy link
Do you mean for API implementation x or the list of possible error codes in Win32? The latter already exists, and I use it frequently to make sure my Win32 code returns the most intuitive error code for each scenario I encounter.




Lyubomir Lyubomirov  February 18, 2024


  0  Collapse this comment
Copy link
I‚Äôm not sure who to ask, but why am I not receiving notifications when I have selected ‚ÄúEmail me when there are new comments on posts where I have posted a comment‚Äù?





Scarlet Manuka  February 18, 2024


  2  Collapse this comment
Copy link
Maybe this feature has been inerted out‚Ä¶




Danielix Klimax  February 18, 2024


  0  Collapse this comment
Copy link
While incidental to your point, why retire API in such ‚Äúunhelpful‚Äù way? Is backwards compatibility no longer in effect?





Simon Farnsworth  February 20, 2024


  0  Collapse this comment
Copy link
If you can't maintain backwards compatibility with the old API (e.g. you're on a games console that has no support for printing at all, the API depends on hardware like the ISA bus or the FDC that's no longer supported, the API was inherently insecure and there's no way to support it and protect users from malware), this is a helpful way to retire it.
Instead of applications refusing to start because an API has been...Read moreIf you can‚Äôt maintain backwards compatibility with the old API (e.g. you‚Äôre on a games console that has no support for printing at all, the API depends on hardware like the ISA bus or the FDC that‚Äôs no longer supported, the API was inherently insecure and there‚Äôs no way to support it and protect users from malware), this is a helpful way to retire it.
Instead of applications refusing to start because an API has been removed , or crashing when they call the API (which may happen without the user being aware it‚Äôs done), the application runs without the functionality the API provided. Everything else is intact; so, for example, if you‚Äôve removed support for POTS modems, the application can still run, can still display and edit your contacts book, it just can‚Äôt dial numbers for you any more ‚Äì which lets you (e.g.) sync the contacts from the old application to a modern application that can send them to your mobile phone.
Read less







Danielix Klimax  February 29, 2024


  0  Collapse this comment
Copy link
Pretty sure it is about killing WMR. There is no ‚Äúworking‚Äù after that, nothing is intact. Microsoft Is Killing Windows Mixed Reality, Will Remove Support For It From Windows




Lyubomir Lyubomirov  February 18, 2024


  0  Collapse this comment
Copy link
I‚Äôm not sure I fully understand the point, but I think it‚Äôs to keep old apps running on new hardware (or lack of matching as the case may be) as much as possible. What useful way of ‚Äúretirement‚Äù would you suggest for an application made to work with floppy disks, given that probably some of the younger colleagues don‚Äôt even know what a floppy disk is?




Mark Magagna  February 18, 2024


  0  Collapse this comment
Copy link
Somewhat related to the Null Object pattern, where you return an actual object instead of null, to prevent null pointer exception errors down the road. It also allows customization of behavior.





Lyubomir Lyubomirov  February 18, 2024


  0  Collapse this comment
Copy link
It seems to me that the author is talking about the exact opposite ‚Äì to return NULL, but with an appropriate error code.




Shawn Van Ness  February 17, 2024


  0  Collapse this comment
Copy link
Because all this code looks so COM-ish (HRESULT, E_HANDLE and S_OK etc) it really needs to be said .. this is the problem that QueryInterface() was intended to solve.
Why no QueryInterface(ISupportPrinting) ?





Raymond Chen Author
February 18, 2024
¬∑ Edited

  1  Collapse this comment
Copy link
The Widget example is a flat API. It just happens to use HRESULTs as error codes, but Widgets are not COM objects.
In the Printing example, the issue is that time travel has yet to be perfected. The original API was designed on PCs, and PCs always supported printing, so in the original API you just say "Hey, give me the printers", and it always succeeded (possibly with an empty list, if no printers were installed)....Read moreThe Widget example is a flat API. It just happens to use HRESULTs as error codes, but Widgets are not COM objects.
In the Printing example, the issue is that time travel has yet to be perfected. The original API was designed on PCs, and PCs always supported printing, so in the original API you just say ‚ÄúHey, give me the printers‚Äù, and it always succeeded (possibly with an empty list, if no printers were installed). The problem is how to port this API to Xbox sanely. (If your answer is ‚ÄúDon‚Äôt port this API to Xbox,‚Äù then any app that has a Print option [even if not central to the app‚Äôs functionality] cannot run on Xbox. ‚ÄúWhy can‚Äôt I play Candy Crush on Xbox?‚Äù ‚ÄúOh, because there‚Äôs an Easter Egg after you beat level 500, where it shows you a ‚ÄúPrint a certificate‚Äù button. Without a printing API, this app can‚Äôt run.)
Read less






Mohammad Ghasemi  February 17, 2024


  0  Collapse this comment
Copy link
Very educational article. Thank you.





Lyubomir Lyubomirov  February 17, 2024


  0  Collapse this comment
Copy link
In such situations I always check the returned handle. I would write the unused functions in the same way, except that instead of ERROR_CANCELLED I would use ERROR_CALL_NOT_IMPLEMENTED or ERROR_NOT_SUPPORTED.





Dustin Howett  February 17, 2024


  1  Collapse this comment
Copy link
Unless you had previously documented your API as potentially returning those status codes, your ‚Äúinert‚Äù shims will break applications that are written to the specification. That is the central thrust of this article: inert implementations comply with the API as documented and in so doing do not break existing applications.





Lyubomir Lyubomirov  February 18, 2024
¬∑ Edited

  0  Collapse this comment
Copy link
Of course I got the point of the article, it‚Äôs just that back in the day the Windows API used these error codes. So ancient that probably only Raymond remembers them. üôÇ



Georg Rottensteiner  February 16, 2024


  0  Collapse this comment
Copy link
Is that what went wrong at DirectSound when removing the hardware support? Or did I expect wrong?
I recall my code failing when requesting a hardware device, which pretty much succeeded everywhere, what with DirectSound devices on board per default.
Suddenly with the removal I had to change to fallback to a software device. I seem to remember that the samples also did it with simple hardware or nothing.
Probably just wishful thinking on my side that...Read moreIs that what went wrong at DirectSound when removing the hardware support? Or did I expect wrong?
I recall my code failing when requesting a hardware device, which pretty much succeeded everywhere, what with DirectSound devices on board per default.
Suddenly with the removal I had to change to fallback to a software device. I seem to remember that the samples also did it with simple hardware or nothing.
Probably just wishful thinking on my side that I didn‚Äôt do it wrong üôÇ
Nitpicker‚Äôs Corner (what happened to that actually?): The on board sound drivers were really really bad, and probably the reason for removing their support.
E.g. there was an API call to set an event once a sound buffer had completed playing, or reached a certain position, crucial for audio streaming. The on board sound driver sent that event for every sound buffer, not only the one I requested for.
Read less