Joshua Hudson  March 22, 2023


  0  Collapse this comment
Copy link
To be honest I was surprised to find out that RawEntryPoint() was an actual function rather than something that could be declared in C so long as you didn't try to return from it (because the stack was bone dry; the RET instruction would fault).
And now Raymond is saying it doesn't enter the process at the declared entry point in the executable but rather deep in some system dll (presumably NTDLL) and it has the...Read moreTo be honest I was surprised to find out that RawEntryPoint() was an actual function rather than something that could be declared in C so long as you didn’t try to return from it (because the stack was bone dry; the RET instruction would fault).
And now Raymond is saying it doesn’t enter the process at the declared entry point in the executable but rather deep in some system dll (presumably NTDLL) and it has the expected thing of not being a function at all. That makes sense.
I’m still trying to figure out what needs passing to a new process other than TEB; which I would have done by slotting into its dedicated segment register already.
Read less







Daniel Roskams  March 26, 2023


  0  Collapse this comment
Copy link
The kernel needs to pass the address of the base of NTDLL as well. This is needed so that NTDLL can be properly added to the loader’s data structures and probably for other stuff as well. Due to ASLR this address couldn’t be obtained cleanly any other way.





Me Gusta  March 23, 2023


  0  Collapse this comment
Copy link
If you show external code in Visual Studio, the call stack shows where it enters. Currently, on Windows 11 22H2, it goes through ntdll.dll!RtlUserThreadStart() and kernel32.dll!BaseThreadInitThunk() before it gets to your executable for desktop applications.




Swap Swap  March 22, 2023
· Edited

  0  Collapse this comment
Copy link
> What the kernel folks could have done was declare the process start function as using the __fastcall calling convention, which takes the first two parameters in ecx and edx.
AFAIK, fastcall did not exist when the first versions of Windows NT were developed; it’s a relatively new convention.





Dmitry  March 22, 2023


  1  Collapse this comment
Copy link
I still wonder, what is the recommended way to calculate sine/cosine and other ”trickier than basic arithmetics” stuff with SSE? And does it really give any performance improvement for scalars except for not requiring memory to pass the data and not supporting the 80-bit extended-precision floating-points?