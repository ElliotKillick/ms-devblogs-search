Alex Cohn  July 13, 2019


  0  Collapse this comment
Copy link
Why is requiring the latest Windows SDK such a big deal? Are there breaking changes or dropped features in the newer releases? Open source projects 9ften have quite strict version requirements for their dependencies, why cannot an explicit version of Windows SDK be one of these?





Raymond Chen Author
July 14, 2019


  0  Collapse this comment
Copy link
What if somebody wants to use your open source project (which stipulates that it must use the 1703 SDK), but they also want to use some new features added after 1703? Are they forced to forego any Windows features added after 1703?





Sebastian Redl  July 15, 2019


  0  Collapse this comment
Copy link
I think the assumption here is that a later SDK than specified can always be used, only an earlier one can’t.
If that is not the case, things get complicated.





Raymond Chen Author
July 15, 2019


  0  Collapse this comment
Copy link
Earlier comment from “Me Gusta” suggests that overshooting can be a problem. (I don’t believe it is, but that’s the claim.) Even if overshooting is okay, you then revisit the problem at the heart of this series: Detecting whether a newer SDK is being used, and taking advantage of its features if so.





Alex Cohn  July 15, 2019


  0  Collapse this comment
Copy link
Detecting whether a newer SDK is being used, and taking advantage of its features if so.
This won't happen if your library requires the latest SDK that has been available at the time you released your library. You cannot take advantage of features that dd not exist when you were running the final tests.
No, you don't want to force people to use version 1703, but you cannot be prepared to take advantage of the...Read moreDetecting whether a newer SDK is being used, and taking advantage of its features if so.
This won’t happen if your library requires the latest SDK that has been available at the time you released your library. You cannot take advantage of features that dd not exist when you were running the final tests.
No, you don’t want to force people to use version 1703, but you cannot be prepared to take advantage of the new features of 1704 if they choose to work with it.
call_if_defined
could help your library survive compilation with SDK 1702, but my question was, what may be the reason for the users not to upgrade their build environment to 1703?
Read less







Raymond Chen Author
July 15, 2019


  0  Collapse this comment
Copy link
If you upgrade your SDK to 1703, then it becomes possible to invoke 1703 features by mistake and break your app’s intended 1702 back compat. Also, sizeof structures may change in 1703, which would prevent the app from running on 1702.





Wil Wilder Apaza Bustamante  July 16, 2019


  0  Collapse this comment
Copy link
@Raymond, that's exactly what I am trying to understand.
When I upgrade my SDK to 1703, my library can still run on older versions of the platform, can't I? To ensure this, I must sniff whether a feature is supported at runtime.When I use 1702 SDK, I can use my library on newer versions of the platform, but I cannot take advantage of the features that were introduced after 1702, no matter how smart my...Read more@Raymond, that’s exactly what I am trying to understand.
When I upgrade my SDK to 1703, my library can still run on older versions of the platform, can’t I? To ensure this, I must sniff whether a feature is supported at runtime.When I use 1702 SDK, I can use my library on newer versions of the platform, but I cannot take advantage of the features that were introduced after 1702, no matter how smart my templates are.
I am often facing the situation when I must support different versions of SDK (I am speaking about Android NDK here).
NDK (the C++ toolchain), unfortunately, is different. From time to time, breaking changes have been introduced, e.g. removing gcc compiler, or removing gnustl, or  At the very least, these changes required that the build scripts must be edited. For some developers, who use C++ components ‘as is’ with their Java code, such changes happen to be too painful. That’s why we have to sniff the version of NDK, and make some adaptations to allow the library be used with older releases.
With Android SDK (Java/Kotlin), it is never has been an issue to use the latest version. I thought that for Windows SDK, backward compatibility is even better.
Read less







W S  July 16, 2019


  0  Collapse this comment
Copy link
A new SDK can break “binary compatibility” and has done so in the past if you do:
`THING thing = { sizeof(THING), … };` and increase the WINVER related defines without testing. Win2000 did this with OPENFILENAME etc.





Alex Cohn  July 17, 2019


  0  Collapse this comment
Copy link
I remember these unfortunate glitches of 20 years ago. I believe that Microsoft remembers them even better than yours truly, and has a strong incentive not to allow them anymore.




Me Gusta  July 13, 2019


  0  Collapse this comment
Copy link
There can be breaking changes. The UWP API has been renaming or removing things in particular, so it is possible for a build to break.





Raymond Chen Author
July 14, 2019


  0  Collapse this comment
Copy link
Can you name some breaking changes that would be points of concern? All of the removals I know about are for APIs that app compat analysis indicates are not being used by anyone.



Pierre Baillargeon  July 12, 2019


  0  Collapse this comment
Copy link
Kudos, the final culmination of this serie is just phenomenal. I’ve taken a course on C++17 (with some hint of C++2x) this spring and we’ve covered such advance template tricks, but I’m not sure I’d been able to crack the case so cleanly.