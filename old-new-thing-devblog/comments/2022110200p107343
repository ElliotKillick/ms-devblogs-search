Ivan Kljajic  November 5, 2022


  0  Collapse this comment
Copy link
My worry was max wait objects +/-.  But that const was good enough, and if not they could be combined so all good.





Jan Ringoš  November 7, 2022


  0  Collapse this comment
Copy link
I’d love if we could simply register events/mutexes/semaphores/etc to be delivered to our own IOCPs, then we wouldn’t be limited to 64 objects at all.
Windows threadpool already does that as per https://devblogs.microsoft.com/oldnewthing/20220406-00/?p=106434 so some simple API could just expose it for us. Or whatever, just extend CreateIoCompletionPort so we can use it for every handle, not just files and sockets.




Joshua Hudson  November 2, 2022
· Edited

  0  Collapse this comment
Copy link
"This brings the size and complexity of the operation down to a reasonable level, since the amount of memory that is needed now grows with the number of file descriptors you are monitoring, rather than with the total number of file descriptors in the process."
Now it's time to bash Linux. (Rare thing I know.)
In my experience; the number of handles being waited on is more than half the total handles open by the process. poll...Read more“This brings the size and complexity of the operation down to a reasonable level, since the amount of memory that is needed now grows with the number of file descriptors you are monitoring, rather than with the total number of file descriptors in the process.”
Now it’s time to bash Linux. (Rare thing I know.)
In my experience; the number of handles being waited on is more than half the total handles open by the process. poll is going to allocate a bigger kernel buffer than select. (Because handles are densified by kernel.)
Read less







Markus Schaber  November 3, 2022


  1  Collapse this comment
Copy link
You should rather bash Posix, because Linux offers epoll() for specifically that case (optimized for a large number of handles, and both level and edge trigger).
If you’re watching for a single or small number of handles, it doesn’t matter. If you have the typical server watching thousands of handles, epoll() is much better than poll() or select().





Mark Livschitz  November 3, 2022


  0  Collapse this comment
Copy link
epoll's default flags are very vulnerable to thundering herd and spurious wakeup - you need the oneshot and exclusive to use it effectively. Fortunately, at least those problems are at least easy to identify and understand. Its edge-triggered behavior is bad in a subtle enough way that edge-triggering should probably be in the "considered harmful" category. Be sure to use epoll with level-triggered exclusive and oneshot flags, otherwise things will behave badly. More information is...Read moreepoll’s default flags are very vulnerable to thundering herd and spurious wakeup – you need the oneshot and exclusive to use it effectively. Fortunately, at least those problems are at least easy to identify and understand. Its edge-triggered behavior is bad in a subtle enough way that edge-triggering should probably be in the “considered harmful” category. Be sure to use epoll with level-triggered exclusive and oneshot flags, otherwise things will behave badly. More information is available on this blog.
BSD’s Kqueue is better, although it’s still unfortunate that EV_ONESHOT needs to be specified.
Windows’ ProcessSocketNotifications (disclosure: I had a significant hand in designing/implementing it) makes the caller explicitly opt into oneshot- or persistence, so it’s harder to forget to supply oneshot. It does however support opting into persistent (non-oneshot) and event-triggered registrations, to allow ease of cross-platform software development.
Read less