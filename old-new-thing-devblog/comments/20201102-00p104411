Travis Hayes  November 5, 2020


  0  Collapse this comment
Copy link
<code>
But therein lies the rub (and the heart of the question...); what does "any network connectivity at all" mean? Network card is present and connected to a switch/router/basestation? Has a layer 2 link? Has an IP address? Has a valid gateway? Sees any Ethernet frames at all? Valid DNS server? Can ping microsoft.com?
Read moreOne was to use INetworkListManager::get_IsConnected, which tells you if the system has any network connectivity at all.
But therein lies the rub (and the heart of the question…); what does “any network connectivity at all” mean? Network card is present and connected to a switch/router/basestation? Has a layer 2 link? Has an IP address? Has a valid gateway? Sees any Ethernet frames at all? Valid DNS server? Can ping microsoft.com?
Read less







Almighty Toomre  November 5, 2020


  0  Collapse this comment
Copy link
My very first public presentation at Microsoft was on this very topic (and it's still relevant!): Offline Network Detection in Microsoft Silverlight 3. The TL/DR: just like ChDF T  says, just try to connect, and then handle the failure.
These days, with so many VPNs and so much security software in use, it's even harder to tell if you are truly online. You might be connected to a corporate network that lets you see some,...Read moreMy very first public presentation at Microsoft was on this very topic (and it’s still relevant!): Offline Network Detection in Microsoft Silverlight 3. The TL/DR: just like ChDF T  says, just try to connect, and then handle the failure.
These days, with so many VPNs and so much security software in use, it’s even harder to tell if you are truly online. You might be connected to a corporate network that lets you see some, but not all, of the internet; you might have internet for some protocols (HTTP) but not others (IPsec); you might have some DNS queries filtered and not others. And, of course, some countries have filters to prevent certain sites from being accessed.
Read less







Raymond Chen Author
November 5, 2020


  0  Collapse this comment
Copy link
This question is not coming from an application author. It’s coming from a service provider. They want to know when to open a port and start listening for inbound requests. Doing so on a system with no network connectivity will succeed, but nobody will connect.





Neil Rashbrook  November 6, 2020


  0  Collapse this comment
Copy link
I don’t quite see why you have to wait for network connectivity before you start listening. Why wouldn’t people be able to connect once network connectivity has been established?





cheong00  November 5, 2020


  0  Collapse this comment
Copy link
In that case the most reliable way to detect is to implement something like the Certbot of "Let's Encrypt" - try to connect to external web service (possibly hosted by themselves) that will try to connect back when received request on start. If they receive incoming request, the service is online.
Note: If you register your e-cert with Certbot and configured automatic renewal, when your cert is due to renew, the bot will contact the server...Read moreIn that case the most reliable way to detect is to implement something like the Certbot of “Let’s Encrypt” – try to connect to external web service (possibly hosted by themselves) that will try to connect back when received request on start. If they receive incoming request, the service is online.
Note: If you register your e-cert with Certbot and configured automatic renewal, when your cert is due to renew, the bot will contact the server where it’ll try to connect your port 80 in attempt to retrieve a predefined answer file to prove your server is still at that domain, and proceed to renew if success.
Read less





Mystery Man  November 4, 2020


  0  Collapse this comment
Copy link
I must say, Mr. Chen, your 2020 blog posts are as valuable as gold.
I think I’ll have to go find that article that says how to use Windows Runtime API in .NET apps, although WebClient has so far done a good job of telling me when there is network connectivity. In PowerShell, I even have more options.





David Wolff  November 2, 2020


  0  Collapse this comment
Copy link
“what they really wanted to know was when the system had obtained network connectivity.”
This is probably incredibly naive, but I just check if http://www.cnn.com is available.





word merchant  November 3, 2020


  0  Collapse this comment
Copy link
“but I just check if http://www.cnn.com is available.”
Just don’t download anything more than the http response code – your virus protection software is no match for CNN.





cheong00  November 3, 2020


  0  Collapse this comment
Copy link
In that case, just query for OPTIONS verb would be enough.





Alex Martin  November 4, 2020


  0  Collapse this comment
Copy link
You don’t even need to send anything HTTP-wise; if you can establish a TLS connection to port 443, you’re good.





cheong00  November 4, 2020


  0  Collapse this comment
Copy link
Since some network don’t allow direct access to external network, and all traffics must be sent through HTTP proxy, valid HTTP request is required for such case. Trying to connect to the web server directly and do handshake manually would return false negative in this scenario.




Gunnar Dalsnes  November 2, 2020


  0  Collapse this comment
Copy link
Very naive, you should check google.com instead:-D





cheong00  November 2, 2020


  0  Collapse this comment
Copy link
That won’t work in China.
I’d just try to connect to http://www.example.com instead. It’s a website that I don’t remember have any downtime, and no country that I aware of will try to block.





Simon Geard  November 2, 2020


  0  Collapse this comment
Copy link
Also useful is that http://example.org/ works over HTTP — not HTTPS — which makes it a bit more resilient to captive portals... HTTPS sites will (quite reasonably) give certificate errors in that situation, but being inherently insecure and unconcerned about MitM attacks, an HTTP site will happily redirect to the portal.
This used to be extremely useful on my old phone. The current one deals with portals automatically as part of establishing the connection, but the...Read moreAlso useful is that http://example.org/ works over HTTP — not HTTPS — which makes it a bit more resilient to captive portals… HTTPS sites will (quite reasonably) give certificate errors in that situation, but being inherently insecure and unconcerned about MitM attacks, an HTTP site will happily redirect to the portal.
This used to be extremely useful on my old phone. The current one deals with portals automatically as part of establishing the connection, but the old one wasn’t so clever and required a manual sign-in… something that became increasingly difficult as more and more sites started enforcing HTTPS. Solution… keeping http://example.org/ open in a tab, and refreshing after connecting to WiFi.
Read less





ChDF T  November 2, 2020


  0  Collapse this comment
Copy link
I would like to add, that while the presented APIs try their best to guess the devices/users connectivity, they still just guess: The user might be connected to some badly configured VPN or the network administrator might have setup an aggressive packet filter at the edge.
This means that your application still has to be able to deal with connectivity issues, even when the presented APIs say "connection seems fine". Additionally these APIs might get...Read moreI would like to add, that while the presented APIs try their best to guess the devices/users connectivity, they still just guess: The user might be connected to some badly configured VPN or the network administrator might have setup an aggressive packet filter at the edge.
This means that your application still has to be able to deal with connectivity issues, even when the presented APIs say “connection seems fine”. Additionally these APIs might get tripped up by some unusual configuration and report “no internet connection” even though your application would be able to communicate with whatever it wants to communicate with.
So please use the presented APIs (and whatever smart smart hacks you come up with) to show the user more helpful error messages, but don’t disable features that require a connection to a specific server without actually checking whether the specific server can be reached.
Read less







Alex Martin  November 2, 2020


  0  Collapse this comment
Copy link
Yes. I’ve noticed a trend recently of programs refusing to work because the system says “Internet disconnected” even though the connection is actually fine, and the system’s connection checking function is just malfunctioning. Frequently I can ping DNS servers and get to things through a Web browser, but some applications will just refuse to work until Windows realizes that the network is working.





Mike Swaim  November 2, 2020


  0  Collapse this comment
Copy link
I’ve noticed the same thing. Skype and (most) command line tools think that I’m connected. The Network connection icon, our VPN software and most browsers think that I’m not. Doing a release and renew will sometimes convince Windows that I have a connection. Other times, after a while it heals itself. It’s frustrating.





Alex Martin  November 2, 2020


  0  Collapse this comment
Copy link
It comes down to a principle that has been a theme on this blog in the past sometimes: Checking to see if something is going to succeed usually doesn’t work. Just try to do it and deal with the failure if it fails.



Joshua Hudson  November 2, 2020


  0  Collapse this comment
Copy link
Back in the pre-IPv6 days I would connect a UDP socket to 1.0.0.0 and ask what IP address was on. 1.0.0.0  was reserved-unsssignable then.
I suspect a similar technique works today, but multiple IPv4 and v6 addresses have to be tried. It’s longer code but it’s portable.