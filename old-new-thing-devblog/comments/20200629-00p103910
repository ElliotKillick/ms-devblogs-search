Przemek B-i  July 5, 2020


  0  Collapse this comment
Copy link
variable "i" not valid as a template non-type parameter but you can add recursion over index:
<code>
Read morevariable “i” not valid as a template non-type parameter but you can add recursion over index:

template<std::size_t index, typename T, typename Tuple>
constexpr int tuple_element_index_helper()
{
    if constexpr (index == std::tuple_size_v<Tuple>) {
        return index;
    } else {
        return std::is_same_v<T, std::tuple_element_t<index, Tuple>> ? 
                index : tuple_element_index_helper<index + 1, T, Tuple>();      
    }
}

template<typename T, typename Tuple>
constexpr int tuple_element_index() {
    return tuple_element_index_helper<0, T, Tuple>();
}
Read less







Jonathan O'Connor  July 2, 2020


  0  Collapse this comment
Copy link
2 weeks ago, I needed this code, and I came up with a similar solution to you. But I really wanted a solution that would take advantage of a fold expression. Sadly, I couldn't find a solution. AFAIK, both our solutions instantiate a struct for each T and each element of each tuple type, and that is expensive.
If you don't need to worry about tuples containing the same type multiple times, you can drop the...Read more2 weeks ago, I needed this code, and I came up with a similar solution to you. But I really wanted a solution that would take advantage of a fold expression. Sadly, I couldn’t find a solution. AFAIK, both our solutions instantiate a struct for each T and each element of each tuple type, and that is expensive.
If you don’t need to worry about tuples containing the same type multiple times, you can drop the static_asserts, which should reduce the number of instantiated classes that the compiler generates.
Read less







Nikolaos Athanasiou  July 9, 2020


  0  Collapse this comment
Copy link
Just posted a solution that avoids compile time recursion by using a fold expression here https://www.reddit.com/r/cpp/comments/hoasne/avoiding_compile_time_recursion/?utm_source=share&utm_medium=web2x





Alex Cohn  July 2, 2020


  0  Collapse this comment
Copy link
The nice thing about tuples that contain same type multiple times is that you can introduce strong typing, e.g. instead of
typedef tuple < double, double, double > Point3D
 you can write
typedef tuple <X, Y, Z > Point3D
.




Neil Rashbrook  June 30, 2020


  0  Collapse this comment
Copy link
Exercise for the reader: Create an index sequence for those tuple elements of a particular type.





紅樓鍮  June 29, 2020


  0  Collapse this comment
Copy link
I think for constexpr is coming with the static reflection proposal.





word merchant  June 29, 2020


  0  Collapse this comment
Copy link
Does anything happen at runtime in a C++ program any more?





Chayim Refael Friedman  June 29, 2020


  0  Collapse this comment
Copy link
or will we get normal IDE experience anymore?





Chayim Refael Friedman  June 29, 2020


  0  Collapse this comment
Copy link
The question is different: will C++ compilation times be reasonable anymore?





Wil Wilder Apaza Bustamante  June 29, 2020


  0  Collapse this comment
Copy link
this comment has been deleted.