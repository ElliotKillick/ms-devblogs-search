Alexey Badalov  September 16, 2019


  0  Collapse this comment
Copy link
I wonder why git doesn’t just do the right thing: recognize that these new files are all exerts from an existing one and copy the histories. If there is a reason this feature should not exist or just that no one took the time to implement it yet.





Gunnar Dalsnes  September 16, 2019


  0  Collapse this comment
Copy link
Or a specific command to tell git what has happened: git mvr (record move) that take one source and multiple dests (or vice verse)





Raymond Chen Author
September 16, 2019


  0  Collapse this comment
Copy link
But where would it record that information? The only place git records history information is in the commit graph, and all it can do is compare trees. You’d have to invent some auxiliary “bonus history” database to keep track of this information.





Gunnar Dalsnes  September 17, 2019


  0  Collapse this comment
Copy link
I was thinking it could do the same tricks as you did, but under the hood. Not sure it that would fit with the staging/commit model (don’t know git that well). Maybe it could work like a macro or something. Doing it manually seems like a pita thou:-)





Neil Rashbrook  September 17, 2019


  0  Collapse this comment
Copy link
By comparison, the Mercurial VCS does have some sort of bonus history database which can be used to record sources of copies. In this case, you can do all of the above work in a single commit:
hg cp foods fruits
hg cp foods veggies
hg mv foods dairy
(edit files)
hg commit
(On the other hand, there will be tasks which are harder in Mercurial.)




Raymond Chen Author
September 16, 2019


  0  Collapse this comment
Copy link
That would be very computationally expensive. “Hey, here’s a new file. Let me see if any of its lines came from existing files in the repo.” But maybe you can come up with a computationally cheap way of doing it. Git is open source, so feel free to submit a PR.





Chris DaMour  September 17, 2019


  0  Collapse this comment
Copy link
But git IS doing this automatically..with the computationally expensive thing.  AFAIK Git doesn't track renames, it detects them when you run git log.  see https://git-scm.com/docs/git-diff#Documentation/git-diff.txt--Mltngt   This split is just tricking git into detecting 2 renames instead of the normal one because the merge commit has two parent commits and the new files are BOTH being related to the original file within their respective parent commits.
So IMO git is automatically...Read moreBut git IS doing this automatically..with the computationally expensive thing.  AFAIK Git doesn’t track renames, it detects them when you run git log.  see https://git-scm.com/docs/git-diff#Documentation/git-diff.txt–Mltngt   This split is just tricking git into detecting 2 renames instead of the normal one because the merge commit has two parent commits and the new files are BOTH being related to the original file within their respective parent commits.
So IMO git is automatically doing stuff..it’s just if you do it in a linear model without the two parent commits, it’d find the first match and consider it done…since you can’t rename 1 file to two.  Does seem like it could go farther and look for possible splits too..but isn’t that what https://git-scm.com/docs/git-diff#Documentation/git-diff.txt—find-copiesltngt is for?
Read less







Raymond Chen Author
September 17, 2019


  0  Collapse this comment
Copy link
Yes, it does the computationally expensive thing to identify renames, but not for copies. The expense is reduced by searching only for matches between deletes and creates. As you noted, you can ask it to find copies, but that won’t detect the case where lines are moved from one file to another. since neither is a copy of the other.