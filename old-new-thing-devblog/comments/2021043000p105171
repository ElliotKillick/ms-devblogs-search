david shultis  May 3, 2021


  0  Collapse this comment
Copy link
Hi Raymond,
Thanks for publishing this information. I know there are multiple articles on the Microsoft blog regarding coroutines. I am grateful for this.
I am wondering if you are working in VS2019 c++20 latest? Can you share your code base in aggregate form? Do you have a github site that aggregates the code base that you are using.
I know the cppcoro lib from lewis baker is gcc based and compiles under windows 10. (But...Read moreHi Raymond,
Thanks for publishing this information. I know there are multiple articles on the Microsoft blog regarding coroutines. I am grateful for this.
I am wondering if you are working in VS2019 c++20 latest? Can you share your code base in aggregate form? Do you have a github site that aggregates the code base that you are using.
I know the cppcoro lib from lewis baker is gcc based and compiles under windows 10. (But it doesn’t handle working in Vs2019 latest build C++20). There is a github fork that i will try shortly that covers some updates for vs2019. We know the microsoft team is working towards supporting C++23 coroutines (with a richer coroutine development).
Is there anyway–a temporary–but current c++20 MSVC compiler version of cppcoro is in the works to “cover the time” between the current state of the art libraries (cppcoro) and c++23. What are your thoughts on this?
I know Jonathan Emmet wrote a piece 8 months ago on this topic of sorts.
I am looking for a VS2019 C++20 compatible coroutine library, even in limited format.
Thanks so much
Read less







Park Dong Ha  May 3, 2021


  0  Collapse this comment
Copy link
I always used the reference to the coroutine’s argument explicitly for synchronization. (latch, std::promise… etc)
This way looks simple enough when we have to extend the return types (which has promise_type).