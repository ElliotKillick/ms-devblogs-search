Pavel Kostromitinov  July 19, 2021


  0  Collapse this comment
Copy link
I user self-written plugin for Far Manager, with basically regexp search and replace in file names





Mystery Man  July 14, 2021


  0  Collapse this comment
Copy link
Ah, those days. I never learned the FOR command.
Nowadays, if I wanted to do that, I just use PowerShell:
Get-ChildItem "Fred*" | ForEach-Object { Rename-Item $_.FullName $($_.Name -replace "Fred","Wilma") }





Daniel Sturm  July 18, 2021


  0  Collapse this comment
Copy link
The best part about that is that you can also simply add a -WhatIf to the rename command to see what would happen. Or add -Confirm and get asked before each rename if you really want to do it.
Ok no, the best part is that it’s actually readable compared to the batch script.





Marcos Kirchner  July 15, 2021


  0  Collapse this comment
Copy link
You probably know it, but you can also pipe results from Get-ChildItem directly into Rename-Item:

Get-ChildItem "Fred*" | Rename-Item -NewName { $_.Name.Replace("Fred", "Wilma") }






Mystery Man  July 15, 2021
· Edited

  0  Collapse this comment
Copy link
Yeah. I was writing quickly. Wasn't really thinking. I actually don't do either of these, because they are risky when the file set is large. Imagine you wanted to change "Fred" into "Freddy". You discover that your PowerShell script never ends. It changes the file names from Fred* to Freddy*, Freddydy*, Freddydydy*, Freddydydydy*, and so on. (Remember that "Freddy 01" sorts below "Fred 01".)
I've actually written a function for pattern-based renaming that looks like this:
<code>
Edit:...Read moreYeah. I was writing quickly. Wasn’t really thinking. I actually don’t do either of these, because they are risky when the file set is large. Imagine you wanted to change “Fred” into “Freddy”. You discover that your PowerShell script never ends. It changes the file names from Fred* to Freddy*, Freddydy*, Freddydydy*, Freddydydydy*, and so on. (Remember that “Freddy 01” sorts below “Fred 01”.)
I’ve actually written a function for pattern-based renaming that looks like this:
$Temp1=Get-ChildItem "Fred*"
$Temp1 | ForEach-Object { Rename-Item $_.FullName $($_.Name -replace "Fred","Freddy") }
Edit: I think I instinctively add a ForEach-Object because I usually insert a conditional statement in it.
Read less





Antonio Rodríguez  July 14, 2021


  0  Collapse this comment
Copy link
I have a mkren.bat file which generates a ren.bat in the current directory, with one ren command for each file in it. It optionally accepts a pattern and/or a /d modifier to filter only directories. It saves me the trouble of creating the ren.bat file by hand importing a file list into my text editor and turning it into the ren commands. Stripping it from parameter parsing, online help and all the stuff, its core...Read moreI have a mkren.bat file which generates a ren.bat in the current directory, with one ren command for each file in it. It optionally accepts a pattern and/or a /d modifier to filter only directories. It saves me the trouble of creating the ren.bat file by hand importing a file list into my text editor and turning it into the ren commands. Stripping it from parameter parsing, online help and all the stuff, its core is just one line:
for %mods% %%v in (%mask%) do echo ren "%%v" "%%v">> ren.bat
Online help? Yes, of course. My memory isn’t very good, so I make all mi batch files so they can be run with the /? modifier to get a simple one line usage reminder:
>mkren /?
Usage: mkren /? | [/d] [{pattern}]
Read less







Mike Morrison  July 14, 2021


  0  Collapse this comment
Copy link
I’ve written many variations of that two-liner batch script over the years, but lately, I prefer to do my bulk renaming in a capable text editor, such as EditPad.  I can use regex to bulk-modify SQL statements, REN commands, what have you.  It’s just another way to accomplish the same thing.





David Wolff  July 14, 2021


  0  Collapse this comment
Copy link
An Emacs macro is also very powerful here.
You can read in all the filenames, then do "start macro" ("ctl-x ctl-)"), edit a line, go next line, "end macro" ("ctl-x ctl-)"). Then "ctl-x e" to execute the macro on each line. You can also put a "REN " in front of each line, open a shell buffer, and execute the line.
Especially useful if you need to do this in more than one folder.
There are more details,...Read moreAn Emacs macro is also very powerful here.
You can read in all the filenames, then do “start macro” (“ctl-x ctl-)”), edit a line, go next line, “end macro” (“ctl-x ctl-)”). Then “ctl-x e” to execute the macro on each line. You can also put a “REN ” in front of each line, open a shell buffer, and execute the line.
Especially useful if you need to do this in more than one folder.
There are more details, but I found this kind of thing to be an enormous timesaver.
Read less







Ivan K  July 14, 2021


  0  Collapse this comment
Copy link
I’m sure it could be done in vi with fewer keystrokes.




Peter Cooper Jr.  July 14, 2021


  0  Collapse this comment
Copy link
I've actually, much more often than I would have expected, turned to Excel to help with these sorts of one-off build-a-script problems. Put the source in one column, in the next column write an expression (in this case, something like ) and fill down for all the rows. Then copy everything in that column to a batch file (or directly to the command prompt, or to my SQL window, or whatever). I've certainly used my...Read moreI’ve actually, much more often than I would have expected, turned to Excel to help with these sorts of one-off build-a-script problems. Put the source in one column, in the next column write an expression (in this case, something like =CONCAT("ren ", A1, " ", SUBSTITUTE(A1, "fred", "wilma"))) and fill down for all the rows. Then copy everything in that column to a batch file (or directly to the command prompt, or to my SQL window, or whatever). I’ve certainly used my IDE’s “fancy search-replace features” for this sort of thing plenty of times too, though.
Read less