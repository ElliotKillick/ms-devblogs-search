Trent Glascock  May 1, 2022


  0  Collapse this comment
Copy link
When I first read the bonus chatter comment "A lambda would also do the trick" I just had to try it in a debugger - I thought "do the trick" referred to the limitations of the captured parameters in the previous paragraph. I think bonus chatter comment actually means "A lambda could also be used to construct the object (making generic_factory redundant)"
I believe all three make_generic_factory() implementations capture raw pointers and could possibly access dangling...Read moreWhen I first read the bonus chatter comment “A lambda would also do the trick” I just had to try it in a debugger – I thought “do the trick” referred to the limitations of the captured parameters in the previous paragraph. I think bonus chatter comment actually means “A lambda could also be used to construct the object (making generic_factory redundant)”
I believe all three make_generic_factory() implementations capture raw pointers and could possibly access dangling pointers.
Read less







Thief  April 25, 2022


  0  Collapse this comment
Copy link
This reminds me of my (not production ready) experiment into a memoization wrapper function: https://gcc.godbolt.org/z/sPo36TT6h





紅樓鍮  April 22, 2022
· Edited

  0  Collapse this comment
Copy link
I’ve always had the (probably disgraceful) feeling that pack expansions in function parameters might best be written
Ts ...args
instead of Ts... args.  It’s more consistent with how we capture a pack expansion in a lambda: [...args], not [... args].
In the same spirit, I always write declarations of template parameter packs as
typename ...Ts
rather than typename... Ts.