Derp McDerperson  January 9, 2024


  0  Collapse this comment
Copy link
I requested a function like this 2 decades ago. It's nice to see that Microsoft finally implemented it.
They half-baked what I requested though:
1. There should be a way to specify a "preceding allocation", i.e. lets say you want something aligned on 1 MiB boundary but want a 4 KiB block preceding it it.
2. There should be a way to specify that the end address of the block be aligned as opposed to the begin address...Read moreI requested a function like this 2 decades ago. It’s nice to see that Microsoft finally implemented it.
They half-baked what I requested though:
1. There should be a way to specify a “preceding allocation”, i.e. lets say you want something aligned on 1 MiB boundary but want a 4 KiB block preceding it it.
2. There should be a way to specify that the end address of the block be aligned as opposed to the begin address of the block be aligned.
Read less







Declan  January 1, 2024


  0  Collapse this comment
Copy link
Hi Raymond, I had a question and I wasn't sure if there might be a better place to ask it.
I know that you've commented before on some of the internal aspects of the global memory manager and how it validates pointers to functions like GlobalLock. I noticed though, that when you GlobalLock a pointer, it only increments the lock count until it reaches 255, but subsequent calls to GlobalLock still return a pointer to...Read moreHi Raymond, I had a question and I wasn’t sure if there might be a better place to ask it.
I know that you’ve commented before on some of the internal aspects of the global memory manager and how it validates pointers to functions like GlobalLock. I noticed though, that when you GlobalLock a pointer, it only increments the lock count until it reaches 255, but subsequent calls to GlobalLock still return a pointer to the memory block. I don’t think that this is something that would have any noticeable impact, but I’m curious to know if there’s any significant reason as to why it is the way it is.
I apologize if this is off-topic for the article.
Read less