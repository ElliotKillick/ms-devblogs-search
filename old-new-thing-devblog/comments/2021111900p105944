Gunnar Dalsnes  November 19, 2021


  0  Collapse this comment
Copy link
Not directly related, but can c++/winrt use .net dlls? And can .net use c++/winrt dlls? I never really understood what this winrt thing is.





Gunnar Dalsnes  November 19, 2021
· Edited

  0  Collapse this comment
Copy link
I think my thought is, can you write winrt stuff in .net, compile to native, allow these dlls to be used from c++/winrt and over time phase out use of++ completely:-) c++ just seems too complicated to survive.





Paulo Pinto  November 19, 2021
· Edited

  0  Collapse this comment
Copy link
You are mixing stuff, that would be C++/CLI, which targets MSIL as "native" code.
Basically WinRT is what Microsoft thought of, when originally designing .NET and going with a bytecode VM instead.
So, WinRT is COM, nothing else. Although there is a twist, you get a new base interface IInspectable, type libraries use .NET metadata instead of TLB files, and the COM ABI was updated to support more types across languages.
Basically since Vista, the Windows team has...Read moreYou are mixing stuff, that would be C++/CLI, which targets MSIL as “native” code.
Basically WinRT is what Microsoft thought of, when originally designing .NET and going with a bytecode VM instead.
So, WinRT is COM, nothing else. Although there is a twist, you get a new base interface IInspectable, type libraries use .NET metadata instead of TLB files, and the COM ABI was updated to support more types across languages.
Basically since Vista, the Windows team has been pushing COM APIs in detriment of .NET, thus rebooting their COM+ Runtime (Ext-VOS) ideas as WinRT.
Read less







Gunnar Dalsnes  November 20, 2021


  0  Collapse this comment
Copy link
Ok thanks. So I guess WinRT is windows OS apis accessible via (imaginary named) COM++.
So what if someone non Microsoft/non Windows OS expose apis via COM++, what to name this then, since COM++ does not exist as a name, only WinRT…



Mystery Man  November 19, 2021


  0  Collapse this comment
Copy link
One mustn’t put the getter and setter in the public scope anyway. They are part of the internal working of the class.





Paulo Pinto  November 19, 2021


  0  Collapse this comment
Copy link
> The nonstandard C++/CX extension is no longer the recommended mechanism for using the Windows Runtime from C++. ...
It might not be recommended, but forcing us to use C++/WinRT with tooling that resembles using ATL 3.0 alongside Visual C++ 6.0 from around 1998 isn't any better.
Maybe Microsoft employees enjoy editing IDL files without any tooling support from from Visual Studio, and feel pleasure in manually merging generated C++ code into their projects after each IDL...Read more> The nonstandard C++/CX extension is no longer the recommended mechanism for using the Windows Runtime from C++. …
It might not be recommended, but forcing us to use C++/WinRT with tooling that resembles using ATL 3.0 alongside Visual C++ 6.0 from around 1998 isn’t any better.
Maybe Microsoft employees enjoy editing IDL files without any tooling support from from Visual Studio, and feel pleasure in manually merging generated C++ code into their projects after each IDL change, the rest of us rather migrates to Qt and VCL instead.
Read less