switchdesktopwithfade@hotmail.com  July 9, 2022
· Edited

  0  Collapse this comment
Copy link
I have a method that attempts to retrieve an object from a disk cache. If the object doesn't exist, I create the object but I return the object to the caller before I save it to disk.
The general C# pattern I use for this is:
<code>
Read moreI have a method that attempts to retrieve an object from a disk cache. If the object doesn’t exist, I create the object but I return the object to the caller before I save it to disk.
The general C# pattern I use for this is:
public Task<T> OuterMethodAsync<T>()
{
    var tcs = new TaskCompletionSource<T>();
    InnerMethodAsync(tcs);
    return tcs.Task;
}

private async void InnerMethodAsync<T>(
    TaskCompletionSource<T> tcs)
{
    try
    {
        // Allow the caller to resume on its thread.
        await Task.Yield();
    
        // Construct the returned object here. When you have a result, call TrySetResult().
        // This is vaguely reminiscent of the Win32 ReplyMessage(...) function.
    
        tcs.TrySetResult(/* result here */);

        // Post-processing here, persist to storage, etc.
    }
    catch (Exception ex)
    {
        tcs.TrySetException(ex);
    }
    finally
    {
        tcs.TrySetCancelled();
    }    
}

Read less







Henke37  July 9, 2022


  0  Collapse this comment
Copy link
The name “victim” says something.





紅樓鍮  July 7, 2022


  0  Collapse this comment
Copy link
The first thing that came to my mind is to use an asynchronous generator instead of a task.  It only works if the asynchronous generator is eager, however.





Jacob Manaker  July 7, 2022


  0  Collapse this comment
Copy link
Shouldn’t the bonus reading code be italicized, to indicate that it’s wrong?





Louis Wilson  July 7, 2022


  0  Collapse this comment
Copy link
The bonus reading code is not wrong: it passes party & victim as parameters instead of capturing them.