pnoop star  April 17, 2020


  0  Collapse this comment
Copy link
Are there any functions that you know of that set the contents of an output structure to safe values on failure?
<code>
where GetBlob() fills in the Blob with some useful values on success, and when it fails it initializes the Blob to { 0, NULL }.
That way if I ignore the result code, I won't get a catastrophic uninitialized pointer error when I use the Blob.  Yes, yes don't ignore errors, but I'm just...Read moreAre there any functions that you know of that set the contents of an output structure to safe values on failure?

struct Blob { int len; void *buf; };
Blob b;
GetBlob(97, &b);

where GetBlob() fills in the Blob with some useful values on success, and when it fails it initializes the Blob to { 0, NULL }.
That way if I ignore the result code, I won’t get a catastrophic uninitialized pointer error when I use the Blob.  Yes, yes don’t ignore errors, but I’m just wondering if you have seen this pattern in any Windows APIs.
Read less







Dave Gzorple  April 17, 2020


  0  Collapse this comment
Copy link
We do something similar in our APIs, the first bit of code that gets executed sets all output parameters to -1, NULL, or { 0x00, 0x00, … } as appropriate.  This means that even if the caller doesn’t check the return value – and for many trivial calls no-one ever does, do you ever check the return value from printf()? – they trigger an error if they try and act on the returned data.





Erik Fjeldstrom  April 17, 2020


  0  Collapse this comment
Copy link
Off the top of my head I can't think of any, but I make use of the fact that Windows functions (like C library ones) usually don't scribble on passed-in memory regions on errors by pre-initializing them to a known value, usually with <code> or (if the function fills in a pointer for ppFoo parameters) <code>
If you encounter a function that uses caller memory for stuff, the only suggestion I have is to code defensively....Read moreOff the top of my head I can’t think of any, but I make use of the fact that Windows functions (like C library ones) usually don’t scribble on passed-in memory regions on errors by pre-initializing them to a known value, usually with
Blob b={0};
 or (if the function fills in a pointer for ppFoo parameters)
Blob *b=NULL;
If you encounter a function that uses caller memory for stuff, the only suggestion I have is to code defensively. Fortunately that is fairly rare in my experience.
Read less