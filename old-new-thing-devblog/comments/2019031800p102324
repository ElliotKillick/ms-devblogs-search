Ajith S.  March 27, 2019


  0  Collapse this comment
Copy link
Shouldn’t DiscoveredPhotos::GetPhotos() return by value instead of reference? Not sure if that’s a typo or if I’m missing something in the example.





Arnaud Forgiel  March 21, 2019


  0  Collapse this comment
Copy link
Another approach would be to use a Finite State Machine with a method passing the “message” of the next step to be performed, a bit like:bool Perform( const char * message, …);Using va_arg, you get the appropriate parameters and the FSM ensure the user respects the proper import order.





Raymond Chen Author
March 21, 2019


  0  Collapse this comment
Copy link
But how do you enforce this at compile time?




Christof Donat  March 21, 2019


  0  Collapse this comment
Copy link
I'd try with functions, that take a rvalue reference to the object, that should not be used any more after the call. So the code could look like
```photo_importer::download(photo_importer::discover_photos(photo_importer::chose_camera(main_camera)), target_dir); ```
Since the return value of chose_camera and discover_photos will be moved in, there is no way to use these objects afterwards.
You might also consider to overload the |-Operator like the ranges-TS does:
```photo_importer::chose_camera(main_camera) | photo_importer::discover_photos() | photo_importer::download(target_dir);```
Then the return value of `chose_camera()`...Read moreI’d try with functions, that take a rvalue reference to the object, that should not be used any more after the call. So the code could look like
“`photo_importer::download(photo_importer::discover_photos(photo_importer::chose_camera(main_camera)), target_dir); “`
Since the return value of chose_camera and discover_photos will be moved in, there is no way to use these objects afterwards.
You might also consider to overload the |-Operator like the ranges-TS does:
“`photo_importer::chose_camera(main_camera) | photo_importer::discover_photos() | photo_importer::download(target_dir);“`
Then the return value of `chose_camera()` can only be used in a `|`-opreator on the left hand side with the return type of `discover_photos()` on the right hand sinde. The return value can only be used on the right hand side of a `|`-operator with the return value of the former `|`-operator on the left hand side, etc. All the left hand side objects will be passed as rvalue references, so they can not be reused as well.
Read less







Raymond Chen Author
March 21, 2019


  0  Collapse this comment
Copy link
But there is nothing that prevents you at compile time from trying to use a moved-from object.





Hristo Hristov  March 28, 2019


  0  Collapse this comment
Copy link
If a solution isn’t obvious, wouldn’t that be an unnecessary complication? What about implementing the limitation via asserts?





Raymond Chen Author
March 28, 2019


  0  Collapse this comment
Copy link
The goal here is to make it impossible even to write the code that does the wrong thing. Sure, you could do all this with asserts, but those aren’t checked until runtime, and it might be in a code path that is rarely-triggered and eluded testing.





Hristo Hristov  March 29, 2019


  0  Collapse this comment
Copy link
A good point. Maybe in that case we just need new language facilities to enable that pattern?



David Muller  March 19, 2019


  0  Collapse this comment
Copy link
I believe Rust’s tracking of ownership provides this:
https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=daf6b400e46038b296a46941397bdf60





Steven Wolf  March 19, 2019


  0  Collapse this comment
Copy link
Why not just use a state machine within the class instances?Only allow appropriate state-transitions.  A client that violates them gets a clear indication of what went wrong, albeit at runtime.Similarly, one could block clients from "going backwards" by setting a state in the previous state-class (from your example Raymond - of a class for each state accessible only from the previous state) - by having each one supply a back-ref or a shared pointer to...Read moreWhy not just use a state machine within the class instances?Only allow appropriate state-transitions.  A client that violates them gets a clear indication of what went wrong, albeit at runtime.Similarly, one could block clients from “going backwards” by setting a state in the previous state-class (from your example Raymond – of a class for each state accessible only from the previous state) – by having each one supply a back-ref or a shared pointer to a live-state flag that simply isn’t cleared unilt the subsequent instance is closed.  Some sort of chaining so that until the supplied next-state-instance is done, this-state-instance is invalidated in terms of reusing it (or maybe it is simply marked as dead the second it gives up the next-state instance).I don’t see how you can enforce any of the backwards blocking at compile time, only at runtime, unless as some posters have mentioned – using move semantics to consume the previous state instance when generating the new-state-instance.Although – that just seems like a fine solution anyway.  A is consumed to produce B is consumed to produce C …
Read less







Michael J Smith  March 19, 2019


  0  Collapse this comment
Copy link
One strategy would be to make all of your functional methods private but expose function pointers.  Set the function pointers only when it is appropriate.  So the constructor will initialise the pointer to phase1() and NULL the others.  When phase1() completes it sets the pointer to phase2() and NULLs the phase1() pointer.  etc.
Of course you could more easily permit the programmer to call any method, but return fail status unless the object is in...Read moreOne strategy would be to make all of your functional methods private but expose function pointers.  Set the function pointers only when it is appropriate.  So the constructor will initialise the pointer to phase1() and NULL the others.  When phase1() completes it sets the pointer to phase2() and NULLs the phase1() pointer.  etc.
Of course you could more easily permit the programmer to call any method, but return fail status unless the object is in the correct state.
Read less







Accel229  March 19, 2019


  0  Collapse this comment
Copy link
I already commented on the new site being awful in the post about the migration, but the new site is really so terrible and gets in the way so much, that I will comment one more time - and then shut up. The new site is (a) very slow (8 seconds to open a page is complete bonkers), (b) breaks comment formatting (see comments in this post for example), and (c) lost old comments which...Read moreI already commented on the new site being awful in the post about the migration, but the new site is really so terrible and gets in the way so much, that I will comment one more time – and then shut up. The new site is (a) very slow (8 seconds to open a page is complete bonkers), (b) breaks comment formatting (see comments in this post for example), and (c) lost old comments which were 80% of the value of the blog. It also looks worse on mobile, lost archive links (yes, I know that you can type URLs manually), etc, etc, etc. None of this is Raymond’s fault, but since the braindead decision to migrate isn’t my fault either and I have been a reader since the very beginning, I am going to say that the migration was stupid, that the old site was much better, and request that someone wakes up to this and maybe, I don’t know, considers doing something about it. The awful performance and awful qualities of the new site make visiting this blog unpleasant. Yes, I submitted this as a feedback as well and if you think the same, I encourage you to do it, too. Shutting up now.
Read less







Henry Skoglund  March 19, 2019


  0  Collapse this comment
Copy link
Agreed, this blog is more or less equivalent to a brand new blog. Many times I’ve gone here thanks to Hacker News, for example https://news.ycombinator.com/item?id=4781372
But of course the links in that post are now defunct. If Hacker News can preserve contents from 7 years back, why cannot Microsoft?





Accel229  March 19, 2019


  0  Collapse this comment
Copy link
I'll say more - I have no idea why the heck they decided to migrate at all. Just why? I don't understand it. I guess they did have some reason, but I legitimately have no clue as to what it is. It cannot be better user experience, because it became worse, not better, visibly and on multiple fronts. I am not being facetious here. If the reason for the migration *was* better user experience -...Read moreI’ll say more – I have no idea why the heck they decided to migrate at all. Just why? I don’t understand it. I guess they did have some reason, but I legitimately have no clue as to what it is. It cannot be better user experience, because it became worse, not better, visibly and on multiple fronts. I am not being facetious here. If the reason for the migration *was* better user experience – then why nobody cared enough to test what it is going to be??? Because if they did test it, they’d immediately see that yeah, the new site is slow, yeah, the comments now don’t have formatting, and by the way, the old comments do not carry through, etc. And if they did test it and did see the effect and decided that this is somehow fine, I am just at a complete loss for words… Really, the end result of the migration so far for me is that I am now no longer reading MSDN blogs on the phone at all and am considering just stopping visiting the blogs in the browser on the desktop as well and instead blow the dust off the RSS readers that were all the rage circa 2008 (not so much now) and move to reading some of the blogs that way – because the new site is, again, slow, and actively fights comments. Until they break the RSS feed as well, that is. Guess that’ll happen next migration.
Read less





Anthony Griesel  March 18, 2019


  0  Collapse this comment
Copy link
Temporal coupling like this should be avoided if possible, but oftentimes its hard to do in real world with the clock ticking. One way we have mitigated the issue is by using fluent class builders. They do not bloat your class's constructor, and allow for lots of flexibility, it still constrains you to having only 1 public method on your class. Everyhing else had to be setup by builder/factory. You can call the builder methods...Read moreTemporal coupling like this should be avoided if possible, but oftentimes its hard to do in real world with the clock ticking. One way we have mitigated the issue is by using fluent class builders. They do not bloat your class’s constructor, and allow for lots of flexibility, it still constrains you to having only 1 public method on your class. Everyhing else had to be setup by builder/factory. You can call the builder methods in any order, but to get an configured object, you have to call build on factory.
 
PhotoImporter importer = new PhotoImporter.Builder()                .SetFindOnlyNewPhotos(true)                .SetDownloadFolder(Path.GetTempPath())                .SetRenumberPhotos(true)                .SetSelectPhotosFunction(x => x.Name.Equals(“1.jpeg”))                .Build(camera);            importer.Download(); // only public method on importer. Configuration was done by builder.
 
    public class PhotoImporter    {        private readonly Camera camera;        private bool newPhotosOnly;        private string downloadPath;        private bool reNumberPhotos;        private bool deleteOriginals;        private PhotoImporter(Camera camera)//private constructor forces use of Builder.        {            this.camera = camera;        }        public void Download()        {            // state has been managed by builder.         }        public class Builder // nestled class has access to private fields/methods        {            private bool newPhotosOnly;            private string downloadPath;            private bool reNumberPhotos;            private bool deleteOriginals;            private Func<Photo, bool> selectPhotosFunction;            public Builder SetFindOnlyNewPhotos(bool newPhotosOnly)            {                this.newPhotosOnly = newPhotosOnly;                return this; // builder methods always return this instance so further configuration is possible.            }            public Builder SetDownloadFolder(string downloadPath)            {                this.downloadPath = downloadPath;                return this;            }            public Builder SetRenumberPhotos(bool reNumberPhotos)            {                this.reNumberPhotos = reNumberPhotos;                return this;            }            public Builder SetDeleteOriginalsAfterDownload(bool deleteOriginals)            {                this.deleteOriginals = deleteOriginals;                return this;            }            public Builder SetSelectPhotosFunction(Func<Photo, bool> selectPhotosFunction)            {                this.selectPhotosFunction = selectPhotosFunction;                return this;            }            public PhotoImporter Build(Camera camera)            {                PhotoImporter importer = new PhotoImporter(camera);                importer.newPhotosOnly = this.newPhotosOnly;                importer.reNumberPhotos = this.reNumberPhotos;                importer.deleteOriginals = this.deleteOriginals;                if(string.IsNullOrWhiteSpace(this.downloadPath))                    throw new InvalidOperationException(“No path specified.”);                if(!Directory.Exists(this.downloadPath))                    throw new InvalidOperationException(“Download Path does not exist.”);                importer.downloadPath = this.downloadPath;                                if (this.selectPhotosFunction == null)                    throw new InvalidOperationException(“Photo Selection function must be set.”);                                return importer;            }        }    }
Read less







cheong00  March 18, 2019


  0  Collapse this comment
Copy link
I would have create a static method .CreatePhotoImporter(), with parameter that is an object that wraps all required parameters in, then calls these “must be called in certain order” methods for the user before returning the object. Those methods could be changed to private if there’s no good reason to expose them.
Essentially it’s similar idea to what “parameter parsers” do.





Rob Eady  March 18, 2019


  0  Collapse this comment
Copy link
> I can’t think of something that prevents an object from being used after a particular method is called, with enforcement at compile time 
 
 -- Rust move semantics offer a neat solution here. A function like download could accept its DiscoveredPhotos argument as a value. If DiscoveredPhotos is not a `Copy`able type, this means transfering ownership, preventing the previous owner from using the value afterwards. This is quite commonly applied as part of the builder...Read more> I can’t think of something that prevents an object from being used after a particular method is called, with enforcement at compile time 
 
 — Rust move semantics offer a neat solution here. A function like download could accept its DiscoveredPhotos argument as a value. If DiscoveredPhotos is not a `Copy`able type, this means transfering ownership, preventing the previous owner from using the value afterwards. This is quite commonly applied as part of the builder pattern, where constructing the final type can consume the builder by taking it as a value.
 
In a sense Rust implements an affine type system.
 
// Edit: the formatting of comments here is awful. Everything gets ripped out, even paragraphs and line breaks!
Read less