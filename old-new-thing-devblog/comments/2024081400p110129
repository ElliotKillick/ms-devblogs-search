Jan Ringoš  August 20, 2024


  0  Collapse this comment
Copy link
There was this one counterintuitive thing that bugged me about lock scope guards: They don't introduce scope. So I solved it with custom implementation and the results are way more readable, see:
<code>
Read moreThere was this one counterintuitive thing that bugged me about lock scope guards: They don’t introduce scope. So I solved it with custom implementation and the results are way more readable, see:
if (auto guard = lock.share ()) {
    // read/shared access here
    if (auto guard2 = guard.upgrade ()) {
        // upgraded, can perform write/exclusive access here
    } else {
        // failed to upgrade, someone else is competing for access
    }
    // downgraded back to read/shared access here
}
Read less







Jan Steffens  August 16, 2024
· Edited

  0  Collapse this comment
Copy link
> If you use an anti-lock to counteract a lock held by the caller, then this invalidates the assumption that holding a lock across a function call protects the state guarded by the lock.
If the anti-lock requires access to the lock guard, then this can't happen unless the caller passes a reference to the guard, in which case it's aware that the callee might unlock the guard.
Rust's pretty popular 'parking_lot' crate has such an API...Read more> If you use an anti-lock to counteract a lock held by the caller, then this invalidates the assumption that holding a lock across a function call protects the state guarded by the lock.
If the anti-lock requires access to the lock guard, then this can’t happen unless the caller passes a reference to the guard, in which case it’s aware that the callee might unlock the guard.
Rust’s pretty popular ‘parking_lot’ crate has such an API on its guards called ‘unlocked’, which takes a closure and temporarily unlocks the mutex while the closure is running.
Read less







紅樓鍮  August 16, 2024
· Edited

  0  Collapse this comment
Copy link
Also note the devilish detail that  requires not just a reference to the guard, but an exclusive one () at that; this means the caller, who hands out access to the guard to the callee, is forbidden from also holding a reference (shared or mutable) to the protected data across the function call (and not requiring  for  would in fact be unsound, because any reference (to data that don't have interior mutability)...Read moreAlso note the devilish detail that unlocked() requires not just a reference to the guard, but an exclusive one (&mut) at that; this means the caller, who hands out access to the guard to the callee, is forbidden from also holding a reference (shared or mutable) to the protected data across the function call (and not requiring &mut for unlocked() would in fact be unsound, because any reference (to data that don’t have interior mutability) in Rust may assume the data they point to don’t get randomly mutated from outside). The caller is forced to abandon any reference, direct or indirect, to the protected data before they call such a callee, and reacquire any such reference after the call returns, which, if you’re astute enough, can be a signal to you that the data may not be the same at this point.
Read less






Colin Broderick  August 16, 2024


  0  Collapse this comment
Copy link
I generally like your brief style but such a dangerous tool needs much more careful analysis and justification. Another commenter described it as “punch a hole inside a critical section” which is exactly right. I am struggling to think of cases where breaking a lock from the outside is a good or useful or safe idea.





紅樓鍮  August 15, 2024
· Edited

  1  Collapse this comment
Copy link
I don't think it's a good idea to simply present ways you can "punch a hole inside a critical section" without mentioning the implications of doing so.
If you're using a mutex at all, you must be doing so to protect the mutation of some state (unsynchronized operations that are all reads are not a data race). A corollary of it is that every time you release a mutex, the next time you reacquire it, the...Read moreI don’t think it’s a good idea to simply present ways you can “punch a hole inside a critical section” without mentioning the implications of doing so.
If you’re using a mutex at all, you must be doing so to protect the mutation of some state (unsynchronized operations that are all reads are not a data race). A corollary of it is that every time you release a mutex, the next time you reacquire it, the mutable state may have changed. If you’re a reader, you’ll probably use the presence of a lock_guard in the scope as a visual cue that you can assume the state never changes inside that scope, but if you puncture the scope with an anti-lock, you suddenly no longer have that guarantee: inside the lower half of the scope, the value of the mutable state may have changed relative to its value in the upper half of the scope.
{
  // Assume `mtx` guards `config`
  lock_guard guard(mtx);
  // `config` is now immutable (?)

  foo(some_item, config); // A
  for (auto item : iterator1)
    bar(item, config); // B
  {
    // If we don't unlock here,
    // the app hangs when the user clicks "Change Config"
    anti_lock anti_guard(mtx);
    long_running_blocking_operation();
  }
  // Danger: `config` may have changed!
  baz(another_item, config); // C
}
And yet, you can still see that visual cue — the lock_guard — which is now giving you a false sense of immutability.
If the multi-step computation you’re doing with config requires config be consistent throughout, the correct solution is not to puncture the critical section, but to read out the entire config at once before you do any part of the computation, and stick to the local copy afterwards. I can certainly see anti-locks being useful in practice, but shaping its API after the regular lock is in my opinion going to lead programmers into the pit of failure more often that it does the pit of success.
EDIT: Just saw the last paragraph of the article.
Read less







F M  August 15, 2024
· Edited

  0  Collapse this comment
Copy link
You can scope your `unique_lock` instances instead:
{   std::unique_lock lock_stage_1{m_mutex};
    critical_sec_1();
};

none_critical_sec();

{   std::unique_lock lock_stage_2{m_mutex};
    critical_sec_2();
};
If lock+unlock sequences happen frequently in a short snippet, the design may have serious flaws and violate basic principles(SOLID…). In such cases before refactoring, just fast patching with simple calls to `lock` and `unlock` functions is at least more readable.





紅樓鍮  August 15, 2024
· Edited

  1  Collapse this comment
Copy link
Not only this, but you can simply call  on the  (note, not the ) when you need to temporarily release it, and call  afterwards to reacquire it. This works without using RAII itself because, at all points during the execution of the function, you want the mutex to be unlocked if you leave the function, and  guarantees that, regardless of if  has been manually called on it or not.
Read moreNot only this, but you can simply call unlock() on the unique_lock (note, not the mutex) when you need to temporarily release it, and call lock() afterwards to reacquire it. This works without using RAII itself because, at all points during the execution of the function, you want the mutex to be unlocked if you leave the function, and unique_lock guarantees that, regardless of if unlock() has been manually called on it or not.
Read less






Neil Rashbrook  August 15, 2024


  0  Collapse this comment
Copy link
As opposed to the lock anti-pattern, which is where you try to manage all of the locking and unlocking manually and overlook an edge case.





DB  August 14, 2024
· Edited

  0  Collapse this comment
Copy link
Why check that the pointer has a non-null address, when it comes from a reference, which cannot be null?
Also, why the unique_ptr and deleter complication, and not just a member reference and destructor? Is this to prevent copying automatically or such? Or maybe just because there’s a default ctor, but why is that needed?





Raymond Chen Author
August 14, 2024


  0  Collapse this comment
Copy link
The null test is a copy/pasta bug from the later version that takes a guard. I’ll fix that. The unique_ptr avoids the Rule of Five complicates that come with having a destructor.




Michael Taylor  August 14, 2024


  0  Collapse this comment
Copy link
>> These types go by various names, like std::lock_guard, std::unique_lock, or std::coped_lock
I think you mean `std::scoped_lock`.



Lucian Jalba  August 14, 2024


  2  Collapse this comment
Copy link
std::coped_lock is a C++-29 concept which keeps all the benefits of std::scoped_lock, but allows to safely continue even when the lock cannot be acquired. In simple terms, you don’t get a lock and you just live with it. /s