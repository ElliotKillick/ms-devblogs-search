Samuel Q  August 22, 2023


  0  Collapse this comment
Copy link
What benefit is there to using `char buffer[sizeof(T)]` as opposed to directly having the field be `T obj`? (Unfortunately my knowledge of the gritty details of how object lifetimes work is rusty)





紅樓鍮  August 23, 2023


  0  Collapse this comment
Copy link
Also be careful to align buffer‘s memory address suitably with alignas(T). (And here Raymond seems to have made a typo: there should be no [[...]] surrounding the alignas(T) because alignas is a keyword and not an attribute.)





Kalle Niemitalo  August 23, 2023


  0  Collapse this comment
Copy link
In Delete(), the `delete this;` statement calls the ~combined_control_block() destructor.  If there were a `T obj;` data member, then ~combined_control_block() would call the destructor of that data member.  But the T instance was already destructed by Destroy() and the second call could corrupt something, e.g. double free.




紅樓鍮  August 21, 2023


  1  Collapse this comment
Copy link
Actually, the functionality of separate_control_block<T> is subsumed by combined_control_block<std::unique_ptr<T>>, so technically you don’t need the former at all.





Aidan Garvey  August 23, 2023
· Edited

  0  Collapse this comment
Copy link
`seperate_control_block` contains a pointer to an object, but `combined_control_block` contains storage for the entire object, which means the control block’s size depends on the size of the object.
So the former is still needed for constructing a shared pointer which takes ownership of a pre-existing object.





紅樓鍮  August 24, 2023


  1  Collapse this comment
Copy link
The non-combined allocation version of  can use  like this:
<code>
The  takes care to destroy the , which in turn takes care to  , so everything adds up.
Read moreThe non-combined allocation version of std::shared_ptr<T> can use combined_control_block<std::unique_ptr<T>> like this:
shared_ptr(T *ptr)
    : object(ptr),
      control(new combined_control_block<std::unique_ptr<T>>({ptr}))
{}
The combined_control_block takes care to destroy the unique_ptr, which in turn takes care to delete ptr, so everything adds up.
Read less







Aidan Garvey  August 24, 2023


  0  Collapse this comment
Copy link
Ah, looks like I didn’t read your original comment closely enough. I missed that you had a unique_ptr in the combined_control_block as opposed to just a `T`. I wonder why the STL uses two different versions.