Markus Schaber  April 11, 2024


  0  Collapse this comment
Copy link
As much as I love reading your blogs: The more of your C++ articles I read, the more I'm convinced that C++ should die.
Most of them are actually "how to fight the language and standard library" aka "how to solve problems which simply don't exist in sane languages", instead of "how to solve that tricky, exotic problem" or "how to do this and that on my platform".
That's completely not your fault, as you...Read moreAs much as I love reading your blogs: The more of your C++ articles I read, the more I’m convinced that C++ should die.
Most of them are actually “how to fight the language and standard library” aka “how to solve problems which simply don’t exist in sane languages”, instead of “how to solve that tricky, exotic problem” or “how to do this and that on my platform”.
That’s completely not your fault, as you just write about interesting and tricky problems which come onto your (and your coworkers) desk.
But having almost 40 years of programming experience, and having worked as a C/C++ dev fulltime for 5 years back then in my dark youth, my impression is that C++ is extraordinarily complicated and complex to grasp (for both the user and those poor guys who have to create a compiler for that beast), instead of being supportive and guiding the dev to the right way.
And the more brain cells are required to fight the language and its pitfalls, the lower the productivity, and the higher the risk for bugs and security issues.
My hope is that Languages such as C#, Scala, Rust, Go and Swift will finally replace C/C++. All of them (and some more) are powerful, safe and more understandable replacements for application development, and at least Rust is also a fully capable systems programming language.
Read less







紅樓鍮  March 30, 2024


  0  Collapse this comment
Copy link
Bonus chatter: In Rust you can just write
<code>
(And Rust really will destruct the return value of  before it goes on to execute the next statement, which is different from the behavior of a regular  which is to keep the value alive until  goes out of scope.)
(This is also doable in other languages that have the wildcard pattern , such as OCaml.)
Bonus bonus chatter: I thought there's a C++ proposal about...Read moreBonus chatter: In Rust you can just write
let _ = important();
(And Rust really will destruct the return value of important() before it goes on to execute the next statement, which is different from the behavior of a regular let variable = ..; which is to keep the value alive until variable goes out of scope.)
(This is also doable in other languages that have the wildcard pattern _, such as OCaml.)
Bonus bonus chatter: I thought there’s a C++ proposal about _?
Read less







W L  March 31, 2024


  0  Collapse this comment
Copy link
Single ‘_’ is already a legal identifier in C++. I think it would be somewhat difficult to add new special semantics to it.





DB  April 1, 2024


  1  Collapse this comment
Copy link
Difficult and yet not impossible, since the proposal was accepted into C++26; see P2169R4 here





Raymond Chen Author
April 1, 2024


  0  Collapse this comment
Copy link
The catch is that anonymous variables are not discarded!



DB  March 29, 2024


  1  Collapse this comment
Copy link
> Note that this requires a C-style cast. You cannot static_cast or reinterpret_cast to void.
Can’t we? MSDN:
> Any expression can be explicitly converted to type void by the static_cast operator.





Denis Emelianov  March 29, 2024


  1  Collapse this comment
Copy link
And next we will have a proposal for [[nodiscard_even_with_ignore]] ?





W L  March 31, 2024


  1  Collapse this comment
Copy link
This does not create a matryoshka doll.[[nodiscard]] is already an agreement, API designers expressed their wishes, and API users made their own choices knowing this wish.
Moreover, no matter what you do, c style cast is always an available emergency exit.





Yukkuri Reimu  March 29, 2024


  0  Collapse this comment
Copy link
Yeah exactly my question. How many levels of this before you ask if it was really such a good idea to begin with?




Stuart Ballard  March 29, 2024
· Edited

  0  Collapse this comment
Copy link
The idiom of assigning to  looks weird to me, from a non-C++ programmer perspective. Would it be possible to define a function that could be used as ? Something like (based on the "possible implementation" of  here)
<code>
Would this be less idiomatic in C++ than assigning to ?
Read moreThe idiom of assigning to std::ignore looks weird to me, from a non-C++ programmer perspective. Would it be possible to define a function that could be used as my_ignore(important())? Something like (based on the “possible implementation” of std::ignore here)
template <typename T>
constexpr void my_ignore(T&&) const noexcept {}
Would this be less idiomatic in C++ than assigning to std::ignore?
Read less