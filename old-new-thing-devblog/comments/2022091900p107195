Zammis Clark  September 27, 2022


  0  Collapse this comment
Copy link
Nice, another reference on how to get the TEB for all architectures where there's a public nt port using msvc intrinsics.
I did essentially the same thing some years ago (except for the PEB, so did indeed take advantage of such a manual optimisation, for x86 and amd64): https://gist.github.com/Wack0/849348f9d4f3a73dac864a556e9372a5
It's missing E2; although I know where the TEB pointer is on that architecture from an architectural point of view, I don't know the MSVC intrinsic for it.
IIRC,...Read moreNice, another reference on how to get the TEB for all architectures where there’s a public nt port using msvc intrinsics.
I did essentially the same thing some years ago (except for the PEB, so did indeed take advantage of such a manual optimisation, for x86 and amd64): https://gist.github.com/Wack0/849348f9d4f3a73dac864a556e9372a5
It’s missing E2; although I know where the TEB pointer is on that architecture from an architectural point of view, I don’t know the MSVC intrinsic for it.
IIRC, I double checked in existing binaries where the PEB pointer was in the TEB.
Read less







Swap Swap  September 23, 2022
· Edited

  0  Collapse this comment
Copy link
The two MOV instructions are 9 bytes, while one MOV eax, fs:[0x34] (the last error number) is 6 bytes. So it's definitely shorter.
I don't understand the argument about the non-zero segment base. Don't we have a non-zero base in  mov     eax, dword ptr fs:[0x00000018] ?
We have to access it via fs: in both versions of the code, so why adding the second instruction would help with the performance?
This would...Read moreThe two MOV instructions are 9 bytes, while one MOV eax, fs:[0x34] (the last error number) is 6 bytes. So it’s definitely shorter.
I don’t understand the argument about the non-zero segment base. Don’t we have a non-zero base in  mov     eax, dword ptr fs:[0x00000018] ?
We have to access it via fs: in both versions of the code, so why adding the second instruction would help with the performance?
This would make sense if you want to access multiple fields from TEB. You can use the first instruction with fs: just once, then read from [eax+n1], [eax+n2], [eax+n3], and the code would be shorter and faster than reading from fs:[n1], fs:[n2], fs:[n3].
Read less







Raymond Chen Author
September 23, 2022


  1  Collapse this comment
Copy link
I think you repeated what I said in the paragraph (read to the end).




skSdnW  September 19, 2022


  0  Collapse this comment
Copy link
The TEB might grow but not every field is as important. Imagine how many billions of times Set/GetLastError is called every day around the world. Any speed/power optimizations surely would have been worth it for someone to assemble custom versions for x86…





MGetz  September 19, 2022
· Edited

  0  Collapse this comment
Copy link
Not sure why my brain latched on to this but I don't think:
<code>
is equivalent to
<code>
at all.
In the first  moves the  value at  into  then it defreferences that via  which is the critical difference. So  is not equivalent because that loads the value at  which may or may not be the same as what is being searched for. The point being there is an indirection here...Read moreNot sure why my brain latched on to this but I don’t think:
 mov     eax, dword ptr fs:[0x00000018]
 mov     eax, dword ptr [eax+n]
is equivalent to
mov     eax, dword ptr fs:[n]
at all.
In the first mov     eax, dword ptr fs:[0x00000018] moves the DWORD value at fsDescriptorBase+0x18 into eax then it defreferences that via mov     eax, dword ptr [eax+n] which is the critical difference. So mov     eax, dword ptr fs:[n] is not equivalent because that loads the value at fsDescriptorBase+n which may or may not be the same as what is being searched for. The point being there is an indirection here that the fold can’t take into account. This is borne out by the NtCurrentTeb returning a pointer. So I might be going crazy but I think the fold is impossible?
I checked a similar situation on godbolt:
static thread_local int foo = 4;
int square(int num) {
    return num * num + foo;
}
and got:
_TLS    SEGMENT
int foo DD    04H                           ; foo
_TLS    ENDS

num$ = 8
int square(int) PROC                                    ; square, COMDAT
        mov     rax, QWORD PTR gs:88
        mov     edx, DWORD PTR _tls_index
        imul    ecx, ecx
        mov     r9d, OFFSET FLAT:int foo
        mov     r8, QWORD PTR [rax+rdx*8]
        add     ecx, DWORD PTR [r8+r9]
        mov     eax, ecx
        ret     0
int square(int) ENDP
which again has to load the TLS area then use that address to load the actual value of foo
Read less







Kasper Brandt  September 19, 2022
· Edited

  1  Collapse this comment
Copy link
0x18 is the offset of _NT_TIB.Self on x86 – i.e. the linear address of the TIB, which coincides with the address of the TEB since the TIB is inlined as the first field of the TEB. And the TEB starts at the base of fs. In other words on x86 Windows *(fsDescriptorBase+0x18) == fsDescriptorBase. Therefore *(fsDescriptorBase+n) == *(*(fsDescriptorBase+0x18)+n)





Stefan Kanthak  September 19, 2022


  1  Collapse this comment
Copy link
OUCH: why haven't you looked at the TEB alias NT_TIB first?
dword ptr fs:[0x18] alias NT_TIB.self holds the linear address of the TEB
dword ptr fs:[44] and qword ptr gs:[88] alias TEB.ThreadLocalStoragePointer hold the address of an extraneous memory block, the _tls_array, which holds the addresses of the static TLS blocks.
OTOH accesses of TEB.TlsSlots[64], which holds the dynamic TLS data, could be folded.
Read moreOUCH: why haven’t you looked at the TEB alias NT_TIB first?
dword ptr fs:[0x18] alias NT_TIB.self holds the linear address of the TEB
dword ptr fs:[44] and qword ptr gs:[88] alias TEB.ThreadLocalStoragePointer hold the address of an extraneous memory block, the _tls_array, which holds the addresses of the static TLS blocks.
OTOH accesses of TEB.TlsSlots[64], which holds the dynamic TLS data, could be folded.
Read less







MGetz  September 20, 2022


  4  Collapse this comment
Copy link
> OUCH: why haven’t you looked at the TEB alias NT_TIB first?
> dword ptr fs:[0x18] alias NT_TIB.self holds the linear address of the TEB
I find this incredibly rude, the article doesn't indicate anywhere this might be the case and a reader would have no knowledge of this. I did not and I'm also not a kernel mode developer. So assuming that knowledge should be present is extremely rude and presumptuous. The article should be...Read more> OUCH: why haven’t you looked at the TEB alias NT_TIB first?
> dword ptr fs:[0x18] alias NT_TIB.self holds the linear address of the TEB
I find this incredibly rude, the article doesn’t indicate anywhere this might be the case and a reader would have no knowledge of this. I did not and I’m also not a kernel mode developer. So assuming that knowledge should be present is extremely rude and presumptuous. The article should be updated to include that as it’s critical to understanding why Raymond is treating a mov as an lea.
Read less







Stefan Kanthak  September 20, 2022
· Edited

  0  Collapse this comment
Copy link
AGAIN: you were to lazy to take a look at the definition of NT_TIB provided in WINNT.H!
“I’m also not a kernel mode developer”
But a naughty and apparently clueless kid.
OUCH²: NT_TIB alias TEB are user-mode components. The kernel-mode component is known as ETHREAD




Raymond Chen Author
September 19, 2022


  2  Collapse this comment
Copy link
The fold takes advantage of the Windows implementation detail that fs:[0x18] contains the base address of the fs register.





MGetz  September 19, 2022


  2  Collapse this comment
Copy link
Ah ok, that’s rather critical to call out, because the post is written as if it was replacing an lea and not a mov.