Nick  January 3, 2023


  0  Collapse this comment
Copy link
As an addendum to your second footnote, there's also two Mars movies that came six months apart in 2000.
It seems like there was a run of these back-to-back movies for the later part of the 1990s.  I've wondered if there was _someone_ in Hollywood that would see some new movie script getting shopped around and think "hey that's a good idea" and get a second script written ASAP to try and compete with it,...Read moreAs an addendum to your second footnote, there’s also two Mars movies that came six months apart in 2000.
It seems like there was a run of these back-to-back movies for the later part of the 1990s.  I’ve wondered if there was _someone_ in Hollywood that would see some new movie script getting shopped around and think “hey that’s a good idea” and get a second script written ASAP to try and compete with it, only to end up with both getting made.
Read less







Piotr Siódmak  December 24, 2022


  0  Collapse this comment
Copy link
Couldn’t they just disable ASLR for these processes? Isn’t there an app verifier switch to do that?





Joshua Hudson  December 25, 2022


  0  Collapse this comment
Copy link
Yes there is, but it’s not 100% effective. ntdll and kernel32.dll must be loaded at the same addresses in all processes (for compatability reasons…)
If you want to know how the fight goes, look at cygwin’s fork. Cygwin hates aslr.




chris ryan  December 23, 2022
· Edited

  0  Collapse this comment
Copy link
In general applications should not be using platform specific mechanisms. However, you can have a module/component that does, acting as a Hardware Abstraction Layer that implements some platform specific IPC or shared memory mechanism.
Since @Raymond Chen is referencing .DLLs thus windows, you can also use linker sections that are shared across all instances, using MSVC in a C or C++ sdk program.
<code>
The variables in the section ".SharedMemory" (shared_count & shared_buffer) are read/write shared (rws) by...Read moreIn general applications should not be using platform specific mechanisms. However, you can have a module/component that does, acting as a Hardware Abstraction Layer that implements some platform specific IPC or shared memory mechanism.
Since @Raymond Chen is referencing .DLLs thus windows, you can also use linker sections that are shared across all instances, using MSVC in a C or C++ sdk program.
#pragma data_seg (".SharedMemory")
int shared_count=0;
char shared_buffer[1024]="";
#pragma data_seg()
#pragma comment(linker,"/section:.SharedMemory,rws")
The variables in the section “.SharedMemory” (shared_count & shared_buffer) are read/write shared (rws) by all instances at load time by the linker/mapper.
You can name the section & variables whatever you want. It is the “rws” in the linker directive “/section:(.sectionname),rws” that is the ‘magic’.
learn.microsoft.com/en-us/cpp/build/reference/section-specify-section-attributes
Read less







Henke37  December 22, 2022


  2  Collapse this comment
Copy link
For those wondering, you can use based pointers to make the compiler do the ugly math for you.





Ismo Salonen  December 22, 2022


  0  Collapse this comment
Copy link
I once ported similar program ( from sco unix/hpux era).  I mapped known file to some address ( some where predetermined) and relocated the pointers there. Then saved the file as as strem to the original file ( the relocation address as stream name, relocation was expensive operation). Loading process mapped one of  those streams to correct address and if failed create new stream. Maximum 4 streams was ever generated ( in windows...Read moreI once ported similar program ( from sco unix/hpux era).  I mapped known file to some address ( some where predetermined) and relocated the pointers there. Then saved the file as as strem to the original file ( the relocation address as stream name, relocation was expensive operation). Loading process mapped one of  those streams to correct address and if failed create new stream. Maximum 4 streams was ever generated ( in windows xp era). One could also disable ASLR for relevant processes, that might help.
Read less







Joshua Hudson  December 22, 2022


  0  Collapse this comment
Copy link
I generated a different idea. Create a kernel mode driver that maps the address out of the kernel mode address range. To avoid difficulties, don’t map the address as visible in kernel mode (requires kpti enabled).
Note that I don’t recommend this. Use relative pointers please.