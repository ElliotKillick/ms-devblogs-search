Christian Ullrich  September 18, 2023
· Edited

  0  Collapse this comment
Copy link
A system_handle can be to all kinds of files, processes, synchronization objects, all proper serious kernel stuff … or a “DirectComposition surface”. I’m sure there’s a story behind that one.





skSdnW  September 22, 2023


  0  Collapse this comment
Copy link
FindFirstFile also returns a HANDLE that is not really a kernel handle. FindClose existing should be your first clue for that one.




Shawn Van Ness  September 15, 2023


  0  Collapse this comment
Copy link
iirc it’s just -1, right .. was this done as a performance optimization — because it’s so common to need a handle to the current process?
or were there some issues with process-shutdown, if a process holds open a (real) handle to itself?





Henke37  September 15, 2023


  0  Collapse this comment
Copy link
Processes can easily have a real handle to themselves. Such as doing a DuplicateHandle to its own memory.




Henke37  September 14, 2023


  2  Collapse this comment
Copy link
Another pseudo-handle value that you shouldn’t accidentally copy to another process is the one returned by GetCurrentThread. That’s -2 for those who are curious. And yes, it’s pretty much as powerful as the process handle, since it has THREAD_ALL_ACCESS on your current thread.





Richard Yu  September 14, 2023


  1  Collapse this comment
Copy link
“The 16-bit functions OpenFile, _lopen and _lcreat return -1 on failure”
Why not returning zero?
Did you notice that “_lopen” and “_lcreat” looks like POSIX’s open and creat?
So the answer is: because POSIX returns -1.





Yuri Khan  September 16, 2023


  1  Collapse this comment
Copy link
And if you want to dig deeper, POSIX could not return zero because zero is the standard input file descriptor. (Standard output and error are 1 and 2 respectively.)