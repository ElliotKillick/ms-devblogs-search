Hans van Leuken - Melis  May 19, 2022


  0  Collapse this comment
Copy link
I normally write my sort functions something like this to avoid if-statements. And get the equals case correct by design.
Other than readability is there a reason to write it with if’s instead?
int compare_3way_for_sorting(T const& a, T const& b)
{
    int a_key = key(a);
    int b_key = key(b);

    return a_key - b_key;
}





Farid Mehrabi  May 20, 2022


  0  Collapse this comment
Copy link
The spaceship operator is present now.





Christopher Lee  May 19, 2022


  0  Collapse this comment
Copy link
Subtraction may result in data type underflow; comparison operators avoid that possibility.  This blog has covered a similar topic previously in “On finding the average of two unsigned integers without overflow“.




R Samuel Klatchko  May 18, 2022


  0  Collapse this comment
Copy link
There’s a minor bug in your first sample:
// three-way comparison
int compare_3way_for_sorting(T const& a, T const& b)
{
    int a_key = key(a);
    ant b_key = key(b);

    if (a_key  b_key) return +1;
    return 0;
}
The type of `b` is ant; that said instead of changing it to `int`, perhaps make it `auto` so it would also compile if `key` returns a `tuple`.





Kevin Norris  May 17, 2022


  0  Collapse this comment
Copy link
> Indeed, in the Python programming language, this is the only way to sort. The ability to provide a custom comparison function was removed in Python 3. Instead, you pass a function that produces a sort key, and the sort occurs on the keys.
Just to clarify, you can in fact provide such a comparison function in Python, you just have to write it like this:
<code>
But that's a lot of boilerplate, even with functools.total_ordering, so...Read more> Indeed, in the Python programming language, this is the only way to sort. The ability to provide a custom comparison function was removed in Python 3. Instead, you pass a function that produces a sort key, and the sort occurs on the keys.
Just to clarify, you can in fact provide such a comparison function in Python, you just have to write it like this:
import functools

@functools.total_ordering
class MyCustomSortKey:
    def __init__(self, wrapped):
        self.wrapped = wrapped
        # wrapped is the value we're sorting.
        # Remember it for later.
    def __lt__(self, other):
        # compare self.wrapped to other.wrapped here...
    def __eq__(self, other):
        # ...and here...
    # No need to override the other operators.
    # functools.total_ordering does that for you.

sorted(some_list_of_things, key=MyCustomSortKey)
But that’s a lot of boilerplate, even with functools.total_ordering, so they helpfully also provided functools.cmp_to_key() to do it in one line, which is far more convenient than actually writing all that nonsense every time.
(Python’s metaprogramming capabilities are powerful and simple enough that you could write such a helper function yourself, if the standard library didn’t already provide it. You  can define the class inside of a function, and return the class, no weird template syntax or SFINAE logic required.)
Read less







Phil Sherwood  May 17, 2022


  0  Collapse this comment
Copy link
Looks like an extra return? I think just the first one is needed.
bool compare_less_for_sorting(T const& a, T const& b)
{
    return std::forward_as_tuple(a.name, a.height * a.width) <
    return std::forward_as_tuple(b.name, b.height * b.width);
}






Zenju Z  May 17, 2022
· Edited

  0  Collapse this comment
Copy link
Is there a reason why std::tie is not mentioned? Seems to be similar to std::forward_as_tuple, but shorter:

std::weak_ordering operator<=>(const T& lhs, const T& rhs)
{
    return std::tie(lhs.size, lhs.weight) <=>
           std::tie(rhs.size, rhs.weight);
}






Raymond Chen Author
May 17, 2022


  0  Collapse this comment
Copy link
(slaps forehead) Of course, std::tie. And since std::tie requires lvalues, you don’t have the “binding to a temporary” problem.