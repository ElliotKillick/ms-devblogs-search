Dave Gzorple  October 22, 2021


  0  Collapse this comment
Copy link
The documentation for this is actually really misleading, from your comment "If you call the CreateFile function directly, then you can pass the FILE_SHARE_DELETE sharing flag, and then you’ll be able to open the file even before MoveFileEx cleans up its handle" it implies that thread2 has to use FILE_SHARE_DELETE but the CreateFile docs seem to say, via "Enables subsequent open operations on a file or device to request delete access", that thread1 has to...Read moreThe documentation for this is actually really misleading, from your comment “If you call the CreateFile function directly, then you can pass the FILE_SHARE_DELETE sharing flag, and then you’ll be able to open the file even before MoveFileEx cleans up its handle” it implies that thread2 has to use FILE_SHARE_DELETE but the CreateFile docs seem to say, via “Enables subsequent open operations on a file or device to request delete access”, that thread1 has to use FILE_SHARE_DELETE.  Am I misreading either your comment or the CreateFile docs?  They seem to be saying the opposite thing.
Read less







Neil Rashbrook  October 23, 2021


  0  Collapse this comment
Copy link
You seem to have overlooked the previous paragraph, “If this flag is not specified, but the file or device has been opened for delete access, the function fails.” Thread 2 has to use FILE_SHARE_DELETE because thread 1 opened the file with DELETE permission.




skSdnW  October 22, 2021


  0  Collapse this comment
Copy link
Another reason it is not common, Win95 did not allow FILE_SHARE_DELETE.





Joshua Hudson  October 22, 2021


  0  Collapse this comment
Copy link
> the fact that the C runtime doesn’t give you an easy way to set this sharing flag may be a contributing factor.
Yup. That's pretty much a bug that's so old it's risky to fix, but not fixing it causes chronic problems. Almost nobody sets FILE_SHARE_DELETE when they should; and others spend disproportionate effort dealing with this.
I finally rebuilt the "unlocker" tool of infamy but this time I did it right; it tracks down the...Read more> the fact that the C runtime doesn’t give you an easy way to set this sharing flag may be a contributing factor.
Yup. That’s pretty much a bug that’s so old it’s risky to fix, but not fixing it causes chronic problems. Almost nobody sets FILE_SHARE_DELETE when they should; and others spend disproportionate effort dealing with this.
I finally rebuilt the “unlocker” tool of infamy but this time I did it right; it tracks down the handles in processes; suspends the processes, closes the handles, opens handles to NUL with the same handle ids and resumes the processes. To be fair, this was deployed against something that was leaking handles and not something that didn’t use FILE_SHARE_DELETE when it should.
Read less