Piotr SiÃ³dmak  January 14, 2022


  0  Collapse this comment
Copy link
Ah the luxury of being able to delete your mistakes. How I envy the Direct 2D team.





Jesse Natalie  January 13, 2022


  0  Collapse this comment
Copy link
The
/cstruct_out
 switch was added to the MIDL in the Win11 SDK I believe, and is documented here: https://docs.microsoft.com/en-us/windows/win32/midl/-cstruct-out.
I think only the D3D12 headers have been updated to use this new switch, at least last I checked. I feel like a bit of a celebrity for this change getting noted on this blog ðŸ™‚





Peter Atashian  January 13, 2022


  0  Collapse this comment
Copy link
I encountered this issue when providing Rust bindings to DirectX in the winapi-rs crate. At the time I could find zero acknowledgement from Microsoft that this issue existed and the official C bindings had the same issue, so I'm glad to see this post finally describe the issue and confirm things.
The solution we ended up using, because all COM interfaces were defined via macros, was to have a special #[fixme] attribute on methods that return...Read moreI encountered this issue when providing Rust bindings to DirectX in the winapi-rs crate. At the time I could find zero acknowledgement from Microsoft that this issue existed and the official C bindings had the same issue, so Iâ€™m glad to see this post finally describe the issue and confirm things.
The solution we ended up using, because all COM interfaces were defined via macros, was to have a special #[fixme] attribute on methods that return a small structure, and having special cases in the macro to adjust the parameters and handle the return type correctly. Weâ€™d squeeze in a pointer to the return type as a parameter between this and the rest of the parameters, and then read out the return value to return normally. You can see the macro definition here.
Read less







word merchant  January 14, 2022


  0  Collapse this comment
Copy link
Note to self in 2022: start to learn Rust.




Sunil Joshi  January 13, 2022


  0  Collapse this comment
Copy link
Does this issue arise in other Architectures? My understanding is that there is only one calling convention on x64 and ARM64.





Me Gusta  January 13, 2022


  0  Collapse this comment
Copy link
It could, because it isn't an issue caused by x86 having multiple calling conventions.
This is an issue where the compiler doesn't explicitly follow the documented ABI in one case (i.e. it doesn't pass back a structure in the edx:eax register pair for C++ class member functions.)
If, as an example, the compiler did the same thing for x64's calling convention where it passed out the result in the rax register for stand alone functions,...Read moreIt could, because it isnâ€™t an issue caused by x86 having multiple calling conventions.
This is an issue where the compiler doesnâ€™t explicitly follow the documented ABI in one case (i.e. it doesnâ€™t pass back a structure in the edx:eax register pair for C++ class member functions.)
If, as an example, the compiler did the same thing for x64â€™s calling convention where it passed out the result in the rax register for stand alone functions, but used an address passed in for class members then it would be the same situation.
Read less