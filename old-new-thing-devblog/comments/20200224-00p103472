Chris Guzak  March 7, 2020


  0  Collapse this comment
Copy link
Is the conclusion “Don’t use CopyRect anymore?”





紅樓鍮  February 25, 2020


  0  Collapse this comment
Copy link
Code in the .NET BCL uses “throw helpers” to throw exceptions for the same reason.  I always wondered why this is not done automatically by the compiler.





Neil Rashbrook  February 25, 2020


  0  Collapse this comment
Copy link
Having all those "trivial" functions as part of Windows actually made it possible to write trivial and maybe some not quite so trivial applications without linking the CRT. As I recall, although there was an API for it, there was no UI to reboot, except by pressing Ctrl+Alt+Del twice, which I'm not sure counts, as I don't think it was a proper shutdown. Just by using the basic MSVC compiler options (i.e. not playing around...Read moreHaving all those “trivial” functions as part of Windows actually made it possible to write trivial and maybe some not quite so trivial applications without linking the CRT. As I recall, although there was an API for it, there was no UI to reboot, except by pressing Ctrl+Alt+Del twice, which I’m not sure counts, as I don’t think it was a proper shutdown. Just by using the basic MSVC compiler options (i.e. not playing around with building an EXE manually) I was able to get the size of the resulting EXE down to 608 bytes, most of that from not linking the CRT, although the icon also weighed in at 1200 bytes.
Read less







Yuhong Bao  February 24, 2020


  0  Collapse this comment
Copy link
This reminds me of MulDiv. One problem is that the divide operator in C on x86-32 always calls a helper function for divides even for 64 by 32 divides because of the “divide overflow” exception, and the same was true on 16-bit too.





Neil Rashbrook  February 25, 2020


  0  Collapse this comment
Copy link
The other advantage of MulDiv is that it took three 16-bit parameters and returned a 16-bit result, which was readily expressed in assembler but not in C… I mean, you could write `a*(long)b/c` but that division is going to be a library call on the 8086. (And don’t even think about using floats… although I think Raymond already covered that.)





Yuhong Bao  February 25, 2020


  0  Collapse this comment
Copy link
MulDiv is not a trivial function either though.





Neil Rashbrook  February 26, 2020


  0  Collapse this comment
Copy link
Well, I guess the rounding (which I keep forgetting about) and overflow checking made it non-trivial; the core of the function would otherwise just be a couple of instructions.



Piotr Siódmak  February 24, 2020


  0  Collapse this comment
Copy link
Couldn’t you just use memcpy to copy a rectangle? It’s already there and probably already used by other parts of code, so it’s 0 bytes of overhead.





Raymond Chen Author
February 24, 2020


  0  Collapse this comment
Copy link
The overhead of memcpy is bigger than the overhead of CopyRect. memcpy would push an extra int (the number of bytes to copy, which takes 4 bytes since 8086 had no ‘push immediate’ instruction), and then follow up with an add sp, 10.




Kalle Niemitalo  February 24, 2020


  0  Collapse this comment
Copy link
I was going to post that you need to do “les  si, [bx-10]” before “lds  di, [bx-14]”, so that [bx-10] is read from the correct segment. However, if the addresses were [bp-10] and [bp-14] like in the other versions, then there would be no problem, because the segment would default to ss rather than ds.
Does 16-bit Windows have structured exception handling, and does it restore ds before it invokes the exception handlers?





Kalle Niemitalo  February 24, 2020


  0  Collapse this comment
Copy link
Also, movs copies from [ds:si] to [es:di].





Raymond Chen Author
February 24, 2020


  0  Collapse this comment
Copy link
Oops, should have been bp. 16-bit Windows did not have structured exception handling. It didn’t really have exception handling at all! There was a way to hook into the global fault handler, but that was usually a path to sadness.




Manuel Leclerc  February 24, 2020


  0  Collapse this comment
Copy link
Windows 1.01 on a PC-XT with 256Ko (emulation): https://www.pcjs.org/disks/pcx86/windows/1.01/cga/