Andrew Witte  June 7, 2022


  0  Collapse this comment
Copy link
Am I missing something but why is so much time still being spent here when almost no one is using these tools?
WinRT really is just a failed sandbox API platform built on top of Win32/Win64 correct? As illustrated above way to much abstraction is needed for it to even work making it complex slow & confusing. Feels like a rift that never closed in the MS world.





word merchant  June 9, 2022


  0  Collapse this comment
Copy link
“WinRT really is just a failed sandbox API” – are Windows devs not flocking to use WinRT? Honest question.





Me Gusta  June 9, 2022


  0  Collapse this comment
Copy link
That question isn't the question that you think it is. It is like asking "are devs not flocking to use C style functions" or "are devs not flocking to use classes/objects". The App Container portion of Windows wasn't success. This is what Andrew Witte is referring to.
But the UWP has historical issues that are difficult to talk about in such a limited response. But one of the big important points here is the Windows...Read moreThat question isn’t the question that you think it is. It is like asking “are devs not flocking to use C style functions” or “are devs not flocking to use classes/objects”. The App Container portion of Windows wasn’t success. This is what Andrew Witte is referring to.
But the UWP has historical issues that are difficult to talk about in such a limited response. But one of the big important points here is the Windows App SDK. Version 1.0 was released last November and 1.1 was only just released. This is an important point because this makes available the application model that was tied to the “failed sandbox” in regular desktop applications. What’s more, it is made available using the WinRT API.
Read less






紅樓鍮  June 8, 2022


  0  Collapse this comment
Copy link
My understanding is that COM and WinRT are really an object-oriented ABI and RPC protocol.  They’re kind of the equivalent of D-Bus on Linux and are not inherently platform-specific (xlang).





Me Gusta  June 8, 2022


  0  Collapse this comment
Copy link
Well, it isn't really necessary to tie the WinRT style API with the sandbox. There are some new Windows features that are only available through the WinRT style interfaces that also work with desktop applications. For example, Windows.UI.Composition was designed as a better replacement for DirectComposition. I have certainly used these tools in a desktop application, more recently it was a quick way to generate a SHA1 hash for files since it was simpler than...Read moreWell, it isn’t really necessary to tie the WinRT style API with the sandbox. There are some new Windows features that are only available through the WinRT style interfaces that also work with desktop applications. For example, Windows.UI.Composition was designed as a better replacement for DirectComposition. I have certainly used these tools in a desktop application, more recently it was a quick way to generate a SHA1 hash for files since it was simpler than using CNG.
What’s more, the Windows App SDK is built around the WinRT style API and it is not tied to the sandbox. The latest version even allows xcopy deployment.
Read less






Paulo Pinto  June 7, 2022


  0  Collapse this comment
Copy link
The table misses Visual Studio authoring support.





Paul Topping  June 6, 2022


  0  Collapse this comment
Copy link
So are there any significant downsides or limitations to the C++/WinRT choice in this context? It looks like an all-win situation here.





Paulo Pinto  June 7, 2022


  0  Collapse this comment
Copy link
A very big one for anyone that cares about productivity.
After 30 years of COM, and 5 after declaring C++/CX as deprectated, Visual Studio still has an IDL authoring experience that is comparable to using Notepad, and forces developers to manually merge generated code.
C++ developer productivy is definitly not a concern for the teams responsible to deprecate C++/CX and replace it with a less stelar developer experience.
Apparently they never used C++ Builder or QtCreator during the...Read moreA very big one for anyone that cares about productivity.
After 30 years of COM, and 5 after declaring C++/CX as deprectated, Visual Studio still has an IDL authoring experience that is comparable to using Notepad, and forces developers to manually merge generated code.
C++ developer productivy is definitly not a concern for the teams responsible to deprecate C++/CX and replace it with a less stelar developer experience.
Apparently they never used C++ Builder or QtCreator during the last decades.
Naturally for those whose development experience is not Visual Studio, rather WRL with VI, then C++/WinRT might feel appealing.
Read less







word merchant  June 6, 2022


  0  Collapse this comment
Copy link
Perhaps “C++17 and higher” if you work in an organisation burdened by the usual levels of corporate technical debt.
You might also miss the hat.





紅樓鍮  June 6, 2022
· Edited

  0  Collapse this comment
Copy link
Note that in theory you should be able to use a C++17-enabled compiler for writing one component in C++/WinRT while keeping the rest of the code base on a legacy compiler (or even in a different language), since everything a Windows Runtime component exposes has a stable ABI.





word merchant  June 7, 2022


  0  Collapse this comment
Copy link
Interesting idea…
I have to say that C++/WinRT seems to be a very slick product.
Is the pendulum swinging back towards C++ out there for Windows? I’ve not been a Windows dev for some years now, and ended on c# (not because of c# mind).