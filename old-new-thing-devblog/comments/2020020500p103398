R Pond  February 7, 2020


  0  Collapse this comment
Copy link
The VB in this chart is slightly incorrect – it will work only with parentheses, not with square brackets, to denote the array elements.
So, Sub M(value As T[]) should be Sub M(value As T()).  Or Sub M(value() As T) – the () can go either after the variable name or after the type, but not both.





Henke37  February 6, 2020


  0  Collapse this comment
Copy link
Wait, no option for a read and write array? That’s going to be awkward, especially for people who want to limit the amount of copying being done.





Raymond Chen Author
February 6, 2020


  0  Collapse this comment
Copy link
You can pass a PassArray and a FillArray as separate parameters. No copying.




Simon Clarkstone  February 6, 2020


  0  Collapse this comment
Copy link
Is “Function” at the end of the Javascript row supposed to have a capital F?
You got the names “PassArray”, “FillArray”, and “ReceiveArray” from C++/CX, right? (e.g. they are used here: https://docs.microsoft.com/en-us/cpp/cppcx/array-and-writeonlyarray-c-cx?view=vs-2019 )
Does the API promise only to write to the write-only arrays, and not even read what it has written?





Raymond Chen Author
February 6, 2020


  0  Collapse this comment
Copy link
“I gave the JavaScript prototypes in TypeScript notation so I could annotate the data types.” And it’s the other way around: C++/CX got the names from the Windows Runtime. FillArrays are write-only. Not sure if they can be read-back before returning. (It shouldn’t matter, should it? Are you planning to pass device memory as a FillArray target?)





Kalle Niemitalo  February 7, 2020


  0  Collapse this comment
Copy link
I could imagine a cross-process marshaler that temporarily maps most of the caller’s buffer to the callee process with write-only page permissions, and copies only any partial pages at the beginning and the end. Win32 does not have PAGE_WRITEONLY in Memory Protection Constants, though.



Kalle Niemitalo  February 5, 2020


  0  Collapse this comment
Copy link
For the C++/CX parameter case:
void M(Array<T>& value);
error C3699: ‘&’: cannot use this indirection on type ‘Platform::Array’
It needs a hat too:
void M(Array<T>^& value);