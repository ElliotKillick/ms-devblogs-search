Александр Алексеев  September 8, 2020


  0  Collapse this comment
Copy link
Perhaps the “best fit” strategies should be mentioned. For example, MultiByteToWideChar silently converts invalid 1252’s 0x81 code point to Unicode control character 0x0081 (and visa versa).





Bill Godfrey  September 1, 2020


  0  Collapse this comment
Copy link
The 256 characters starting from U+0100 to U+01FF are all "normal" characters and translate to and from with simple bit twiddling. These don't overlap with ASCII but if you need to carry bytes in a string package then that's probably not as an important criteria.
It wouldn't surprise me if someone's found a more efficient selection of 2ⁿ code-points in the first 64K of codepoints that exclude all control characters, joining characters, etc for use as...Read moreThe 256 characters starting from U+0100 to U+01FF are all “normal” characters and translate to and from with simple bit twiddling. These don’t overlap with ASCII but if you need to carry bytes in a string package then that’s probably not as an important criteria.
It wouldn’t surprise me if someone’s found a more efficient selection of 2ⁿ code-points in the first 64K of codepoints that exclude all control characters, joining characters, etc for use as a base-64-esque encoding method.
Read less







Joshua Hudson  September 1, 2020


  0  Collapse this comment
Copy link
Well if you’re going to do UTF-16, there are places with 256 contiguous Chinese characters.




Joshua Hudson  August 31, 2020


  0  Collapse this comment
Copy link
We've got some code where another developer used Windows-1252 for this. It turns out if the data starts as bytes the actual mapping table in the implementation doesn't change the few unallocated slots to FFFD but rather C1 control codes, which translate back to the same slots.
I think there's some compatibility hacks in the conversion table because it didn't bomb when more characters were added and we turned the 1252 strings back to bye arrays....Read moreWe’ve got some code where another developer used Windows-1252 for this. It turns out if the data starts as bytes the actual mapping table in the implementation doesn’t change the few unallocated slots to FFFD but rather C1 control codes, which translate back to the same slots.
I think there’s some compatibility hacks in the conversion table because it didn’t bomb when more characters were added and we turned the 1252 strings back to bye arrays. Yes, the wise guy was turning byte arrays into strings to stuff into a DB VARCHAR column.
Read less







Kasper Brandt  August 31, 2020


  0  Collapse this comment
Copy link
You could also just use ISO-8859-1 (ISO_8859-1:1987 / Code Page 28591) which corresponds exactly to the first 256 codepoints of Unicode.





Jan Kraetzschmar  August 31, 2020


  0  Collapse this comment
Copy link
Just make sure you’re not making round-trips across implementations which disagree on whether 0xE1 maps to sharp S (U+00DF) or small beta (U+03B2).