Marek Knápek  September 7, 2023


  0  Collapse this comment
Copy link
Or you can leverage the fact that most (all?) data structures are aligned in memory. Tree node will be always allocated at address ending with one or more (binary) zeros. Meaning child pointers will have zeros at the least significant end. Meaning you can use one of the tree walking algorithms marking the pointers you followed by putting one into them. If you ever find child pointer with one in it, you have cycle/graph. If...Read moreOr you can leverage the fact that most (all?) data structures are aligned in memory. Tree node will be always allocated at address ending with one or more (binary) zeros. Meaning child pointers will have zeros at the least significant end. Meaning you can use one of the tree walking algorithms marking the pointers you followed by putting one into them. If you ever find child pointer with one in it, you have cycle/graph. If you walk all the nodes without encounterig marked pointer, you have tree. Don’t forget to unmark all the pointers. This obviously doesn’t work in multithreaded environment. Doesn’t work in cases where child pointers are not pointers but integers indexing into some kind of vector. And probably in other cases.
Read less







Kārlis Gaņģis  September 6, 2023


  0  Collapse this comment
Copy link
The more proper approach for finding cycles (and one that can properly tell where is the cycle, not just that there is one) is Tarjan’s strongly connected components algorithm