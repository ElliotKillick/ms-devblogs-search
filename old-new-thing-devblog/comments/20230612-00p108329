Pados Károly  June 21, 2023
· Edited

  0  Collapse this comment
Copy link
> You may have a class that you want to participate in RVO or NRVO, but you also don’t want it to be moved. For example, it may contain a std::mutex, which is not movable. But you nevertheless have to declare a move constructor.
I think this needs a little correction. RVO since C++17 (e.g. test1 above) does not require a move constructor to be declared. It is only required for NRVO. You actually say this...Read more> You may have a class that you want to participate in RVO or NRVO, but you also don’t want it to be moved. For example, it may contain a std::mutex, which is not movable. But you nevertheless have to declare a move constructor.
I think this needs a little correction. RVO since C++17 (e.g. test1 above) does not require a move constructor to be declared. It is only required for NRVO. You actually say this correctly in the paragraph before that:
> To allow NRVO in C++17 (or RVO and NRVO in C++11), a move constructor must be available, …
… which then contradicts the next paragraph where you say you need the declaration to participate in “RVO or NRVO”, but in reality is only needed for NRVO (again, since C++17).
Read less







Pados Károly  June 21, 2023
· Edited

  0  Collapse this comment
Copy link
Some extra info for the uninitiated: The rules actually have to do with mandatory vs optional copy elision. RVO and NRVO are just specific cases for each, but there are other cases too where copy elision will or could happen. Whether it is mandatory or not dictates if a move constructor must be present.




Sukru Tikves  June 12, 2023
· Edited

  0  Collapse this comment
Copy link
I would expect the diagnostics message would not be very helpful in this context.
Actually... let me try...
<code>
Yes, you need to know what exactly is going on, otherwise one would not recognize failed RVO.
Read moreI would expect the diagnostics message would not be very helpful in this context.
Actually… let me try…
Undefined symbols for architecture arm64:
  "MyClass::MyClass(MyClass&&)", referenced from:
      test3() in test-9ef7d2.o
  "MyClass::MyClass()", referenced from:
      test1() in test-9ef7d2.o
      test2() in test-9ef7d2.o
      test3() in test-9ef7d2.o
  "_main", referenced from:
     implicit entry/start for main executable
ld: symbol(s) not found for architecture arm64
clang: error: linker command failed with exit code 1 (use -v to see invocation)

Yes, you need to know what exactly is going on, otherwise one would not recognize failed RVO.
Read less







Daniel Sturm  June 23, 2023


  0  Collapse this comment
Copy link
Damn and that’s clang. I don’t even want to imagine what eldritch horrors gcc or msvc generate.
C++ error messages are in an awful state and it’s impressive with what we put up with.