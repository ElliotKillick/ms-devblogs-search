Shawn Mueller  February 20, 2020


  0  Collapse this comment
Copy link
This article is wrong and bad advice. See the discussion here:
https://www.reddit.com/r/cpp/comments/e3glax/cheat_sheet_c_function_parameter_choices/f93at14/
And herb sutter here:
https://www.youtube.com/watch?v=xnqTKD8uD64&t=1h20m





Reuven Abliyev  February 25, 2020


  0  Collapse this comment
Copy link
According to the Herb’s video above,
Raymond’s blog is about “Option #3: Pass by value for Constructors”
And in this video about at 1:26:24 Herb says:”For constructor do consider option three”





Shawn Mueller  February 27, 2020


  0  Collapse this comment
Copy link
Yes, but it is ONLY for constructors, not for “setters” like the article author suggests.





Reuven Abliyev  March 4, 2020


  0  Collapse this comment
Copy link
1) Author wrote article about some programming technique.
2) You state that author is wrong and as evidence you provided link to the video
3) Speaker in the video confirms that this programming technique is certainly reasonable in some cases
4) Now you say that video is not related to the article at all
5) So why it was used in the statement (2) at the first place?




Tim Weis  February 23, 2020


  0  Collapse this comment
Copy link
You forgot to include the credibility indicator, something along the lines of: “According to someone on the internet, …”. Incidentally, according to someone else on the internet, this is perfectly reasonable (and even solves a very subtle issue).





Shawn Mueller  February 23, 2020


  0  Collapse this comment
Copy link
Herb Sutter is pretty damn credible.



Ismo Salonen  February 19, 2020


  0  Collapse this comment
Copy link
For vectors this might be good thing, depending on std:.vector implementation. But for strings with small buffer optimizations the small strings are copied once more than when having two overloads. Depending how time sensitive your application is this might be bad thing. Personally I’ll write both overloads usually, not always.





Phil Deets  February 19, 2020


  0  Collapse this comment
Copy link
One thing to be aware of here is that this prevents buffer reuse for the buffer within m_values. The move will always end up taking the buffer from the parameter and freeing the existing buffer in m_values, rather than copying the ints over to the existing buffer.





Em X  February 19, 2020


  0  Collapse this comment
Copy link
That’s just an implementation detail, not part of the contract. The contract here is that SetValue takes ownership of the passed-in value, and the post shows that there’s a perfectly correct way to do so without needing two different functions. If you want to copy the information into your existing buffer, you’re free to do so, instead of just taking the new one.





Phil Deets  February 20, 2020


  0  Collapse this comment
Copy link
My point is that if the caller passes you an lvalue, you will end up having one additional allocation over what would happen if you used vector's assignment operator for an lvalue reference. With this:
  void SetValue(std::vector const& value)
  {
    m_values = values;
  }
The implementation of vector will internally copy the ints if m_values has a buffer which is big enough to accommodate the values from...Read moreMy point is that if the caller passes you an lvalue, you will end up having one additional allocation over what would happen if you used vector’s assignment operator for an lvalue reference. With this:
  void SetValue(std::vector const& value)
  {
    m_values = values;
  }
The implementation of vector will internally copy the ints if m_values has a buffer which is big enough to accommodate the values from the parameter. When you do this:
  void SetValue(std::vector value)
  {
    m_values = std::move(values);
  }
You are forcing a new buffer to be allocated to create the parameter. That buffer is then moved into m_values and the original buffer within m_values is freed. There will never be buffer reuse for the case when the data is set from an lvalue reference. If SetValue is called frequently, that can be a significant performance regression.
The second function is perfectly correct, but the performance loss can be much higher than just the loss from the extra move.
Read less







Em X  February 22, 2020


  0  Collapse this comment
Copy link
Sorry, I didn't mean that the ABI was the contract, just the API (and perhaps not even then) if you can change arguments. Where performance is necessary, simplicity and clarity often have to be sacrificed.
If the ABI is a contract, then you have a lot more up-front decisions to make about where performance is necessary, or just shoot for performance in all cases even if it's a bit more complex to write and maintain. Or...Read moreSorry, I didn’t mean that the ABI was the contract, just the API (and perhaps not even then) if you can change arguments. Where performance is necessary, simplicity and clarity often have to be sacrificed.
If the ABI is a contract, then you have a lot more up-front decisions to make about where performance is necessary, or just shoot for performance in all cases even if it’s a bit more complex to write and maintain. Or break un-recompiled callers on version upgrades.
Read less





David Lowndes  February 19, 2020


  0  Collapse this comment
Copy link
value/values typos?