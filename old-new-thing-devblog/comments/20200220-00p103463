Matteo Italia  February 24, 2020


  0  Collapse this comment
Copy link
Generally I just take by copy even in this case. Move constructors and destructors for moved-out objects are supposed to be dirty cheap; ultimately looking at the generated code the worse that happens is a bit of code bloat for code paths that aren't "really" taken (e.g. a branch + a call to `delete` that won't ever be invoked), but at runtime the difference is not really visible, and at compile-time you avoid duplication and...Read moreGenerally I just take by copy even in this case. Move constructors and destructors for moved-out objects are supposed to be dirty cheap; ultimately looking at the generated code the worse that happens is a bit of code bloat for code paths that aren’t “really” taken (e.g. a branch + a call to `delete` that won’t ever be invoked), but at runtime the difference is not really visible, and at compile-time you avoid duplication and keep the fact that you aren’t the “final” destination of the passed-in `std::vector` (or whatever) as an implementation detail.
Read less







Zachary Turner  February 21, 2020


  0  Collapse this comment
Copy link
I think the issue here isn't that "you cannot forward uniform initialization", it's that you can't even use uniform initialization in the first place.  Or at least, not in a deduced context, because `{a.begin(), b.begin()};` could mean anything.  is it a list, a vector, a map, a `Foo`?  If you spell this out at the call site, I think the uniform initialization syntax works just fine.   Does `CreateWidgetWithValues(std::vector{ range.begin(), range.end()...Read moreI think the issue here isn’t that “you cannot forward uniform initialization”, it’s that you can’t even use uniform initialization in the first place.  Or at least, not in a deduced context, because `{a.begin(), b.begin()};` could mean anything.  is it a list, a vector, a map, a `Foo`?  If you spell this out at the call site, I think the uniform initialization syntax works just fine.   Does `CreateWidgetWithValues(std::vector{ range.begin(), range.end() });` work and allow you to have only a single implementation?
Read less







Raymond Chen Author
February 21, 2020


  0  Collapse this comment
Copy link
Yes, you can explicitly construct the vector, but I was looking for a drop-in replacement.




Shawn Mueller  February 20, 2020


  0  Collapse this comment
Copy link
The premise that you don’t need const T& and T&& when you’re keeping values is incorrect. See the discussion here: https://www.reddit.com/r/cpp/comments/e3glax/cheat_sheet_c_function_parameter_choices/f93at14/
And herb sutter here:
https://www.youtube.com/watch?v=xnqTKD8uD64&t=1h20m