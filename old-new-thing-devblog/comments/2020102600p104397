Michael Entin  October 29, 2020


  0  Collapse this comment
Copy link
Is there some macro to define before including  to only declare prototypes of intrinsics available for specific technology?
Customer desire to have this compile-time checked is very understandable, and it should be simple to define such macro, and sprinkle  with conditional preprocessor to only enable appropriate intrinsics.





‪ ‪  October 27, 2020


  0  Collapse this comment
Copy link
GCC and Clang behave as customers expect.
Well, I prefer the behavior of MSVC.





Vk TestA  October 30, 2020


  0  Collapse this comment
Copy link
Why is it preferable? I think in this particular case “explicit is better than implicit”. And it’s not hard to mark the functions where you really need something not supported in the mode selected by command-line switch with [[gnu::target(“sse4.1”)]]





Danielix Klimax  November 1, 2020


  0  Collapse this comment
Copy link
Hm, how does it handle non-SSE instructions (3DNow and XOP/FMA4, (V)AES, SHA and other special cases).



Danielix Klimax  October 26, 2020


  0  Collapse this comment
Copy link
A thing: There is no /arch: SSE4. Compiler only supports IA32, SSE, SSE2, AVX, AVX2 and AVX512. (First three are valid only in x86 compilation) Meaning that customer wouldn’t be able at all to use SSE3, SSSE3 and SSE4.x if arch flag worked the way they thought…





Yukkuri Reimu  October 26, 2020


  0  Collapse this comment
Copy link
It surprises me that people need this explained





Vk TestA  October 30, 2020


  0  Collapse this comment
Copy link
People need this explained because it's surprising. Consider sane compiler, e.g. clang: https://godbolt.org/z/6K57Tj
[[gnu::target("default")]] void something(int alpha)
{
    __m128i v = _mm_load_si128(&mem);
    // ... SSE2 version ...
}
[[gnu::target("sse4.1")]] void something(int alpha)
{
    __m128i v = _mm_load_si128(&mem);
   // using SSE4.1 is OK here.
    mem = _mm_insert_epi32(v, alpha, 3);
}
void test_something() {
   // The right function...Read morePeople need this explained because it’s surprising. Consider sane compiler, e.g. clang: https://godbolt.org/z/6K57Tj
[[gnu::target(“default”)]] void something(int alpha)
{
    __m128i v = _mm_load_si128(&mem);
    // … SSE2 version …
}
[[gnu::target(“sse4.1”)]] void something(int alpha)
{
    __m128i v = _mm_load_si128(&mem);
   // using SSE4.1 is OK here.
    mem = _mm_insert_epi32(v, alpha, 3);
}
void test_something() {
   // The right function would be picked automatically.
    something(42);
}
There you can easily write different versions of functions and compiler will do all the right things: stop compilation if you use improper intrinsic, pick the right version if you support more than one CPU, etc.
As you can see behavior MSVC exhibits is not only not needed, it’s obviously harmful: if you are planning to write two versions of the code then you would like to be sure that the one which is not supposed to use SSE4… doesn’t use it.
MSVC fails even at simple detection phase… this is not surprising, though: MSVC was never all that good as pure C++ compiler, it’s strength lies with tight integration with other Visual Studio tools… some of which are superb and leave anything you may find on other platforms in the dust.
Read less