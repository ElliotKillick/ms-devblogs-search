Alexis Ryan  January 2, 2022


  0  Collapse this comment
Copy link
C++ compilers oddly tend to be ok calling non virtual methods on null objects even if that's headed into undefined behaviour territory. Better hope the method checks this for null.Sounds like the projection is probably doing tnis with the methods for String
Imo empty string should be different to null strings as a null thing is not a thing while an empty string is still a string. Most of the time this tends to be the...Read moreC++ compilers oddly tend to be ok calling non virtual methods on null objects even if that’s headed into undefined behaviour territory. Better hope the method checks this for null.Sounds like the projection is probably doing tnis with the methods for String
Imo empty string should be different to null strings as a null thing is not a thing while an empty string is still a string. Most of the time this tends to be the case so seems a bit odd for HSTRING to go against expected conventions
Read less







MGetz  January 4, 2022


  0  Collapse this comment
Copy link
So this is an interesting one, C++11 and beyond forbid exactly that calling an instance method on a null  pointer is explicitly undefined behavior. Unfortunately some code bases rely on that behavior. I can't recall the specific code bases but I know that the Linux Kernel has run into a version of this as well to the point they now compile with  explicitly. I know some of the libraries used by Chromium (and...Read moreSo this is an interesting one, C++11 and beyond forbid exactly that calling an instance method on a null this pointer is explicitly undefined behavior. Unfortunately some code bases rely on that behavior. I can’t recall the specific code bases but I know that the Linux Kernel has run into a version of this as well to the point they now compile with -fno-delete-null-pointer-checks explicitly. I know some of the libraries used by Chromium (and thus Edge and Chrome) have relied on this behavior in the past too. But there has been a concerted effort to clean that up to prevent potential issues.
Read less







Raymond Chen Author
January 3, 2022
· Edited

  0  Collapse this comment
Copy link
In some languages (like C++), strings are value types. There is no “null” value for std::string. Even in languages where strings are reference types, distinguishing an empty string from a null string can be cumbersome (such as in JavaScript and Perl), and coding conventions generally consider empty and null strings as equivalent.





Nick  January 6, 2022
· Edited

  0  Collapse this comment
Copy link
Even in a language like C#  tries to skirt the line between reference and value.  It has value equality and assignment semantics, immutability, compile-time const-ness and interning... but is always showing it's true reference self whenever null shows up.
I've often wished the C# language designers had gone all-in and made string a value object alongside int.  Maybe it would be clunky, but using a special  value to represent a missing string...Read moreEven in a language like C# string tries to skirt the line between reference and value.  It has value equality and assignment semantics, immutability, compile-time const-ness and interning… but is always showing it’s true reference self whenever null shows up.
I’ve often wished the C# language designers had gone all-in and made string a value object alongside int.  Maybe it would be clunky, but using a special string.Null value to represent a missing string would probably be a decent tradeoff in both readability (such as foo.IsNullOrEmpty()) as well as reducing a lot of null reference exceptions.
Maybe the price of all the extra boxing (especially pre-generics) was a deterrent.
Read less





David Wolff  December 30, 2021


  0  Collapse this comment
Copy link
> That’s right: I dereferenced a null pointer and it felt good.
Oh bravo!