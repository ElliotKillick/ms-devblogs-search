Neil Rashbrook  June 28, 2024


  0  Collapse this comment
Copy link
My attempt would have been:
<code>
Read moreMy attempt would have been:
template<class T> struct remove_all_pointers { typedef T type; };
template<class T> struct remove_all_pointers<T*> { typedef typename remove_all_pointers<T>::type type; };
template<class T> struct remove_all_pointers<T* const> { typedef typename remove_all_pointers<T>::type type; };
template<class T> struct remove_all_pointers<T* volatile> { typedef typename remove_all_pointers<T>::type type; };
template<class T> struct remove_all_pointers<T* const volatile> { typedef typename remove_all_pointers<T>::type type; };

using test = remove_all_pointers<int*const*volatile*>::type;
Read less







LB  June 28, 2024
· Edited

  0  Collapse this comment
Copy link
This works when you can use partial specialization, but sometimes the recursive template thing you want to do can’t be implemented using partial specialization. Though, maybe C++20 constraints might come to the rescue somehow? I haven’t experimented with them much yet.




LB  June 27, 2024


  0  Collapse this comment
Copy link
Sounds like a job for std::type_identity, much like how I suggested in another comment on that prior post.