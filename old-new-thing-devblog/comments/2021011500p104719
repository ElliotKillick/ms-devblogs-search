紅樓鍮  January 17, 2021


  0  Collapse this comment
Copy link
I strongly suggest we have a new “C++” tag dedicated to the documentation of the hijinks of the C++ language.





Jim Lyon  January 15, 2021


  0  Collapse this comment
Copy link
For this reason, I habitually put “explicit” on every constructor, except copy constructors. (If you put explicit on a copy constructor, your object becomes non-copyable, defeating the point of the constructor.)





Theo Belaire  January 15, 2021


  0  Collapse this comment
Copy link
This exact issue with a very similar class caused me so much grief in the past.
Even worse I think
Buffer buffer = { 3  };
will try and use the first one or something?  This exact issue is what killed my interest in C++ (after a week or two of debugging segfaults).  Just so unhappy when I figured out it was my fault for not declaring the constructor explicit.  I haven’t taken a C++ job since then.





Jacob Manaker  January 16, 2021


  0  Collapse this comment
Copy link
Nope!  According to https://en.cppreference.com/w/cpp/language/list_initialization, an initializer_list constructor is preferred to a non-initializer_list constructor (see the sixth bullet under "Explanation").  This fits with the C++ heuristic that you want to use curly brackets when listing out the values in your object, but parentheses when specifying parameters to a (constructor) method.  Thus: <code>
I love this language, but that might be the Stockholm Syndrome speaking.
Read moreNope!  According to https://en.cppreference.com/w/cpp/language/list_initialization, an initializer_list constructor is preferred to a non-initializer_list constructor (see the sixth bullet under “Explanation”).  This fits with the C++ heuristic that you want to use curly brackets when listing out the values in your object, but parentheses when specifying parameters to a (constructor) method.  Thus:
Buffer buffer1{3}; //length 1, contains 3
Buffer buffer2(3); //length 3, contents unspecified
I love this language, but that might be the Stockholm Syndrome speaking.
Read less







gast128  January 17, 2021


  0  Collapse this comment
Copy link
I stumbled upon this problem years ago since std::vector has a similar interface (i.e. one with count and one with an initializer_list):
<code>
The curly brace initialization is unfortunately not a drop in replacement. std::vector should have added and support for an unambiguous initialization for the 'count' overload; e.g. using an extra enumerate argument.
I like C++ but the language has sharp edges.
Read moreI stumbled upon this problem years ago since std::vector has a similar interface (i.e. one with count and one with an initializer_list):
std::vector<int>  vec1{5}; // invokes vector(std::initializer_list)
std::vector<int>  vec2(5); // invokes vector(size_t count)

The curly brace initialization is unfortunately not a drop in replacement. std::vector should have added and support for an unambiguous initialization for the ‘count’ overload; e.g. using an extra enumerate argument.
I like C++ but the language has sharp edges.
Read less







Alex Cohn  January 21, 2021


  0  Collapse this comment
Copy link
Another unfortunate issue with std::vector is that there is no reserve constructor.