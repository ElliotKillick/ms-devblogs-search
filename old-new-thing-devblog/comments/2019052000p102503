W S  May 20, 2019


  0  Collapse this comment
Copy link
I believe Windows 95 uses one selector per thread “TEB” (TIB) and the limit would apply.





George Gonzalez  May 20, 2019


  0  Collapse this comment
Copy link
The the very old days, while still programming in real mode, with a Pentium, we would often be rather short of registers inside an inner loop while doing VGA graphics with DPMI.   Memory is fuzzy but I think we would use FS and GS as temporary registers.  That probably didn't translate to any CPU mode where those registers act as true protected-mode segment descriptors.  Did Windows 95/98/Me allow you to muck with FS and GS?  
Read moreThe the very old days, while still programming in real mode, with a Pentium, we would often be rather short of registers inside an inner loop while doing VGA graphics with DPMI.   Memory is fuzzy but I think we would use FS and GS as temporary registers.  That probably didn’t translate to any CPU mode where those registers act as true protected-mode segment descriptors.  Did Windows 95/98/Me allow you to muck with FS and GS?  
Read less







Julien Oster  May 20, 2019


  0  Collapse this comment
Copy link
In vm86 mode, which is what those Windows versions used to provide 16bit Windows (and DOS) application support, as far as I remember there wasn’t even a way to trap segment register loads, so that would make it almost certainly possible. Unless the kernel maybe looked at the segment registers of the vm86 task at inopportune times and then expected them to be sensible, but that sounds unlikely. But that’s probably not what you meant. In...Read moreIn vm86 mode, which is what those Windows versions used to provide 16bit Windows (and DOS) application support, as far as I remember there wasn’t even a way to trap segment register loads, so that would make it almost certainly possible. Unless the kernel maybe looked at the segment registers of the vm86 task at inopportune times and then expected them to be sensible, but that sounds unlikely. But that’s probably not what you meant. In protected mode tasks (i.e. 32bit Windows), segment descriptors are looked up and cached in hidden registers on segment register load, and any problem doing so would cause a fault, so you cannot use them as general purpose registers. My memory is also fuzzy, so take this with a grain of salt. 
Read less







Michael Getz  May 20, 2019


  0  Collapse this comment
Copy link
it would depend on if the application was intended for real mode 16 bit or protected mode 16bit IIRC. In protected mode the 16 bit code runs in a 32 bit space (windows 98 or later). The main difference is that things are thunked for it to make the jumps to 32bit code. Windows 95 did much the same but in reverse IIRC as the user mode was all 16bit, 32bit pointers would be thunked...Read moreit would depend on if the application was intended for real mode 16 bit or protected mode 16bit IIRC. In protected mode the 16 bit code runs in a 32 bit space (windows 98 or later). The main difference is that things are thunked for it to make the jumps to 32bit code. Windows 95 did much the same but in reverse IIRC as the user mode was all 16bit, 32bit pointers would be thunked to 16 bit system DLLs etc. Real mode apps of course all bets were off as they were not designed to multitask.
Read less







Julien Oster  May 20, 2019


  0  Collapse this comment
Copy link
Yeah, I was specifically talking about vm86 mode, which emulates real mode. I’m surprised to hear that there was support for 16bit protected mode applications at all in Windows. What was it used for?





Michael Getz  May 20, 2019


  0  Collapse this comment
Copy link
Mostly supporting windows 95/3.1 natively as they ran a 16bit usermode unless you used WIN32s. 16bit applications after that still technically ran in a VDM but it was protected mode the whole time. The WIN16 api was pretty extensive and used by quite a lot of apps, including Installshield which was the most common installer until x64 came along. People forget that in x86 windows you can mix 16bit code and 32bit code in the...Read moreMostly supporting windows 95/3.1 natively as they ran a 16bit usermode unless you used WIN32s. 16bit applications after that still technically ran in a VDM but it was protected mode the whole time. The WIN16 api was pretty extensive and used by quite a lot of apps, including Installshield which was the most common installer until x64 came along. People forget that in x86 windows you can mix 16bit code and 32bit code in the same application. Raymond gave an explaition of the whole thing in Why can’t you thunk between 32-bit and 64-bit Windows?
Read less