Ulysses  November 17, 2019


  0  Collapse this comment
Copy link
Many people get this wrong, but I’m a little disappointed that you have too.
Double (et al) buffering is a specific setup where two or more fullscreen GPU buffers take turns driving the display signal. It plays nice with the display refresh cycle to provide coherent frames. What you describe is merely called buffering, back buffering, or offscreen rendering.





cheong00  November 11, 2019


  0  Collapse this comment
Copy link
The recurring pattern of these questions typically involves something that does A, B, C, D and E, and the user just want to remove D behavior but don’t want to do A, B, C and E themselves.





Harold H  November 11, 2019


  0  Collapse this comment
Copy link
An interesting and educational exercise, BUT, it seems to me, there's a problem:
"the diagonal line is drawn from corner to corner of the old window size."
So, yes, you have eliminated the "flicker" of the window being redrawn, but you've introduced a new problem.  When the user resizes the window, the content all stays the same.  Having the diagonal line drawn to the old window size will look strange and may not be what...Read moreAn interesting and educational exercise, BUT, it seems to me, there’s a problem:
“the diagonal line is drawn from corner to corner of the old window size.”
So, yes, you have eliminated the “flicker” of the window being redrawn, but you’ve introduced a new problem.  When the user resizes the window, the content all stays the same.  Having the diagonal line drawn to the old window size will look strange and may not be what the user wants.
Read less







Brian MacKay  November 12, 2019


  0  Collapse this comment
Copy link
Very good management of invalidation regions has been the mainstay of creating reactive graphical Windows apps since the days of 16-bit.  If you move a rectangle, you would inflate the initial rectangle bounds slightly, invalidate that inflated rectangle and then invalidate the new (slightly inflated) rectangle position.  If you re-route a line connection between two rectangles, you do the same thing, but this time with rectangles drawn around each line segment (for the...Read moreVery good management of invalidation regions has been the mainstay of creating reactive graphical Windows apps since the days of 16-bit.  If you move a rectangle, you would inflate the initial rectangle bounds slightly, invalidate that inflated rectangle and then invalidate the new (slightly inflated) rectangle position.  If you re-route a line connection between two rectangles, you do the same thing, but this time with rectangles drawn around each line segment (for the initial and final position).  If you make the window larger, you invalidate the rectangles that represent the newly shown region of the screen.  I wrote a bunch of graphical apps back in the 90s and never used double-buffering.
Read less







Ivan Kljajic  November 15, 2019


  0  Collapse this comment
Copy link
True. But when it’s not your code you have to sigh and briefly wonder if for() loops are still that slow.




Edward Wohlman  November 12, 2019


  0  Collapse this comment
Copy link
Presumably you're mainly concerned about the cost of a full redraw while you are dragging the window border around, as it will keep firing off redraws every few pixels of resize.
So you can use this trick of just invalidating the rightmost edge of the window during the resize, and once the user releases the mouse button do a single full redraw to update the whole window including the diagonal line.
That keeps things fluid...Read morePresumably you’re mainly concerned about the cost of a full redraw while you are dragging the window border around, as it will keep firing off redraws every few pixels of resize.
So you can use this trick of just invalidating the rightmost edge of the window during the resize, and once the user releases the mouse button do a single full redraw to update the whole window including the diagonal line.
That keeps things fluid while minimizing the amount of work being wasted before the final size has been reached.
Read less







Paul Mercer  November 11, 2019


  0  Collapse this comment
Copy link
The diagonal line was provided to show if the full windows was or wasn’t updated – purely for demonstration purposes. If the entire window needed redrawing then a typical double buffered approach as mentioned in the article would probably be best.