Neil Rashbrook  May 19, 2022
· Edited

  0  Collapse this comment
Copy link
Whereas in JavaScript the || operator does exactly what you want, so you can just write
arr.sort((a, b) => key1(a) - key1(b) || key2(a) - key2(b) || key3(a) - key3(b));





R Samuel Klatchko  May 19, 2022


  0  Collapse this comment
Copy link
Any reason you didn’t write compare_less_for_sorting using compare_3way_for_sorting:
bool compare_less_for_sorting(T const& a, T const& b)
{
    return compare_3way_for_sorting(a, b) == -1;
}





Patrick  May 18, 2022
· Edited

  0  Collapse this comment
Copy link
I haven’t written real C++ code in about a decade. Is it just me or has C++ std::gotten<a>(std::ref([&] lot) harder to read <=> it used to?





Me Gusta  May 18, 2022


  0  Collapse this comment
Copy link
The other option is that if you have been out of the loop for that length of time then you wouldn't have kept up with the changes. C++11 added a lot, C++14, 17 and 20 added more.
Think about it, it is the same with English sentences. The ability to read it and how easy it is to read it is based upon your understanding of grammar and word meanings. If you come across unfamiliar...Read moreThe other option is that if you have been out of the loop for that length of time then you wouldn’t have kept up with the changes. C++11 added a lot, C++14, 17 and 20 added more.
Think about it, it is the same with English sentences. The ability to read it and how easy it is to read it is based upon your understanding of grammar and word meanings. If you come across unfamiliar words, if there is a sentence structure that you don’t quite understand or if you don’t get some grammatical construct then it makes reading harder.
I’d guess that this is the position you are in. If that is so then C++ would be harder to read when you see lambdas, tuples, r-value references and the 3 way comparison operator which was never part of C++98/03.
Read less






紅樓鍮  May 18, 2022
· Edited

  0  Collapse this comment
Copy link
I considered... creating a delayed-comparison wrapper... we end up comparing the same two  objects twice
You could use some kind of "heterogeneous generator" coroutine:
<code>
This would even have the advantage that intermediate results can be reused to compute multiple subkeys:
<code>
Read moreI considered… creating a delayed-comparison wrapper… we end up comparing the same two defer_comparison objects twice
You could use some kind of “heterogeneous generator” coroutine:
unsafe_heterogeneous_generator<
    const string & /* name */,
    const string & /* connector name */,
    year_month_day /* manufacturing date */>
keys(const T &t) {
  co_yield t.name;

  auto connector = t.GetConnector();
  co_yield connector.name;

  co_yield LookupManufacturingDate(t.part_number);
}

template <typename T>
weak_ordering
compare_3way_for_sorting(const T &a, const T &b) {
  auto result = weak_ordering::equivalent;
  zip(keys(a), keys(b)).for_each([&](auto kab) {
    result = kab.first <=> kab.second;
    if (result == weak_ordering::equivalent)
      return control_flow::continue_;
    else
      return control_flow::break_;
  });
  return result;
}
This would even have the advantage that intermediate results can be reused to compute multiple subkeys:
auto connector = t.GetConnector();
co_yield connector.name;
co_yield connector.LookupManufacturingDate(t.part_number);
Read less