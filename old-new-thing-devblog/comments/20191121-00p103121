Neil Rashbrook  November 22, 2019


  0  Collapse this comment
Copy link
So what you're saying is that they're optimising for the common case where two coroutines are calling each other. Each coroutine resumes at the point where it called the other coroutine, so when that coroutine transfers back, you want to predict the coroutine transfer instruction to transfer to to the address after the previous coroutine transfer instruction. One way of doing that would be to have a dedicated predictor register for that address, but the...Read moreSo what you’re saying is that they’re optimising for the common case where two coroutines are calling each other. Each coroutine resumes at the point where it called the other coroutine, so when that coroutine transfers back, you want to predict the coroutine transfer instruction to transfer to to the address after the previous coroutine transfer instruction. One way of doing that would be to have a dedicated predictor register for that address, but the top of the predictor stack works just as well, and is presumably simpler to implement.
Read less







MNGoldenEagle  November 21, 2019


  0  Collapse this comment
Copy link
So I’m a bit confused: why does the instruction replace the head of the predictor stack on a coroutine call instead of pushing it?





Raymond Chen Author
November 21, 2019


  0  Collapse this comment
Copy link
Work it out. If it pushed without a corresponding pop, then none of the X predictions would be correct. The coroutines would gradually consume the entire prediction stack.