Henrik Arlinghaus  February 8, 2021
· Edited

  0  Collapse this comment
Copy link
Great timing, we ran into this just last week. I had planned to try and solve it using CoGetObjectContext / ContextCallback but I’ll lean back and see where this goes!
We are using native C++, but since we are using COM we still have access to the coreapplication, correct?





Sunil Joshi  February 8, 2021


  0  Collapse this comment
Copy link
Even if you are using standard C++, I would still suggest you use C++/WinRT which is just a library that hides all of the WRL complexity. It’s not to be confused with CX which is a language extension.





Henrik Arlinghaus  February 9, 2021
· Edited

  0  Collapse this comment
Copy link
I went with manual implementation and dynamically loading it depending on windows version.
As an aside for anyone doing this in a non WinRT app (And I may be doing something wrong): Everything works _except_ the objects in the property store are never released and thus never destroyed. This has to do with using normal COM initialization and not RoInitialize, but I cannot change that. I also needed to prevent ATL from increasing the server...Read moreI went with manual implementation and dynamically loading it depending on windows version.
As an aside for anyone doing this in a non WinRT app (And I may be doing something wrong): Everything works _except_ the objects in the property store are never released and thus never destroyed. This has to do with using normal COM initialization and not RoInitialize, but I cannot change that. I also needed to prevent ATL from increasing the server process ref count to avoid ref cycles keeping the server running indefinitely.
Read less







Charles Milette  February 15, 2021


  0  Collapse this comment
Copy link
RoInitialize also initializes the COM runtime, so couldn’t you swap CoInitialize for it to avoid this?