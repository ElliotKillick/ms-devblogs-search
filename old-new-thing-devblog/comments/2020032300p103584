Dzmitry Konanka  March 24, 2020


  0  Collapse this comment
Copy link
i guess here you could use SuspendThread
EnterCriticalSection(cs)
{
for (;;) {
  DWORD prev = InterlockedCompareExchange(&cs->locker, GetCurrentThreadId(), 0);
  if (prev == 0 || prev == GetCurrentThreadId()) break;
  HANDLE wh;
  if (DupicateHandle(GetCurrentProcess(), GetCurrentThread(), GetCurrentProcess(), &wh, THREAD_SUSPEND_RESUME)) {
    if (AddIntoWaiters(cs, wh)) {
      SuspendThread(GetCurrentThread());
    } else { // last resort if running in out-of-memory condition
 ...Read morei guess here you could use SuspendThread
EnterCriticalSection(cs)
{
for (;;) {
  DWORD prev = InterlockedCompareExchange(&cs->locker, GetCurrentThreadId(), 0);
  if (prev == 0 || prev == GetCurrentThreadId()) break;
  HANDLE wh;
  if (DupicateHandle(GetCurrentProcess(), GetCurrentThread(), GetCurrentProcess(), &wh, THREAD_SUSPEND_RESUME)) {
    if (AddIntoWaiters(cs, wh)) {
      SuspendThread(GetCurrentThread());
    } else { // last resort if running in out-of-memory condition
      CloseHandle(wh);
      Sleep(10);
    }
  } else { // last resort if running in out-of-handles condition
    Sleep(10);
  }
}
cs->locks++;
}
LeaveCriticalSection(cs)
{
cs->locks–;
if (cs->locks == 0) {
  DWORD prev = InterlockedExchange(&cs->locker, 0);
  assert(prev == GetCurrentThreadId());
  HANDLE wh = FetchWaiter(cs);
  if (wh != INVALID_HANDLE_VALUE) {
    while (ResumeThread(wh) == 0) Sleep(0);
    CloseHandle(wh);
  }
} else {
  assert(cs->locks > 0);
}
}
where AddIntoWaiters/FetchWaiter manages internal per-critical section lock-free list
Read less







Joshua Hudson  March 27, 2020


  0  Collapse this comment
Copy link
Actually that’s pretty clever, and a good use of SuspendThread for once. Would need a little more work to be production-ready mainly due to there’s a much better way to handle compare-exchange for single-linked lists.





Dzmitry Konanka  March 27, 2020


  0  Collapse this comment
Copy link
You mean putting waiters list entry on stack frame of EnterCriticalSection (to avoid dealing with dynamic allocations)? Or something else?
There is another thing to optimize however - instead of DupicateHandle/CloseHandle each time - open it once per thread and cache in TLS variable (and clean it up with FlsAlloc'ed callback). Or if we're part of OS reserve space for cached thread handle in TEB.
Also note that this approach provides predictable 'fair' fifo scheduling...Read moreYou mean putting waiters list entry on stack frame of EnterCriticalSection (to avoid dealing with dynamic allocations)? Or something else?
There is another thing to optimize however – instead of DupicateHandle/CloseHandle each time – open it once per thread and cache in TLS variable (and clean it up with FlsAlloc’ed callback). Or if we’re part of OS reserve space for cached thread handle in TEB.
Also note that this approach provides predictable ‘fair’ fifo scheduling and allows to easily (and ‘for free’) implement prioritization. Consider EnterCriticalSectionQuickAsPossible that will put current thread into head of waiters list, and ‘usual’ EnterCriticalSection will put at its end.
Read less





Ian Boyd  March 24, 2020


  0  Collapse this comment
Copy link
My concern with the proposal that you wake up everyone waiting on a critical section: is that it might wake up everyone waiting on a critical section.





Neil Rashbrook  March 24, 2020


  0  Collapse this comment
Copy link
Wow, I had no idea that threads spend so much time waiting on critical sections.





smf  March 26, 2020


  0  Collapse this comment
Copy link
It depends on what they are doing, or not doing.
If they have nothing to do, then they will be waiting.
If they have something to do that involves talking to something else then they are waiting.
Most threads are waiting most of the time.





Neil Rashbrook  March 27, 2020


  0  Collapse this comment
Copy link
I do realise that most threads spend most of their time waiting, but surely they’re not mostly waiting on critical sections? There are plenty of other synchronisation primitives for them to wait on.