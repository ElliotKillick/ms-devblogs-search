Shawn Van Ness  September 27, 2023


  0  Collapse this comment
Copy link
I always wondered what the other 2 rings were intended for .. but was afraid to ask.





Ian Boyd  September 30, 2023


  1  Collapse this comment
Copy link
Rings 1, 2, and 3 are not different levels of protection, with ring 3 having less permissions than ring 2, which has less permissions than ring 1.
Think of them more as groups, or buckets, and you (the OS) can individually set the permissions that each ring has.
Certain privileges are only available in ring 0, and cannot be granted to the other rings:
- Execute Privileged Instructions
- Interrupt Control
- Access to System Control Registers
-...Read moreRings 1, 2, and 3 are not different levels of protection, with ring 3 having less permissions than ring 2, which has less permissions than ring 1.
Think of them more as groups, or buckets, and you (the OS) can individually set the permissions that each ring has.
Certain privileges are only available in ring 0, and cannot be granted to the other rings:
– Execute Privileged Instructions
– Interrupt Control
– Access to System Control Registers
– Modify Descriptor Tables
Other privileges that ring 0 has can be individually granted to other rings:
– Access I/O ports
– Direct memory access
Read less






skSdnW  September 26, 2023


  0  Collapse this comment
Copy link
But why did the 16-bit versions use the .exe extension? Why not .dll or .sys?





Richard Yu  September 27, 2023


  0  Collapse this comment
Copy link
Because they are running? I guess loading a running exe just give you the instance handle of that exe. And if it exports functions, you can call it directly.





skSdnW  September 27, 2023


  0  Collapse this comment
Copy link
They are loaded in the kernel but they are not processes. You cannot go into the system folder and run user.exe and expect it to do anything.



紅樓鍮  September 26, 2023


  0  Collapse this comment
Copy link
When C programmers on *nix say they’re calling a system call, what they’re actually calling is probably the C wrapper provided by the userspace libc, too.





Acc Reg  October 3, 2023


  0  Collapse this comment
Copy link
A normal windows programmer will use Win32 API instead of Native API cause stability and its backward compability. Native API would required `ntdll.dll` insteadl of `kernel32.dll`




Jason Curl  September 26, 2023


  1  Collapse this comment
Copy link
QNX on x86 is an OS that uses Ring 0 for the scheduler and memory manager, Ring 1 for drivers, Ring 3 for user space applications. It is a posix compliant microkernel used in embedded.