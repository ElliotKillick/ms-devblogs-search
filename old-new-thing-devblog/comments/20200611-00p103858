Ted Spence  June 11, 2020


  0  Collapse this comment
Copy link
Are there any situations where it is preferred to actually run stack-based recursion rather than unrolling the recursion into a growable queue that can be processed in a loop?
I've always used trivial recursion when I'm lazy, and something like this pseudocode whenever the queue could potentially get large:
<code>
Perhaps there's a C++ reason that I'm not familiar with since my last C++ project was many years ago...
Read moreAre there any situations where it is preferred to actually run stack-based recursion rather than unrolling the recursion into a growable queue that can be processed in a loop?
I’ve always used trivial recursion when I’m lazy, and something like this pseudocode whenever the queue could potentially get large:
void FrobAllNodes(tree: Tree)
{
  const queue = new Queue();
  queue.push(tree.Node());
  while (!queue.isEmpty()) {
    const node = queue.pop();
    frobOneNode(node);
    queue.push(...node.Children());
  }
}
Perhaps there’s a C++ reason that I’m not familiar with since my last C++ project was many years ago…
Read less







Raymond Chen Author
June 11, 2020


  0  Collapse this comment
Copy link
The queue approach works well for preorder traversal, but postorder and inorder traversal get complicated. Also, the recursive version requires only O(depth) storage, whereas the queue requires O(depth + breadth) storage.





Ted Spence  June 15, 2020


  0  Collapse this comment
Copy link
> postorder and inorder traversal get complicated
> whereas the queue requires O(depth + breadth) storage.
When I read this, my first response was "O(depth+breadth) * size of a pointer?" ... but then I realized: we may not have pointers to all our objects in memory.  Constructing them and throwing them into a queue, for example, if I were traversing an extremely large virtual hard drive to find an object deterministically would be rough, and would...Read more> postorder and inorder traversal get complicated
> whereas the queue requires O(depth + breadth) storage.
When I read this, my first response was “O(depth+breadth) * size of a pointer?” … but then I realized: we may not have pointers to all our objects in memory.  Constructing them and throwing them into a queue, for example, if I were traversing an extremely large virtual hard drive to find an object deterministically would be rough, and would depend heavily on the order of traversal.
Thanks for the context!
Read less





Kalle Niemitalo  June 11, 2020


  0  Collapse this comment
Copy link
Can debuggers show stack traces across stack switches implemented as fibers? If not automatically, then perhaps with some assistance from the program itself?





Raymond Chen Author
June 11, 2020


  0  Collapse this comment
Copy link
I don’t know of any way to tell the debugger to continue a stack trace into another fiber.