Vincent Romano  June 23, 2020


  0  Collapse this comment
Copy link
The compiler should be able to suppress this warning for classes with private destructors.  A class with a base class having a private destructor can never be instantiated, as it would be ill-formed for its destructor to call that of the base class.  Therefore, it can effectively be treated as implicitly final.





word merchant  June 20, 2020


  0  Collapse this comment
Copy link
Is there a scoped pragma to switch this warning off when you know it’s noise?
(Apologies readers, I am too lazy to ‘Bing’ this).





Stuart Ballard  June 19, 2020


  0  Collapse this comment
Copy link
I’ve a feeling this is probably obvious to people who are more versed in C++ and WINRT and such than I am, but could you explain why you wouldn’t solve this by just adding a no-op virtual destructor to FtmBase? It seems like that would be a pretty easy way to tell the compiler “I’ve considered this problem and it’s a non-issue for my class”…





Raymond Chen Author
June 19, 2020


  0  Collapse this comment
Copy link
It does cost a vtable slot, runtime execution, and loss of optimization due to vtable dispatch. One of the reasons for using CRTP is to avoid virtual method calls, so adding a virtual destructor sort of counters that goal.