Jordan Chavez  October 14, 2019


  1  Collapse this comment
Copy link
This is a very misleading title. *Windows* fibers aren't useful for much; fibers/stackful/symmetric coroutines are in general extremely useful, just look at the success of Go. Here are more examples:
https://unity.com/dots
https://www.gdcvault.com/play/1022186/Parallelizing-the-Naughty-Dog-Engine
https://ourmachinery.com/post/fiber-based-job-system/
http://cbloomrants.blogspot.com/2012/12/12-21-12-coroutine-centric-architecture.html
And before anyone gets into a discussion of semantics, what I mean by "fiber" is a user-mode object with its own stack+cpu context and associated switching API. All goroutines/stackful coroutines/fibers boil down to this.
The Nishanov paper makes the particularly silly assertion that multiplexing...Read moreThis is a very misleading title. *Windows* fibers aren‚Äôt useful for much; fibers/stackful/symmetric coroutines are in general extremely useful, just look at the success of Go. Here are more examples:
https://unity.com/dots
https://www.gdcvault.com/play/1022186/Parallelizing-the-Naughty-Dog-Engine
https://ourmachinery.com/post/fiber-based-job-system/
http://cbloomrants.blogspot.com/2012/12/12-21-12-coroutine-centric-architecture.html
And before anyone gets into a discussion of semantics, what I mean by ‚Äúfiber‚Äù is a user-mode object with its own stack+cpu context and associated switching API. All goroutines/stackful coroutines/fibers boil down to this.
The Nishanov paper makes the particularly silly assertion that multiplexing M coroutines over N threads is a bad idea (with M being large and N typically being the number of cores)‚Ä¶this is exactly how every commercial game engine does concurrency to maximize CPU utilization. It‚Äôs even more lopsided on the server-side, evidenced by the growing adoption of Go for highly parallel servers.
Part of the problem with Windows fibers is that you can‚Äôt control stack allocation, so can‚Äôt re-use fiber instances easily and such. This has blocked their adoption more than anything else IMO.
Read less







Yukkuri Reimu  October 14, 2019


  0  Collapse this comment
Copy link
So that‚Äôs why games crash so much üòâ




Gunnar Dalsnes  October 13, 2019


  0  Collapse this comment
Copy link
Does this fiber stuff really belong in the OS api when it is only user mode? Could it just as easy had been a library?





Raymond Chen Author
October 13, 2019


  0  Collapse this comment
Copy link
Moving the stack requires coordination with the OS, since the stack is part of the ABI.




Piotr Si√≥dmak  October 12, 2019


  0  Collapse this comment
Copy link
The linked document says ‚Äúthey do have a capability to switch from fiber to fiber without involving kernel transition‚Äù. Wouldn‚Äôt that make them better after the spectre/meltdown exploit fixes (not really fixes but disabled optimizations if I remember correctly) that slowed down user/kernel transitions?





‚Ä™ ‚Ä™  October 12, 2019


  0  Collapse this comment
Copy link
If don‚Äôt need to call a destructor and only have a memory allocation problem, can solve it with __declspec(thread).





Ron Parker  October 11, 2019


  0  Collapse this comment
Copy link
‚ÄúWhen you deallocate the fiber-local storage slot, the callback is invoked for every extant fiber.‚Äù
Does this mean that you have to ConvertThreadToFiber for any thread that wants to use the FLS slot? Or do non-fiber threads get called too?





Ron Parker  October 11, 2019


  0  Collapse this comment
Copy link
Answering my own questions: it looks like calling FlsSetValue sets a thread/fiber up to be called, and it looks like the callbacks get called on the thread/fiber that deallocated the FLS slot, so you shouldn‚Äôt do anything with thread affinity (e.g. STA COM calls) in your callback, and you shouldn‚Äôt try to lock anything that might be locked by one of the other threads, meaning you probably shouldn‚Äôt try to lock anything.





Ron Parker  October 11, 2019


  0  Collapse this comment
Copy link
Relatedly, I assume that the thread/fiber doing the deallocation blocks for the other threads to handle their callbacks, so it‚Äôs a bad idea to deallocate an FLS slot while holding any locks?




Alex Martin  October 11, 2019


  0  Collapse this comment
Copy link
What are your thoughts on coroutines in general? Do you dislike the whole concept, or is it just fibers specifically that are problematic?





Joe Beans  October 11, 2019


  0  Collapse this comment
Copy link
Coroutines are the final nail in the coffin for fibers. The team that came up with the C# async spec should get the Nobel Prize.





Alex Martin  October 14, 2019


  0  Collapse this comment
Copy link
The coroutine concept has existed for decades. Fibers are essentially just OS-supported coroutines, but they aren‚Äôt the best-implemented coroutines.





Me Gusta  October 11, 2019


  0  Collapse this comment
Copy link
Why not Simula, Smalltalk or Modula-2?