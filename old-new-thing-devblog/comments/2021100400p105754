Yuri Khan  October 5, 2021


  0  Collapse this comment
Copy link
The eager defaulting method value_or is occasionally useful, too. (I call it “eager” because the default value argument is evaluated before the optional is checked for emptiness.)
What std::optional<T> lacks is a monadic binding operator>>= and a lazy defaulting method or_else which would only evaluate the default value after making sure the optional is empty.





Daniel Sturm  October 7, 2021


  0  Collapse this comment
Copy link
Yeah the standard library is missing a whole lot of things to make that feature shine and really useful. It almost seems like someone saw that options from various functional languages were getting really popular (even Java had it for years!) and decided they'd be a good idea in C++ as well (because clearly C++ must have every single feature anybody ever asked for) but didn't really understand the concept.
You very rarely have to explicitly...Read moreYeah the standard library is missing a whole lot of things to make that feature shine and really useful. It almost seems like someone saw that options from various functional languages were getting really popular (even Java had it for years!) and decided they’d be a good idea in C++ as well (because clearly C++ must have every single feature anybody ever asked for) but didn’t really understand the concept.
You very rarely have to explicitly check for has_value in other implementations, but in C++ you’re regularly forced to because there doesn’t seem to be any map, fold and so on implementation.
Read less







word merchant  October 8, 2021
· Edited

  0  Collapse this comment
Copy link
Making sense of the latest C++ language perversions is not good for the mental health. If you wanted to make a programming language based on the insane gibbering and whispering of the mad elder gods who roamed the earth before man, it’d look a lot like C++, but probably a bit simpler. Even the gods of the Necronomicon would deem templates a bit risky.




Kinan Mahdi  October 6, 2021
· Edited

  0  Collapse this comment
Copy link
Yeah I was also kind of suprised value_or is not mentioned, as it actually solves some of the problems with the implicit conversion to bool
std::optional opt1 = ?;
if (opt1.value_or(false)) {
//only executes when the optional holds the value true
}
std::optional opt2;
if (opt2.value_or(nullptr)) {
//only executes when the optional holds a non nullptr value
}





Raymond Chen Author
October 7, 2021


  0  Collapse this comment
Copy link
value_or() isn’t hidden, though. You hit the “.” and it shows up. But conversion operators and custom comparisons are hidden.



Neil Rashbrook  October 5, 2021


  0  Collapse this comment
Copy link
The HTML encoding gods have not been kind today.