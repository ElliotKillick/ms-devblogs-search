Jan Ringoš  February 4, 2024


  0  Collapse this comment
Copy link
I’m looking forward to use this feature in about 10 years, after our clients finally retire their Server 2016s, assuming there won’t be paid ESUs for it.





Adam Rosenfield  February 2, 2024
· Edited

  0  Collapse this comment
Copy link
The constants MEM_RESERVE_PLACEHOLDER and MEM_PRESERVE_PLACEHOLDER are distressingly similar to each other.  I can imagine it’d be an easy bug to overlook if someone accidentally used one when they meant the other.





Jan Ringoš  February 4, 2024


  0  Collapse this comment
Copy link
It’s also distressing that they are no longer protected by appropriate _WIN32_WINNT version number test …oh wait.




Joe Beans  February 1, 2024


  0  Collapse this comment
Copy link
MapViewOfFile3 is exported from KernelBase.dll but not Kernel32.dll even though the documentation says it exists in the latter. It matters because I use [DllImport] to access Win32, not a .lib file. Why was KernelBase.dll created in the first place and what is its purpose?





Jan Ringoš  February 4, 2024


  0  Collapse this comment
Copy link
This is also the case of (S/G)etThreadDescription on Server 2016 and Windows 10 LTSB 2016.
After reporting it through half a dozen different channels, and nothing happening for maybe 4 years, I pulled the docs repo, added it to the documentation myself, and submitted pull request. Which was accepted pretty quickly.
So my advice is: If you want Microsoft documentation fixed, fix it yourself. No, the irony isn't lost on me.
Also, MapViewOfFile3 is documented as being...Read moreThis is also the case of (S/G)etThreadDescription on Server 2016 and Windows 10 LTSB 2016.
After reporting it through half a dozen different channels, and nothing happening for maybe 4 years, I pulled the docs repo, added it to the documentation myself, and submitted pull request. Which was accepted pretty quickly.
So my advice is: If you want Microsoft documentation fixed, fix it yourself. No, the irony isn’t lost on me.
Also, MapViewOfFile3 is documented as being on Server 2016, which is of course not true.
Read less






Peter Cooper Jr.  February 1, 2024


  0  Collapse this comment
Copy link
Could you maybe expound a bit on what kind of use case would have one want to do this sort of thing? You have two different sources, but want them next to each other in memory so that you can like see them together as one big array? Even if you're like writing a database server or something, I'm struggling to picture when it'd be really helpful for your separate chunks of mapped memory to...Read moreCould you maybe expound a bit on what kind of use case would have one want to do this sort of thing? You have two different sources, but want them next to each other in memory so that you can like see them together as one big array? Even if you’re like writing a database server or something, I’m struggling to picture when it’d be really helpful for your separate chunks of mapped memory to need to be adjacent. It may just be that I don’t have enough of an imagination for this sort of thing.
Read less







Joshua Hudson  February 1, 2024


  0  Collapse this comment
Copy link
It's a pretty good bet this speeds up the executable loader.
While PE files are relocatable; sections of PE fires are not. The relative offsets within PE files must remain the same. The .data segment must be so many blocks away from the .code section.
With this API, the loader finds a block of memory big enough, reserves it, and maps the sections, and never has to backtrack because somebody else called VirtualAllocfrom another thread (or process(!)).
Read moreIt’s a pretty good bet this speeds up the executable loader.
While PE files are relocatable; sections of PE fires are not. The relative offsets within PE files must remain the same. The .data segment must be so many blocks away from the .code section.
With this API, the loader finds a block of memory big enough, reserves it, and maps the sections, and never has to backtrack because somebody else called VirtualAllocfrom another thread (or process(!)).
Read less