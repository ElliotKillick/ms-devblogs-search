Jan Ringoš  November 2, 2023


  0  Collapse this comment
Copy link
I’m always surprised how few tools can generate wholly PNG icons. They all usually generate PNG for 256×256 size, but that’s all, other sizes are uncompressed bitmaps.
ICOs consisting of PNGs can save quite lot of in terms of final executable size. Even Windows binaries still don’t use PNGs, when doing so could shave tens of MBs off of the whole OS footprint.





Dimitriy Ryazantcev  November 6, 2023
· Edited

  0  Collapse this comment
Copy link
Uncompressed bitmaps are there for backwards compatibility (with pre-Vista systems). Simply scaling down from the 256x256 size does not work since icon will lose details.
Windows uses PNG compression for all 256x256 icons and requires to do so:
>Only a 32-bit copy of the 256x256 pixel image should be included, and only the 256x256 pixel image should be compressed to keep the file size down.
Also, uncompressed icons are faster to load than PNG that should be...Read moreUncompressed bitmaps are there for backwards compatibility (with pre-Vista systems). Simply scaling down from the 256×256 size does not work since icon will lose details.
Windows uses PNG compression for all 256×256 icons and requires to do so:
>Only a 32-bit copy of the 256×256 pixel image should be included, and only the 256×256 pixel image should be compressed to keep the file size down.
Also, uncompressed icons are faster to load than PNG that should be uncompressed and resized before it could be shown.
Read less






Dimitriy Ryazantcev  October 31, 2023
· Edited

  1  Collapse this comment
Copy link
Raymond, you did not mention RT_ANIICON (legacy?) and RT_ANICURSOR (.ani) resources.
AFAIK CreateIconFromResource(Ex) can load them too.
Specifically, I interested in description of multi-resolution animated cursors.
Can you write a post about it?





Dimitriy Ryazantcev  October 31, 2023
· Edited

  0  Collapse this comment
Copy link
Thank you, Raymond!
Another common mistake when using  from memory is ignoring the fact that  should be a DWORD-aligned buffer pointer. This usually happens when manually parsing and reading icon data from a ico/cur file.
I have recently added that info on the corresponding docs page: https://github.com/MicrosoftDocs/sdk-api/pull/1536
PS: Seems your code can break since  could return DWORD-unaligned buffer. ))
Read moreThank you, Raymond!
Another common mistake when using CreateIconFromResource(Ex) from memory is ignoring the fact that presbits should be a DWORD-aligned buffer pointer. This usually happens when manually parsing and reading icon data from a ico/cur file.
I have recently added that info on the corresponding docs page: https://github.com/MicrosoftDocs/sdk-api/pull/1536
PS: Seems your code can break since std::make_unique(size.LowPart) could return DWORD-unaligned buffer. ))
Read less







Raymond Chen Author
October 31, 2023


  1  Collapse this comment
Copy link
I cheated a bit and am relying on the default operator new[] being a wrapper around HeapAlloc, and HeapAlloc guarantees MEMORY_ALLOCATION_ALIGNMENT alignment, which is 8 on 32-bit Windows and 16 on 64-bit Windows.