紅樓鍮  November 4, 2021
· Edited

  0  Collapse this comment
Copy link
Maybe this could work?
<code>
BTW the same problem happens to coroutine member functions on a class, where  could be destructed while the coroutine is in flight.  I think the real issue is that there's no way to specify that a member function takes the  parameter by value (copy), unlike for ordinary parameters.
Read moreMaybe this could work?

template <typename F, typename ...Args>
auto invoke_async_lambda(F f, Args ...args)
    -> decltype(f(args...))
{ co_return co_await f(args...); }

template <typename F>
auto fix_async_lambda(F f) {
  return [f](auto &&...args) {
    return invoke_async_lambda(f, FWD(args)...);
  };
}

void usage(int key) {
  button.Click(fix_async_lambda(
    [key](auto &&...) -> IAsyncAction {
      co_await resume_background();
      use(key);
    }));
}

BTW the same problem happens to coroutine member functions on a class, where *this could be destructed while the coroutine is in flight.  I think the real issue is that there’s no way to specify that a member function takes the *this parameter by value (copy), unlike for ordinary parameters.
Read less







Raymond Chen Author
November 5, 2021


  0  Collapse this comment
Copy link
You may be interested in C++ language proposal “Deducing this” that allows (among other things) *this to be passed by value to a member.




紅樓鍮  November 4, 2021
· Edited

  0  Collapse this comment
Copy link
There’s a typo in your second-to-last code snippet at 20190118-00.  It should be co_return co_await lambda();, not return co_await lambda();.