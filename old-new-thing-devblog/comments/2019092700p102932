cheong00  September 29, 2019


  0  Collapse this comment
Copy link
I don’t aware private member matters when exporting, and thought that as long as the public visible things are ordinary then it would be enough to get the compiler through and not causing trouble.
Then again I didn’t learn much for C++ beyond the curriculum being taught in school.





Alex Cohn  October 6, 2019


  0  Collapse this comment
Copy link
Default copy constructor is public. Before we got the delete keyword, the workaround would be to hide unused default methods as private, but it’s out of fashion these days.





Jeremy Richards  September 30, 2019


  0  Collapse this comment
Copy link
Private matters in a few ways for exporting.  The first is as Raymond pointed out -- code consuming the DLL may decide to copy your class and so needs to be able to copy the vector.
Another issue is simply layout.  Code that consumes this class needs to know how much stack (or heap) memory each class instance requires.  Actually this gets into some really nasty bits.  At least in the old...Read morePrivate matters in a few ways for exporting.  The first is as Raymond pointed out — code consuming the DLL may decide to copy your class and so needs to be able to copy the vector.
Another issue is simply layout.  Code that consumes this class needs to know how much stack (or heap) memory each class instance requires.  Actually this gets into some really nasty bits.  At least in the old days (I don’t know if this still holds true), std::vector might be a different size in debug builds and release builds.  So if the DLL was a release build, but your code is a debug build, it could cause all sorts of undefined behavior.  And heaven help you if you are compiling with a different compiler than was used on the DLL (e.g. Clang vs Visual C++).  This is why the general recommendation is don’t export classes that use STL.  If you have to export classes, PIMPL is your friend.
Read less