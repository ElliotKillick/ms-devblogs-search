Joshua Hudson  July 2, 2021
· Edited

  0  Collapse this comment
Copy link
Soon _UNICODE will be the obsolete thing. I'm counting the years until I can drop this manifest into the build steps and have FILE *input = fopen("filename", "r"); work correctly on any path. (The only reason it's more than 0 is I have to wait until Windows 8.1 falls off the supported list.)
https://docs.microsoft.com/en-us/windows/apps/design/globalizing/use-utf8-code-page
This is long awaited; what this does is change all the *A functions to take UTF-8 the a codepage and just work.
Read moreSoon _UNICODE will be the obsolete thing. I’m counting the years until I can drop this manifest into the build steps and have FILE *input = fopen(“filename”, “r”); work correctly on any path. (The only reason it’s more than 0 is I have to wait until Windows 8.1 falls off the supported list.)
https://docs.microsoft.com/en-us/windows/apps/design/globalizing/use-utf8-code-page
This is long awaited; what this does is change all the *A functions to take UTF-8 the a codepage and just work.
Read less







skSdnW  July 2, 2021


  0  Collapse this comment
Copy link
You mean most of the *A functions. There is a reason why UTF-8 was not supported from the start (in addition to not having been invented yet). There are certain places where the design assumes DBCS and there is no place for the extra possible UTF-8 bytes.
A handful of shell functions only exist as W functions so you will still do some conversions.





Joshua Hudson  July 4, 2021


  0  Collapse this comment
Copy link
You are referring to IsDBCSLeadByte I presume. Most applications will have about one hitpoint, in libc. The reason being is once you track down and fix all the places that assume one whcar_t is one character and one codepoint is one glyph there's nothing left to be broken by this except the byte to character spooler (which does the same job as StreamReader in C#).
Point being, it is ill-advised to assume that an application under...Read moreYou are referring to IsDBCSLeadByte I presume. Most applications will have about one hitpoint, in libc. The reason being is once you track down and fix all the places that assume one whcar_t is one character and one codepoint is one glyph there’s nothing left to be broken by this except the byte to character spooler (which does the same job as StreamReader in C#).
Point being, it is ill-advised to assume that an application under control of the developer is going to have much trouble with this, especially with a working libc that handles reading and writing in UTF-8.
The contest is over, and UTF-8 has won. MS is finally acknowledging it.
Read less







skSdnW  July 4, 2021


  0  Collapse this comment
Copy link
GetCPInfo is probably another unimportant function. The old Michael Kaplan blog probably had some posts about UTF-8 as ACP with more minor issues.