Henke37  July 25, 2024


  0  Collapse this comment
Copy link
Of course, if your factory creates many different kinds of objects, then you should probably have the methods state what they create.





Joe Beans  July 24, 2024


  0  Collapse this comment
Copy link
MFC was really annoying about this. Class members would use full names that copied the API function names they wrapped, so you would end up with CWnd::MoveWindow() and whatnot.





Ray Koopa  July 24, 2024


  1  Collapse this comment
Copy link
What I don’t like is boolean getters starting with “Get”. Like “Stuff::GetFrobnicating”. It sounds confusing compared to “IsFrobnicating” but that breaks starting getters with “Get” and get/set pairs in case you also have a “SetFrobnicating” (and “Get/SetIsFrobnicating” is not much better…).





Ian Boyd  July 26, 2024


  1  Collapse this comment
Copy link
In COM you could mark certain methods as a "getter" or a "setter". The idea being that if you were in a language where an object supports properties you would then create a property based on the of the getter and setter names:
- getIsFrobnicating
- setIsFrobnicating
which then gives you a property you can project into your langauge:
<code>
Or in Delphi:
<code>
So i would argue that IsFrobnicating should be a property. And if your language doesn't support properties,...Read moreIn COM you could mark certain methods as a “getter” or a “setter”. The idea being that if you were in a language where an object supports properties you would then create a property based on the of the getter and setter names:
– getIsFrobnicating
– setIsFrobnicating
which then gives you a property you can project into your langauge:
Boolean IsFrobnicating get { getIsFrobnicating(); } set { setIsFrobnicating(); }
Or in Delphi:
property IsFrobnicating: Boolean read getIsFrognicating write setIsFrobnicating;
So i would argue that IsFrobnicating should be a property. And if your language doesn’t support properties, then you should be stuck with getIsFrobnicating.
Read less







Antonio Rodríguez  July 25, 2024


  0  Collapse this comment
Copy link
I think the difference is whether we are getting a property of the object or querying the status. For example, in an object that represents and article in a store or in an inventory, GetDiscountable() tells us about a (mostly) immutable property (the article admits discounts), while IsInStock() tells us about a volatile status (the article is in stock right now). Or, in a canvas, we could have GetObjectCount() (the number of objects in the...Read moreI think the difference is whether we are getting a property of the object or querying the status. For example, in an object that represents and article in a store or in an inventory, GetDiscountable() tells us about a (mostly) immutable property (the article admits discounts), while IsInStock() tells us about a volatile status (the article is in stock right now). Or, in a canvas, we could have GetObjectCount() (the number of objects in the canvas, which only changes when they get added or removed) and IsBusy() (which indicates that the canvas is redrawing itself at the moment).
Read less






Billy O'Neal  July 24, 2024


  1  Collapse this comment
Copy link
Just as long as we aren’t making a `WidgetFactoryFactory` we’re all good.





Antonio Rodríguez  July 25, 2024


  0  Collapse this comment
Copy link
Certain coffee-named language would one-up you with WidgetFactoryFactoryCreator.