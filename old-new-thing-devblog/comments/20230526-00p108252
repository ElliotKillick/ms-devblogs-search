Neil Rashbrook  May 27, 2023


  0  Collapse this comment
Copy link
I thought (possibly erroneously) that it was a requirement of COM that the caller was required to have a strong reference to the object. How is it possible that you can call Widget::OnWidgetClosed on a widget that has already had its last reference released?





Raymond Chen Author
May 27, 2023


  0  Collapse this comment
Copy link
COM totally had a strong reference to the delegate. But the delegate has a raw pointer to the MyObject, via { this, &MyObject::OnWidgetClosed }. It is the delegate that caused the problem, not COM.




紅樓鍮  May 26, 2023


  0  Collapse this comment
Copy link
I think it should be clarified that the "Last reference released" under "Thread 1" refers to the last reference to  being released, which by nature is unrelated to the  being closed. This could have been less confusing if the  did some other thing like  or ; the current wording of the problem makes it sound like the closing of the  somehow causes of the ending of the lifetime of ,...Read moreI think it should be clarified that the “Last reference released” under “Thread 1” refers to the last reference to MyObject being released, which by nature is unrelated to the Widget being closed. This could have been less confusing if the Widget did some other thing like Triggered or Ticked; the current wording of the problem makes it sound like the closing of the Widget somehow causes of the ending of the lifetime of MyObject, which, even if it’s true, is not central to the problem.
Read less