Ian Boyd  December 21, 2022


  1  Collapse this comment
Copy link
It also doesn't deal with the issue of:
- the background thread posts a message on the rising edge to the main thead
- the main thread receives the message, and exchanges the counter back to zero, and does the work
- in the meantime, the background thread causes another rising edge, and posts a message
- the main thread completes its work, and goes back to get the next message from the queue
- it's...Read moreIt also doesn’t deal with the issue of:
– the background thread posts a message on the rising edge to the main thead
– the main thread receives the message, and exchanges the counter back to zero, and does the work
– in the meantime, the background thread causes another rising edge, and posts a message
– the main thread completes its work, and goes back to get the next message from the queue
– it’s a WM_DoSomething message, which causes it exchange the counter back to zero and do work
– the main thread completes its work, and goes back to get the next message from the queue
– it’s a WM_DoSomething message, which it does
– and then it gets another WM_DoSomething
– and then it gets another WM_DoSomething
– and then it gets another WM_DoSomething
– and then it gets another WM_DoSomething
– and then it gets another WM_DoSomething
– and then it gets another WM_DoSomething
And now your multi-threaded application is locked up, not processing any paint messages, etc.
I learned that the hard way in 2006 with my first dual-code machine. The code that was nicely multi-threaded suddently devolves to being single-threaded, because the main thread is stuck consuming work produced by the background thread.
The solution **is** to use a timer, because timer messages are lower priority than paint messages, input messages, etc.
Read less







Raymond Chen Author
December 22, 2022
· Edited

  1  Collapse this comment
Copy link
True, but the premise of the question is that the behavior you describe is what they wanted.




MGetz  December 21, 2022


  0  Collapse this comment
Copy link
Odd thing to notice:  is more error prone than . Not sure why this stood out to me but it did. I'm guessing it was because the  version doesn't require using * methods. So someone not in on the fact that it needs to be atomic could directly use it if they forgot it needed to be treated carefully. Whereas the  requires atomicity of some form, so even using it wrong is...Read moreOdd thing to notice: LONG g_count; is more error prone than std::atomic g_count;. Not sure why this stood out to me but it did. I’m guessing it was because the LONG version doesn’t require using Interlocked* methods. So someone not in on the fact that it needs to be atomic could directly use it if they forgot it needed to be treated carefully. Whereas the std::atomic requires atomicity of some form, so even using it wrong is less likely because it lets the following programmer know “Hey this is something you should be careful with”. Obviously they could still cause undefined behavior but given that they are more likely to default to sequential consistency, which while slower would still work without causing undefined behavior.
Read less