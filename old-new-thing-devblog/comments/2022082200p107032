Yukkuri Reimu  August 24, 2022


  0  Collapse this comment
Copy link
Why 64k undefined instructions? Seems like a lot. For signaling maybe? But there’s already svc and brk…





Richard Thompson  August 26, 2022


  0  Collapse this comment
Copy link
A lot of the time In C++ and similar, a lot of "null pointers" aren't actually the value zero. Instead they're small offsets from zero.
For example, in C++ there's a jump table (vtable) of the actual 'final' function that will be called for virtual functions.
When you call a virtual function on a null object, the CPU calls some entry in a null jump table, which will have an address of something like zero +...Read moreA lot of the time In C++ and similar, a lot of “null pointers” aren’t actually the value zero. Instead they’re small offsets from zero.
For example, in C++ there’s a jump table (vtable) of the actual ‘final’ function that will be called for virtual functions.
When you call a virtual function on a null object, the CPU calls some entry in a null jump table, which will have an address of something like zero + (8 * N) + offset.
It also guards against a lot of real bad values – eg loop indices are relatively small most of the time etc.
Read less






Antonio Rodríguez  August 22, 2022


  0  Collapse this comment
Copy link
It's really interesting that ARM carries on the BRK mnemonic from the 6502 (together with the "hidden" immediate, more on this bellow) but does not assign it the opcode 0x00. I agree that it is a big help to have a trap, break point or invalid opcode at zero. It is, by far, the most frequent byte value in data memory, and it guarantees that any jump in the wild will break into the debugger...Read moreIt’s really interesting that ARM carries on the BRK mnemonic from the 6502 (together with the “hidden” immediate, more on this bellow) but does not assign it the opcode 0x00. I agree that it is a big help to have a trap, break point or invalid opcode at zero. It is, by far, the most frequent byte value in data memory, and it guarantees that any jump in the wild will break into the debugger almost immediately. It is specially useful when the OS or firmware has a built-in debugger, such as the Apple II’s Monitor.
About the hidden parameter. The BRK instruction is treated like a software interrupt. It causes the PC (program counter) and P (status) registers to be pushed on the stack, like a hardware interrupt (arranged so the RTI instruction can resume execution). Normally, the address pushed is that of the *next* instruction (the point where the execution should resume). But after a BRK, the address pushed into the stack it *two* bytes after the one containing the 0x00 opcode. That suggests that the chip’s designers intended to have a 1 byte immediate to the BRK instruction to indicate a trap code, but failed to document it.
Read less







word merchant  August 23, 2022
· Edited

  0  Collapse this comment
Copy link
From right up-to-date to a blast from the past: https://scarybeastsecurity.blogspot.com/2020/11/reverse-engineering-forgotten-1970s.html
This old Intel 8721 disk controller also had a yield instruction and some curious task management built in.
A fascinating read to go alongside this fascinating read.