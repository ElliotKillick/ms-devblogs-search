Alois Kraus  September 11, 2021


  0  Collapse this comment
Copy link
Is there still a 64 K system wide limit on GDI/User Handles? If one process uses 10 K there cannnot be 7 processes consuming as many GDI/User Handles? For the customer who is using too many GDI objects should try out Performance HUD (https://www.microsoft.com/en-us/download/100813) on a recent OS to see which call stacks are allocating most User/GDI objects. That should make targeted improvements much easier.





Dmitry Sychov  September 5, 2021


  0  Collapse this comment
Copy link
I have a heavy process spawning multiple windows with animations – is it better to have multiple threads still within one process instead each with its own msg/drawing queue or even better(for scalability) to have multiple processes instead(controlled by master process) for even less locking?
Thank you.





Antonio Rodríguez  August 31, 2021


  0  Collapse this comment
Copy link
If you have to ask where the resource limit is or how to rise it, you are probably doing something wrong. When there is a limit, it’s usually there because of some good reason, even if it’s not evident. This applies to a surprisingly large number of things: GDI and User objects, open files, network and database connections, processes, threads…





switchdesktopwithfade@hotmail.com  September 2, 2021


  0  Collapse this comment
Copy link
XAML gets you out of the GDI/USER handle rat race.





Joshua Hudson  September 2, 2021


  0  Collapse this comment
Copy link
Not quite. The number of handles a select() call can wait on is too low. This renders the proactor design pattern unusable on Windows.





anonymous  September 1, 2021


  0  Collapse this comment
Copy link
This comment has been deleted.