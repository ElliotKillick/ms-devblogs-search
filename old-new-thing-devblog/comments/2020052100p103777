Joshua Hudson  May 22, 2020


  0  Collapse this comment
Copy link
I remember these early C++ books that had all their classes in .h files and all the methods in the classes themselves, kind of like C# and Java have you do it. Any member function in a class was automatically inline. It seemed like a great idea at the time until you saw what mess it compiled to. At the time, this yielded a copy of every inline function in the resulting executable for every...Read moreI remember these early C++ books that had all their classes in .h files and all the methods in the classes themselves, kind of like C# and Java have you do it. Any member function in a class was automatically inline. It seemed like a great idea at the time until you saw what mess it compiled to. At the time, this yielded a copy of every inline function in the resulting executable for every C++ file that called it, which was frequently a lot, and it totally broke RTTI because the same class had multiple vtables and RTTI and dynamic downcast compared vtable pointers.
But today C++ doesn’t have to work with traditional linkers and the compiler emits mergable definitions and the linker knows how to do it, so you only pay for this in compile costs. We can actually revert and start writing it like the entry level books suggested it be written, and expect it to work well.
Read less







Stuart Dootson  May 21, 2020


  0  Collapse this comment
Copy link
And that’s why they used inline for variables defined in headers with the same ODR dodging property. Makes sense when you explain the meaning of inline like that…
Let’s just not try and factor inline namespaces into the same explanation.