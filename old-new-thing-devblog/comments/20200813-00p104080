Rene Stein  August 26, 2020


  0  Collapse this comment
Copy link
An optional type is great for this task. (pun intended) :)
As an alternative, I offer in my library Result_Traits that can be specialized for concrete type.
Specialization for Task (result for Task<Task>)
<code>
https://github.com/renestein/Rstein.AsyncCpp/blob/a5a171904cd310e22d2d1aeff57a3d92960cb4aa/RStein.AsyncCpp/Tasks/Task.h#L441
//Edit: Blog engine apparently eats some characters in the code. :(
Read moreAn optional type is great for this task. (pun intended) üôÇ
As an alternative, I offer in my library Result_Traits that can be specialized for concrete type.
Specialization for Task (result for Task<Task>)

namespace RStein::Functional
  {
    template
    struct Result_Traits<AsyncCpp::Tasks::Task>
    {
      using Result_Type = AsyncCpp::Tasks::Task;
      using Default_Value_Func = typename AsyncCpp::Tasks::Task::InvalidPlaceholderTaskCreator;
    };  

https://github.com/renestein/Rstein.AsyncCpp/blob/a5a171904cd310e22d2d1aeff57a3d92960cb4aa/RStein.AsyncCpp/Tasks/Task.h#L441
//Edit: Blog engine apparently eats some characters in the code. üôÅ
Read less







David Haim  August 15, 2020


  0  Collapse this comment
Copy link
I will shamelessly post my library here, concurrencpp, which (although is young) does pretty much what PPL‚Äôs tasks do but in a cross platform way.
https://github.com/David-Haim/concurrencpp