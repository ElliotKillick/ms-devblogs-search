Adam Rosenfield  September 3, 2019


  1  Collapse this comment
Copy link
Incidentally this came up in some work I was doing recently with the Unreal Engine.  Unreal uses wide strings everywhere on all platforms, and it has printf-style formatting functions such as FString::Printf().
They don't seem to document whether that function and others use the Windows-style or C99-style format specifiers for wide vs. narrow strings, but as it turns out they use the Windows-style format specifiers.  On all platforms.
On Windows, FString::Printf() just forwards to vswprintf(),...Read moreIncidentally this came up in some work I was doing recently with the Unreal Engine.  Unreal uses wide strings everywhere on all platforms, and it has printf-style formatting functions such as FString::Printf().
They don’t seem to document whether that function and others use the Windows-style or C99-style format specifiers for wide vs. narrow strings, but as it turns out they use the Windows-style format specifiers.  On all platforms.
On Windows, FString::Printf() just forwards to vswprintf(), but on other platforms, they have to first convert the format string to a C99-style format string before passing it through.  It’s not pretty, but it works.
Read less







Андрей Карпов  September 2, 2019


  1  Collapse this comment
Copy link
Thank you for the note. Now the reasons of all this confusion with "%s" are clear. The fact of the matter is that our users were constantly asking why PVS-Studio reacted differently to their as they thought "portable" code depending on whether they build their project under Linux or Windows. Therefore, we had to make a special section in the description of the V576 diagnostic about this issue (see the section "Wide character strings"). Now...Read moreThank you for the note. Now the reasons of all this confusion with “%s” are clear. The fact of the matter is that our users were constantly asking why PVS-Studio reacted differently to their as they thought “portable” code depending on whether they build their project under Linux or Windows. Therefore, we had to make a special section in the description of the V576 diagnostic about this issue (see the section “Wide character strings”). Now after your note I hope this issue will be more clear to all who deals with it when working om cross-platform projects.
Read less







Gunnar Dalsnes  September 1, 2019


  1  Collapse this comment
Copy link
ws=wchar/word string, ls=long string?, hs=half string?
Wouldn’t ns=narrow string make more sense than hs?And why both ws and ls? ws should suffice…





Bartosz Brachaczek  August 31, 2019


  1  Collapse this comment
Copy link
Defining _CRT_STDIO_ISO_WIDE_SPECIFIERS works as of Visual Studio 2019 and enables C99-conforming format specifiers. I believe it was introduced in Visual Studio 2015 and was initially intended to be the new default, but that idea was subsequently abandoned: https://devblogs.microsoft.com/cppblog/c-runtime-crt-features-fixes-and-breaking-changes-in-visual-studio-14-ctp1/. Now it seems to be completely undocumented, so I guess don’t use it?





Azarien  August 31, 2019


  1  Collapse this comment
Copy link
Who needs those “standard” printf specifiers anyways, given that Windows is perhaps the only major operating system on which wprintf is actually useful (everyone else using UTF-16). I guess there is no point in sticking to a standard which 1) makes no sense, and 2) no one else uses.




‪ ‪  August 31, 2019


  1  Collapse this comment
Copy link
Don’t forget that there was something confusing _CRT_STDIO_ARBITRARY_WIDE_SPECIFIERS.
Although it finally disappeared.





Neil Rashbrook  August 31, 2019


  1  Collapse this comment
Copy link
If that wasn't confusing enough, Netscape 6 (or possibly earlier) included code, a derived version of which still exists in Firefox today, for a function . Despite its name not including , it takes a  format string and prints into a  array, however like  it uses  for a  parameter and  for a  parameter...
Read moreIf that wasn’t confusing enough, Netscape 6 (or possibly earlier) included code, a derived version of which still exists in Firefox today, for a function nsTextFormatter::snprintf. Despite its name not including w, it takes a char16_t* format string and prints into a char16_t array, however like printf it uses %S for a char16_t* parameter and %s for a char* parameter…
Read less







Doug Cook  August 30, 2019


  1  Collapse this comment
Copy link
Sadly, %hs is not standard. And why should it be, when %s is unambiguous (except for those pesky Microsoft folks who tried to be early adopters of Unicode and now get blamed for having baked the early Unicode stuff into the platform)?





Raymond Chen Author
August 30, 2019


  2  Collapse this comment
Copy link
Yikes, so that makes things rather difficult now…




Jonathan Wilson  August 30, 2019


  1  Collapse this comment
Copy link
Why not have an off-by-default flag that allows printf and friends to operate in a “standards complient” mode that follows what the C and C++ standards specify? (if such a thing doesn’t already exist somewhere). Existing code written for Windows doesn’t set the flag and keeps working but code that wants to be cross platform or standards complient can set the flag and get what they want.





Raymond Chen Author
August 30, 2019


  1  Collapse this comment
Copy link
And what if two components in the same process disagree on how the flag should be set?





Alex Cohn  August 31, 2019


  1  Collapse this comment
Copy link
I believe the idea was to choose at compile time





Raymond Chen Author
September 1, 2019


  0  Collapse this comment
Copy link
Same question applies. Suppose two DLLs both use the Visual C++ runtime. One is built with "Windows printf" and the other is built with "Standard printf". Which one should the runtime's printf follow? I guess one solution would be to make printf a macro. If compiling with "Windows printf" it redirects to "printf_wwin"; otherwise it redirects to "printf_std". Not sure what the standard says about that, and it may still have issues with function pointers.
Read moreSame question applies. Suppose two DLLs both use the Visual C++ runtime. One is built with “Windows printf” and the other is built with “Standard printf”. Which one should the runtime’s printf follow? I guess one solution would be to make printf a macro. If compiling with “Windows printf” it redirects to “printf_wwin”; otherwise it redirects to “printf_std”. Not sure what the standard says about that, and it may still have issues with function pointers.
Read less







Dave Bacher  September 4, 2019


  0  Collapse this comment
Copy link
Too complicated!
In the make file, you slam C:\Includes\StdLib\Ours at the head of the System include paths.
In the make file, you remove msvcrtxx.lib (any and all reference), replace it with your replacement library.
Since you're loading c99-stdlib.dll->printf and the DLL is loading msvcrt999u-mt-x-spec.dll->printf, there should be no issues.  If you have a malloc from the process and a free in the DLL, that would be an issue - but as that always has the...Read moreToo complicated!
In the make file, you slam C:\Includes\StdLib\Ours at the head of the System include paths.
In the make file, you remove msvcrtxx.lib (any and all reference), replace it with your replacement library.
Since you’re loading c99-stdlib.dll->printf and the DLL is loading msvcrt999u-mt-x-spec.dll->printf, there should be no issues.  If you have a malloc from the process and a free in the DLL, that would be an issue – but as that always has the potential to corrupt memory, the easy solution is just not to do that and to properly encapsulate.
Read less







Daniel Grunwald  September 2, 2019


  0  Collapse this comment
Copy link
A macro is acceptable; this is explicitly allowed by the C standard. (I’m not sure about C++)
Over in the Linux world, the system headers solve a similar compatibility issue between classic GNU scanf and standard C99 scanf with a macro:   # define scanf __isoc99_scanf





Joshua Hudson  September 2, 2019


  0  Collapse this comment
Copy link
I was expecting the solution to be symbol redirects in .lib files. That is, which .dll function gets called depends on which version of the .lib stub got linked against.



Billy O'Neal  August 30, 2019


  1  Collapse this comment
Copy link
> at least with respect to Unicode, it ended up being a first-mover disadvantage
At least we’re in good company with Java, Javascript, and ICU.