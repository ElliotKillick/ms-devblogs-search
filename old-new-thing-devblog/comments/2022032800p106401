Dave Gzorple  March 28, 2022


  0  Collapse this comment
Copy link
>There is a German word for this: ver­schlimm­bessern
I think this word describes at least 50% of all software (OS, browser, application, you name it) UI “innovation” performed in the last ten to fifteen years.





Georg Rottensteiner  March 28, 2022


  0  Collapse this comment
Copy link
I think one of the big problems causing this is that the Git install on Windows defaults to futzing with the line breaks. It should really really default to “do not touch”.
I can’t fathom why someone would think that a source control tool should mess with the files.





Sunil Joshi  March 29, 2022


  0  Collapse this comment
Copy link
The worst is when you add files to Git that have LR line endings – it will convert them to CRLF! We have had difficulties where that’s happened to bash scripts checked into a repo that were then uploaded from a Windows system to a Linux box.





Kythyria Tieran  March 29, 2022


  0  Collapse this comment
Copy link
Torvalds said his work with filesystems influenced the design of git. There's one influence the entire unix tradition refuses to admit influences any part of it, and that is record-oriented filesystems. Git doesn't store arrays of bytes (well, it can, but that's not the primary mode of usage). It stores arrays of lines, which are byte arrays that are assumed to not contain the bytes 0x0A or 0x0D.
From this perspective, nothing about the data is...Read moreTorvalds said his work with filesystems influenced the design of git. There’s one influence the entire unix tradition refuses to admit influences any part of it, and that is record-oriented filesystems. Git doesn’t store arrays of bytes (well, it can, but that’s not the primary mode of usage). It stores arrays of lines, which are byte arrays that are assumed to not contain the bytes 0x0A or 0x0D.
From this perspective, nothing about the data is being changed by line ending conversion.
Read less






Nathan Williams  March 28, 2022


  0  Collapse this comment
Copy link
Line ending conversation tools that can only process UTF-8 and other 8-bit ASCII supersets, git included, should reject a UTF-16 file as being binary rather than text. By default, git should behave correctly here and leave the file untouched. This most likely happened because someone forced git to treat the file as text, which IMO is never a good idea.





紅樓鍮  March 28, 2022


  0  Collapse this comment
Copy link
Usually when told stories like this, one would pull out that classical line: "Just use UTF-8.  It has the best compatibility.  It's the most efficient.  All the other UTFs themselves are the Verschlimmbesserungen."  And honestly, since I personally rarely touch non-ASCII plain text, I would reckon adopting UTF-8 universally should be the best solution indeed.
Except that my native tongue is Chinese, and that UTF-8 is 50% more space-inefficient than UTF-16 at...Read moreUsually when told stories like this, one would pull out that classical line: “Just use UTF-8.  It has the best compatibility.  It’s the most efficient.  All the other UTFs themselves are the Verschlimmbesserungen.”  And honestly, since I personally rarely touch non-ASCII plain text, I would reckon adopting UTF-8 universally should be the best solution indeed.
Except that my native tongue is Chinese, and that UTF-8 is 50% more space-inefficient than UTF-16 at handling Chinese text, and even more so CPU-wise.  There are huge practical motivations for using UTF-16 in applications targeting the East Asian market that require high-performance text processing.  And that’s why I can never agree with Rust taking the same stance as all the rest of “modern programming languages” on non-UTF-8-encoded strings.
Read less







Richard Russell  March 28, 2022


  0  Collapse this comment
Copy link
> And that’s why I can never agree with Rust taking the same stance as all the rest of “modern programming languages” on non-UTF-8-encoded strings.
Except that a 'programming language' will be using files containing mostly ASCII characters (keywords, numbers, symbols, variables, function names etc.) with those Chinese/Indic characters limited mainly to literal strings and comments.  So I would expect UTF-8 to win over UTF-16 with a typical source-code file, even in those regions. ...Read more> And that’s why I can never agree with Rust taking the same stance as all the rest of “modern programming languages” on non-UTF-8-encoded strings.
Except that a ‘programming language’ will be using files containing mostly ASCII characters (keywords, numbers, symbols, variables, function names etc.) with those Chinese/Indic characters limited mainly to literal strings and comments.  So I would expect UTF-8 to win over UTF-16 with a typical source-code file, even in those regions.  Admittedly Raymond’s example of a RC file might be an exception.
Read less







Chris Iverson  March 30, 2022


  0  Collapse this comment
Copy link
> So I would expect UTF-8 to win over UTF-16 with a typical source-code file, even in those regions.
Except he's not talking about a source-code file anymore.
Raymond's post was talking about source code files, and in those cases, you'd be correct: the majority of the file would be comprised of characters that are more efficiently encoded in UTF-8 as compared to UTF-16.  UTF-8 is simply a win.
However, he was talking about heavy string manipulation...Read more> So I would expect UTF-8 to win over UTF-16 with a typical source-code file, even in those regions.
Except he’s not talking about a source-code file anymore.
Raymond’s post was talking about source code files, and in those cases, you’d be correct: the majority of the file would be comprised of characters that are more efficiently encoded in UTF-8 as compared to UTF-16.  UTF-8 is simply a win.
However, he was talking about heavy string manipulation and text processing, not just writing a source code file.  He’s talking about the facilities the language provides for working with strings.  In particular, he mentions Rust, whose String type and all associated string and text manipulation libraries/utilities use UTF-8 as their internal representation.
This very much WOULD slow his processing down quite a bit compared to UTF-16 representation for any non-Western languages, and based on what he’s saying, it does indeed do so.
The issue he has is that with languages like Rust, he has no real choice.  The only choice of text encoding that you can use with Rust’s string libraries is UTF-8; if you have anything else, you either have to convert it to UTF-8 to use Rust’s provided utilities, or write your own utilities.
So his choices are (if he uses such a language) to use the inbuilt text functions that are well documented and supported, and just deal with the fact that it’s going to be (possibly monumentally) slower, or write it all himself from scratch, and wind up with faster, but less tested, less supported, less documented, and possibly less stable code.
Read less






Sunil Joshi  March 28, 2022


  0  Collapse this comment
Copy link
I agree – Indic languages also require more space in UTF-8. It’s a very Western-Centric view of the world.