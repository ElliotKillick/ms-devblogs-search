Jacob Manaker  October 2, 2020


  0  Collapse this comment
Copy link
As another commentator on this blog has pointed out before, assigning to a temporary can be disallowed if you restrict operator= to only lvalues, i.e.:
decltype(*this) operator=(/*rhs*/) &;
  Why does WinRT allow assignment to temporaries?





GL  October 2, 2020


  0  Collapse this comment
Copy link
Another way is to return `T const` instead of `T` (e.g., for the dereferencing operator).





Raymond Chen Author
October 2, 2020


  0  Collapse this comment
Copy link
But that means that you won’t be able to invoke non-const methods on the returned object.





Neil Rashbrook  October 3, 2020


  0  Collapse this comment
Copy link
Since you can’t actually mutate the original object in the collection, what’s invoking a non-const method on the returned temporary going to achieve?





紅樓鍮  October 3, 2020


  0  Collapse this comment
Copy link
It depends on what kind of object the returned temporary is.  If it's of a class or interface type then there are basically no non-const memfuns on it (since you don't mutate the pointer however you may be mutating the pointee), so it behaves normally as a smart pointer except that you cannot move from it (which requires the pointer itself being non-const).  If it's a fundamental type or a struct then there...Read moreIt depends on what kind of object the returned temporary is.  If it’s of a class or interface type then there are basically no non-const memfuns on it (since you don’t mutate the pointer however you may be mutating the pointee), so it behaves normally as a smart pointer except that you cannot move from it (which requires the pointer itself being non-const).  If it’s a fundamental type or a struct then there are no memfuns in the first place, but any class/interface type fields recursively contained in a struct will be move-disabled too.  If it’s a TimeSpan (aka std::chrono::duration<int64_t, std::ratio<1, 10'000'000>>) then you can invoke non-const memfuns like operator+= on it, but the mutated temporary will subsequently be destroyed, so the net effect is that you do nothing.
Read less






紅樓鍮  October 2, 2020


  0  Collapse this comment
Copy link
IIRC not even standard library types forbid assigning to rvalues