Azarien  January 3, 2022


  0  Collapse this comment
Copy link
Ah, can‚Äôt wait for this year‚Äôs ‚ÄúSeattle Symphony subscription season at a glance‚Äù post üôÇ





Richard Cox  January 3, 2022


  0  Collapse this comment
Copy link
As there is no admin contact link for devblogs, and I noticed this here first, this seems the least worse place to report that there appears to be a server side caching problem with the RSS feed.
Go to https://devblogs.microsoft.com/oldnewthing/ in an incognito/private browsing session. Scroll down and click on the RSS link. And the returned RSS was built 22 Dec 2021, with the latest item being "How do I programmatically reposition monitors in a multiple-monitor...Read moreAs there is no admin contact link for devblogs, and I noticed this here first, this seems the least worse place to report that there appears to be a server side caching problem with the RSS feed.
Go to https://devblogs.microsoft.com/oldnewthing/ in an incognito/private browsing session. Scroll down and click on the RSS link. And the returned RSS was built 22 Dec 2021, with the latest item being ‚ÄúHow do I programmatically reposition monitors in a multiple-monitor system?‚Äù. However in a browser that has previously being logged in (and thus has various WP related cookies) the RSS feed was built Mon, 03 Jan and is complete.
I suspect edge caching has been added at some point, with a cookie based bypass when doing more than just reading. But left a very long cache time for static content, while failing to see that RSS feeds are not static.
Read less







Brian Beck  January 3, 2022


  0  Collapse this comment
Copy link
Thank you!   I had noticed that my RSS reader was getting Raymond‚Äôs posts in batches but hadn‚Äôt quite figured out why.




Á¥ÖÊ®ìÈçÆ  December 31, 2021


  0  Collapse this comment
Copy link
I‚Äôm curious as to why Unity would need a ‚Äúsocket polling thread‚Äù; can‚Äôt other threads do the polling themselves?  Maybe they have to perform garbage collection while they wait for the socket to become available?  If that‚Äôs the case, they could use overlapped I/O with a signaling event.





Kevin Norris  January 4, 2022


  0  Collapse this comment
Copy link
I believe they were using the word "polling" in the Unix/Linux sense of the term (i.e. referring to epoll(2), which is mostly just a better, but less portable, variant of select(2)). This family of syscalls is roughly synonymous with WaitForMultipleObjects, which ironically is the exact opposite of what most people think of when you say "polling." I base this belief on the fact that the blog post repeatedly refers to the winsock select() function, which...Read moreI believe they were using the word ‚Äúpolling‚Äù in the Unix/Linux sense of the term (i.e. referring to epoll(2), which is mostly just a better, but less portable, variant of select(2)). This family of syscalls is roughly synonymous with WaitForMultipleObjects, which ironically is the exact opposite of what most people think of when you say ‚Äúpolling.‚Äù I base this belief on the fact that the blog post repeatedly refers to the winsock select() function, which is nearly identical to the POSIX select().
In other words: This is not a thread that repeatedly asks ‚ÄúIs there any data in the socket? How about now? How about now?‚Äù This is a thread that sits blocked inside of select() waiting for something to happen (like a message pump or event loop). You need a dedicated thread to do that, so that other threads can make forward progress.
Incidentally, the POSIX equivalent to what they are describing is (as far as I understand) completely legal. Specifically, POSIX permits you to send yourself a signal (e.g. using raise(2)), and then from that signal, to call longjmp(2). POSIX does say that you can break things by doing this (specifically, if you interrupt a ‚Äúnon-async-signal-safe‚Äù function, then call another non-async-signal-safe function, POSIX says that causes UB), but POSIX also says that select(2) must be async-signal-safe and therefore must not cause UB when interrupted in this fashion. Therefore, POSIX implicitly permits you to longjmp() out of select().
Read less







Á¥ÖÊ®ìÈçÆ  January 5, 2022


  0  Collapse this comment
Copy link
I‚Äôm assuming that the threads which post sockets to the polling thread do, possibly after doing other things, actively care about when the socket becomes ready (otherwise the polling thread has no way to post the selecting results back).  If that‚Äôs the case, then wherever in the code they receive a selecting result, they should be able to instead check the status of an event.





Kevin Norris  January 5, 2022
¬∑ Edited

  0  Collapse this comment
Copy link
It may be the case that a single thread cares about the status of multiple sockets, or that a single socket is of interest to more than one thread. Or it may be the case that they are using a thread pool, and don't want worker threads hanging around waiting on sockets when they could be processing other work objects.
(EDIT: Rereading it, they *are* using a thread pool. So that's probably the reason.)
More generally: There's...Read moreIt may be the case that a single thread cares about the status of multiple sockets, or that a single socket is of interest to more than one thread. Or it may be the case that they are using a thread pool, and don‚Äôt want worker threads hanging around waiting on sockets when they could be processing other work objects.
(EDIT: Rereading it, they *are* using a thread pool. So that‚Äôs probably the reason.)
More generally: There‚Äôs more than one way to do it, and I tend to assume they went with the ‚Äúsocket polling thread‚Äù approach in order to reduce the complexity of other parts of the system (lots of signaling events all over the place vs. one dedicated thread that multiplexes all of the I/O on behalf of everybody else).
Read less





Peter Cooper Jr.  December 31, 2021
¬∑ Edited

  0  Collapse this comment
Copy link
On the contrary, it was definitely worth it, as usual. Thank you!