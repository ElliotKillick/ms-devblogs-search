cheong00  November 3, 2019


  0  Collapse this comment
Copy link
Just something remotely related. Yesterday I found my Android game crashed when I sort the card list a few time, with the systems saying it detected a memory scan and will terminate the App.
Talking about Operating System changes that cause things previously worked failed in unexpected way.





Ian Boyd  November 3, 2019


  0  Collapse this comment
Copy link
Is thing sort of programming bug also caught by AppVerifier?





Raymond Chen Author
November 4, 2019


  0  Collapse this comment
Copy link
AppVerifier complains loudly if you call TerminateThread.




Neil Rashbrook  November 2, 2019


  0  Collapse this comment
Copy link
Can you not have one event per process, and signal all threads waiting on critical sections if there’s a thread waiting on the critical section that you just left? Any thread waiting on another critical section will just assume that another thread waiting on that critical section got there first.





‪ ‪  November 1, 2019


  0  Collapse this comment
Copy link
Providing Terminate­Thread() is Microsoft’s biggest mistake.





MNGoldenEagle  November 1, 2019


  0  Collapse this comment
Copy link
To be fair, most operating systems provided the same functionality, including POSIX. API design sadly does not come with any magic 8 balls to tell you if it’s going to end up being a costly mistake or not.





Simon Clarkstone  November 4, 2019


  0  Collapse this comment
Copy link
According to the article Raymond linked to, the designers did know TerminateThread() was a bad idea and were reluctant to write it.





Kenny  November 4, 2019


  0  Collapse this comment
Copy link
If I had a dollar for every time I was forced to implement something which I told management was a bad idea over the last 20 years I would have enough money to buy a very nice used car.



Ron Parker  November 1, 2019


  0  Collapse this comment
Copy link
This is the second time in a month that you've posted some random thing that just happened to solve a problem I was having. The first one was the fiber-local storage thing, and now this one.
I was just investigating a bug where someone was keeping around a pointer to a stack variable that had gone out of scope. In the process I made a little tool to search all of the process's heaps for...Read moreThis is the second time in a month that you’ve posted some random thing that just happened to solve a problem I was having. The first one was the fiber-local storage thing, and now this one.
I was just investigating a bug where someone was keeping around a pointer to a stack variable that had gone out of scope. In the process I made a little tool to search all of the process’s heaps for any pointers into any thread’s stack, and especially into areas near or at a lower address than that thread’s RSP. I was surprised that even notepad.exe has a handful of stack pointers in the heap right at startup, but I also noted that they all pointed into “live” stack.
This note about WaitOnAddress has solved the (minor) mystery of what some of those pointers likely are, and now I can try to mark them as “safe” based on the RIP of the thread who owns the stack. That is, if the thread is inside WaitOnAddress (or the relevant SRW functions) somewhere, the tool can probably ignore pointers to a certain to-be-determined part of its stack, even though they may be “near” RSP and thus look suspicious.
Read less