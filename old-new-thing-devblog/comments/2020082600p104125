Dzmitry Konanka  August 31, 2020


  0  Collapse this comment
Copy link
If this is single and well known library, written by MS. Why didn’t you use your app-compatibility engine to hotpatch its code or even intercept loading of old unicows.dll and load instead its new version, with blackjack and forwarded exports support?





ori damari  August 26, 2020


  0  Collapse this comment
Copy link
But many functions like VirtualProtect does not have a string argument and still use a stub





Patrick  August 26, 2020


  0  Collapse this comment
Copy link
But what are the four “no net effect” instructions for?





Kasper Brandt  August 26, 2020


  0  Collapse this comment
Copy link
Hot-patch point: https://devblogs.microsoft.com/oldnewthing/20110921-00/?p=9583
mov     edi,edi
Stack frame set up

push    ebp
mov     ebp,esp

Stack frame tear down

pop     ebp






skSdnW  August 26, 2020


  0  Collapse this comment
Copy link
But why does MSVC insist on setting up a useless stack frame? Older versions of the compiler (VC6 etc.) does not do this.





Kasper Brandt  August 26, 2020


  0  Collapse this comment
Copy link
Maybe it’s compiled with /Oy-
(I haven’t checked what exactly it does – I guess the jump is from a tail call optimization? Maybe that just gives that slightly silly result when combined with forcing stack frame generation)



Sunil Joshi  August 26, 2020


  0  Collapse this comment
Copy link
I’m assuming that the performance implications of this are actually negligible at runtime because it’s entirely predictable?





Alex Martin  August 26, 2020


  0  Collapse this comment
Copy link
Have you decided to go with x86-32 and x86-64 now? It seems more rational to me, but Microsoft has always used (and to my knowledge still uses) x86 and x64.





skSdnW  August 26, 2020


  0  Collapse this comment
Copy link
Parts of Windows uses AMD64. It confuses some people but it made sense at the time when you had two different 64-bit XP versions.





Raymond Chen Author
August 26, 2020


  0  Collapse this comment
Copy link
I haven’t yet settled on a naming convention.





Mystery Man  August 26, 2020


  0  Collapse this comment
Copy link
Assuming your context does not allow you to use x86, please go with what people already use: “IA-32” or “i386”.
I’m concerned that if you do otherwise, whatever you settle on probably has the same feel as phrases like “.NET Standard”, “inbox”, “boot partition”, “system partition” and, my personal favorite, “Program Files”.





Julien Oster  August 26, 2020


  0  Collapse this comment
Copy link
The problem is: “What people already use” might just be what you perceive. IA-32 was coined retroactively after IA-64 (Itanium) became a thing, and “i386” has the opposite problem of being very antiquated and also rather misleading. A whole lot of non-64bit x86 code does not actually run on an actual 386 CPU anymore, and I see other weird stuff like “i586” in platform names.





Mystery Man  August 27, 2020


  0  Collapse this comment
Copy link
That's how a geek thinks. "The problem is: World War 1 was coined retroactively after World War 2." A layman responds "Good!" Or maybe tries to humor the geek by asking "Retroactively or retrospectively? Oh, and by the way, which one is correct, 'Aerith' or 'Aeris'? Can we call something an 'HTML5 app' if its HTML is antiquated but it is using CSS 3?"
I use language as a way of helping my readers understand me,...Read moreThat’s how a geek thinks. “The problem is: World War 1 was coined retroactively after World War 2.” A layman responds “Good!” Or maybe tries to humor the geek by asking “Retroactively or retrospectively? Oh, and by the way, which one is correct, ‘Aerith’ or ‘Aeris’? Can we call something an ‘HTML5 app’ if its HTML is antiquated but it is using CSS 3?”
I use language as a way of helping my readers understand me, not to infuriate them.
Read less