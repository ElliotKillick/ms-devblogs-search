Dmitry

6 days ago· Edited

  0  Collapse this comment
Copy link
That at this particular moment in time this particular amount of stack is enough only when saving every few bytes every now and then literally means it won’t be enough after a slight change in code like another local variable or something.
For any sane size of stack it is either enough or something is really wrong with the algorithms.
Saving some stack might have noticeable net effect either for heavy recursion (which is not a good...Read moreThat at this particular moment in time this particular amount of stack is enough only when saving every few bytes every now and then literally means it won’t be enough after a slight change in code like another local variable or something.
For any sane size of stack it is either enough or something is really wrong with the algorithms.
Saving some stack might have noticeable net effect either for heavy recursion (which is not a good idea in most cases anyway) or for some very memory-limited use cases where using HLL is the wrong thing then.
Read less
 Log in to Vote or Reply






Dmitry  October 17, 2024
· Edited

  0  Collapse this comment
Copy link
That’s why I’ve always been surprised those modern compilers are so proud of their tail-call optimizations. Like come on, guys, return address predictor has been there for ages, what do you really gain outside synthetic tests and quite rare cases, except for the unnecessary complexity of your own compiler (and debugger?)? Why would you even call them ”optimizations”? Modern processors tend to optimize for regular, trick-free code (which is the obvious direction to go for...Read moreThat’s why I’ve always been surprised those modern compilers are so proud of their tail-call optimizations. Like come on, guys, return address predictor has been there for ages, what do you really gain outside synthetic tests and quite rare cases, except for the unnecessary complexity of your own compiler (and debugger?)? Why would you even call them ”optimizations”? Modern processors tend to optimize for regular, trick-free code (which is the obvious direction to go for any architecture anyway).
Read less
 Log in to Vote or Reply






Joshua Hudson  October 17, 2024


  1  Collapse this comment
Copy link
I’ve seen code that *literally wouldn’t work* if you took away the tail call optimization because it would blow through the stack. Kernel mode stack is pretty small because it can’t be paged.

 Log in to Vote or Reply





Joshua Hudson

1 week ago

  0  Collapse this comment
Copy link
Instead of push immed/ret we can do JMP immed; this requires a loader fixup.

 Log in to Vote or Reply