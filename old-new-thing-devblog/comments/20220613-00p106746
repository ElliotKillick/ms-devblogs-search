Yuhong Bao  June 13, 2022


  0  Collapse this comment
Copy link
Do you know why they needed to detour?





Paul Jackson  June 13, 2022


  0  Collapse this comment
Copy link
> They’re probably doing it so that they can “add extra features” to Explorer.
Is it a bad thing that people want or need extra features? If Microsoft would provide some APIs, maybe there won’t be a need in detours.





Antonio Rodríguez  June 13, 2022


  1  Collapse this comment
Copy link
Of course, it's not a bad thing to have extra features. In fact, Explorer do have an official API for that, in the form of shell extensions, which register through known COM interfaces. But every extension API has to be limited in some way (what is not supported by the API is, by definition, not supported). Try to write a program that does something complex and provide ways to change its behavior in *every* way....Read moreOf course, it’s not a bad thing to have extra features. In fact, Explorer do have an official API for that, in the form of shell extensions, which register through known COM interfaces. But every extension API has to be limited in some way (what is not supported by the API is, by definition, not supported). Try to write a program that does something complex and provide ways to change its behavior in *every* way. Chances are you’ll find the only feasible way to do that is at the source level – which will exclude 99.9% of your userbase, even if you publish your product’s source code.
If you want to do something unsupported by the API, you end up having to patch the binaries, and one way of that is detouring. All forms of binary patching are dangerous and often unsupported: at any time and without warning, an internal function can change its entry point address or parameters, or disappear completely. So if you start patching the binary, you are entering the “Here be dragons” zone. You don’t need Microsoft to tell you that. You are supposedly smart enough to know what you are doing and its consequences.
Unfortunately, when the patch fails, the crash is in Explorer’s process, so to the end user, the blame goes to Microsoft instead of (in this case) the antivirus maker. So I agree with the first comment: Microsoft should do everything in their hand to block binary patches. In fact, it would be a very good measure against malware. But my psychic powers tell me they can’t because of technical and/or compatibility reasons.
Read less







Paul Jackson  June 14, 2022


  0  Collapse this comment
Copy link
My point is that, in my opinion, the official APIs don’t cover enough use cases. Of course, covering every use case is not feasible, but Microsoft doesn’t cover even the common cases. Do you have APIs to customize the start menu? The taskbar? The explorer ribbon? Barely. And it’s becoming less customizable with time, both for users and for third party software.





Antonio Rodríguez  June 14, 2022


  1  Collapse this comment
Copy link
Raymond has covered several times the reasons why that level of customization is not covered by the API. For starters, it would open them to be a war zone between competing applications. Would you like that when you open Google Chrome it removes all icons to Firefox or Edge, or place itself in an unmovable panel at the top of the Start Menu? Furthermore, if they did provide a full API to customize (for example)...Read moreRaymond has covered several times the reasons why that level of customization is not covered by the API. For starters, it would open them to be a war zone between competing applications. Would you like that when you open Google Chrome it removes all icons to Firefox or Edge, or place itself in an unmovable panel at the top of the Start Menu? Furthermore, if they did provide a full API to customize (for example) the Windows XP Start Menu, they would have to stick with that design; otherwise, the API would likely have been to be broken in major redesigns (such as the ones in in Windows 7, 8, 10 and 11). And then people would yell because the Stat Menu hasn’t changed in 20 years, or because Microsoft knowingly broke a public API.
In fact, you can see where this leads by looking at other OSes. Linux has that very same problem, with all the “desktop wars”. You can choose between hundreds of distributions which use, at least, a dozen different desktop environments (Gnome, KDE, LXDE…), each one with its own customizations. You can grab the source code and modify it to your heart’s content, or add the hooks needed for what you want to do. But it probably will only work with one distribution, and will stop working if it switches to a different environment, or even when it upgrades to a newer version with a different design.
Read less







David Trapp  June 13, 2022


  0  Collapse this comment
Copy link
Plus, it’s Microsoft who created the Detours library in the first place: https://github.com/microsoft/Detours





Emily Bowman  June 23, 2022


  1  Collapse this comment
Copy link
It’s worth noting the difference between Detours™ the Microsoft-published library, and “detouring” the microspeak for the general concept — whether that came from the product name or came before and influenced the product name, I wouldn’t know, but I do know it’s very commonly used  (especially in .Net) for what other ecosystems generally call “hotpatching” by any means, not just that one library.





Ron Parker  June 14, 2022
· Edited

  0  Collapse this comment
Copy link
While that's true, a lot of ISVs created their own version, because the licensing for Detours was cost-prohibitive for a lot of smaller companies back in the day. That may have changed, but in a lot of cases the die is already cast.
The last project I did for my previous employer, as recently as five years ago, was to create a general-purpose library for various sorts of function/method hooks, including this kind. It wouldn't have...Read moreWhile that’s true, a lot of ISVs created their own version, because the licensing for Detours was cost-prohibitive for a lot of smaller companies back in the day. That may have changed, but in a lot of cases the die is already cast.
The last project I did for my previous employer, as recently as five years ago, was to create a general-purpose library for various sorts of function/method hooks, including this kind. It wouldn’t have caused this problem, though, because it was able to detect and adjust RIP-relative addressing and a number of other less-obvious pitfalls the details of which I have mercifully forgotten. It probably still didn’t catch every case.
(Editing to add: one of the details that I’ve now regretfully remembered is that it also handled conditional jumps that exited the chunk of code that was being detoured. Those are also RIP/EIP-relative, of course, but in a messier way.)
And, of course, it only handled x86 and x86_64. Good luck to whoever’s maintaining it today.
Read less





word merchant  June 13, 2022


  0  Collapse this comment
Copy link
Just disallow detouring. Microsoft is big enough and rich enough to get away with ruining a few anti-virus and shell extensions (both examples of where the cure is way worse the the disease).
Be honest: any company that promoted Teams on during a pandemic when we couldn’t avoid it clearly has little executive shame.





Ron Parker  June 14, 2022


  1  Collapse this comment
Copy link
I don’t believe that there’s any reasonable way to prevent detouring without also preventing fundamental things like JIT compilation. I’d be happy to be proven wrong, of course, even though in my previous life I have caused well more than my fair share of detours.