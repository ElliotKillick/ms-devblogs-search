Tarun Elankath  November 10, 2019


  0  Collapse this comment
Copy link
Could you please explain that static_assert on the negation of sizeof(0p*) ? Understood everything else. I wish you would write about useful C++ idioms and techniques that can be used in real code,  not just pointless programming poems.





Raymond Chen Author
November 10, 2019


  0  Collapse this comment
Copy link
Yes, this exercise was productive in the sense that it employed multiple tricks which can be useful in real code. We’ll dig into those tricks over time.




Yuri Khan  November 7, 2019


  0  Collapse this comment
Copy link
Functional programming textbooks give very similar examples in their “and this is how you implement a stateful object with methods in a functional language”: pack your state in a lambda’s closure, and have it accept tag values that tell it which method to execute.





David Ryan  November 7, 2019


  0  Collapse this comment
Copy link
Really neat example, even if an ‘abuse’ of the language.
Small nitpick. In a couple of examples here, I would expect the ‘total’ variable to be captured by reference (so that “total +=” has an effect, especially in those versions of the lambda where total is not returned). In those versions of the lambda where total is returned, I would expect the example usage to assign the result to total, e.g. total = lambda(apply_discount, 5.00);





Daniel Grunwald  November 7, 2019


  0  Collapse this comment
Copy link
C++17 also has this neat trick for combining multiple lambdas into one:
template<class... Ts> struct overloaded : Ts... { using Ts::operator()...; };
template<class... Ts> overloaded(Ts...) -> overloaded<Ts...>;
Usage: https://godbolt.org/z/sNJ95K
 ends up deriving from multiple lambda types and inheriting all their call operators. This uses C++17 class template argument deduction and C++17 aggregate base initialization.
The downside is that you'll waste some memory if multiple lambdas capture the same variables.
Read moreC++17 also has this neat trick for combining multiple lambdas into one:
template<class… Ts> struct overloaded : Ts… { using Ts::operator()…; };
template<class… Ts> overloaded(Ts…) -> overloaded<Ts…>;
Usage: https://godbolt.org/z/sNJ95K
overloaded ends up deriving from multiple lambda types and inheriting all their call operators. This uses C++17 class template argument deduction and C++17 aggregate base initialization.
The downside is that you’ll waste some memory if multiple lambdas capture the same variables.
Read less







Peter Cooper Jr.  November 7, 2019


  0  Collapse this comment
Copy link
Nitpick/typo: It’s been a long time since I’ve done anything with C++, but I would expect that with that first auto result1 = lambda(123); that result1 would actually be 124, not 3.
Though this is such an abuse of the language that I feel it’d serve you right if the compiler gave you a 3 there anyway.





Raymond Chen Author
November 7, 2019


  0  Collapse this comment
Copy link
Oops, you’re right. On both counts.




Ben Voigt  November 7, 2019


  0  Collapse this comment
Copy link
Does that std::find_not_if trick actually work?  I thought the functor was passed by value.
Far better to capture the accumulator local variable by reference instead of storing it inside the lambda, then all copies share the same underlying variable, and the surrounding scope can access it too.





Raymond Chen Author
November 7, 2019


  0  Collapse this comment
Copy link
Oops, added a std::ref() to force it to be passed by reference. Abusing the language is such a challenge.