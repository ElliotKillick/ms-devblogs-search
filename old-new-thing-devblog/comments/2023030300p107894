Mystery Man  March 4, 2023
· Edited

  0  Collapse this comment
Copy link
Doesn’t work. The first line of the script returns the following error.
InvalidOperation: Unable to find type [Windows.ApplicationModel.DataTransfer.Clipboard,Windows.ApplicationModel.DataTransfer, ContentType=WindowsRuntime].
From that point onward, it’s all failures.





Andrew Timson  March 4, 2023
· Edited

  0  Collapse this comment
Copy link
Windows PowerShell can find the type, PowerShell 7 can’t. (I still get issues later on because $result.Items.Content is null, though.)





George Tokmaji  March 5, 2023
· Edited

  0  Collapse this comment
Copy link
Windows PowerShell (aka PowerShell 5) is based on .NET Framework, PowerShell 7 on .NET Core.





Blubberich  March 6, 2023


  0  Collapse this comment
Copy link
If you run PowerShell and can access the files of the :NET Framework, using Add-Typ and referencing the assembly directly should work.
https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/add-type?view=powershell-7.3
$NewType = Add-Type -AssemblyName C:\AssemblyPath -PassThru





Kalle Niemitalo  March 6, 2023
· Edited

  0  Collapse this comment
Copy link
The file is “C:\WINDOWS\system32\WinMetadata\Windows.ApplicationModel.winmd” but neither Windows PowerShell 5.1 nor PowerShell 7.3.3 can load it by calling Add-Type -AssemblyName, [System.Reflection.Assembly]::LoadFile, or [System.Reflection.Assembly]::LoadFrom.
WinRT interop was removed in .NET 5. PowerShell 7.0.13 uses .NET Core 3.1.30 and seems to be the last release in which WinRT types can be natively referenced.





Mystery Man  March 4, 2023
· Edited

  1  Collapse this comment
Copy link
Ironic. I remember a time when Microsoft had an undue focus on backward compatibility. Now its contemporary technologies aren’t compatible with each other. The “I” in “API” stands for “Interface” but whoever made Windows.ApplicationModel.DataTransfer.Clipboard didn’t get the memo.





Blubberich  March 6, 2023


  1  Collapse this comment
Copy link
Well it’s supposed to be the cross-platform PowerShell and framework.
So what do you do about platform-specific stuff?
Throw it out as happened here?
Keep it in and require runtime checks for the platform?
I see no way Microsoft can win here.





Mystery Man  March 6, 2023


  1  Collapse this comment
Copy link
PowerShell 7.0, which was also cross-platform, could do it. C#, which is also cross-platform, can do it right now.
And most importantly, this Windows Runtime nonsense that nobody seems to understand is a trap of Microsoft's making. It shows no teamwork spirit towards anything except Microsoft Store apps, which are hard to develop, impossible to optimize, slow as tar, and incredibly hideous. Microsoft had 11 years to dismantle this nonsense. Except, the company kept digging itself...Read morePowerShell 7.0, which was also cross-platform, could do it. C#, which is also cross-platform, can do it right now.
And most importantly, this Windows Runtime nonsense that nobody seems to understand is a trap of Microsoft’s making. It shows no teamwork spirit towards anything except Microsoft Store apps, which are hard to develop, impossible to optimize, slow as tar, and incredibly hideous. Microsoft had 11 years to dismantle this nonsense. Except, the company kept digging itself into a hole.
Read less







Paulo Pinto  March 5, 2023


  1  Collapse this comment
Copy link
The way UWP, WinUI. .NET Native, C++/CX migration has been managed has been a joke on us, see the amount of issues on Github, Developer Connection and missing features.
PowerShell being another victim of this mess is yet another symptom.
It is quite hard to stay commited to Windows desktop nowadays, other than classical Win32 and .NET APIs, everything else is hit and miss.





Mystery Man  March 5, 2023


  0  Collapse this comment
Copy link
And PowerShell’s inventor left Microsoft. He’s working for Google now.