紅樓鍮  May 5, 2022
· Edited

  0  Collapse this comment
Copy link
The C++ API has to be like this.
<code>
where
<code>
Funnily C++ has every weapon in its arsenal to write highly generic code like this, computing the exact needed discriminated union type from the input function type parameters, despite having ergonomically inferior discriminated unions than most "modern" languages, because you can't produce a discriminated union type on the fly in those "modern" languages like you can in C++ with .
Read moreThe C++ API has to be like this.
template <typename ...Fs>
when_any_awaitable<await_result_t<std::invoke_result_t<Fs>>...>
when_any(Fs &&...fs);

template <typename ...Ts>
std::variant<Ts...> when_any_awaitable<Ts...>::await_resume();
where
template <typename T, typename = void>
struct await_result {
  using type = decltype(std::declval<T>().await_resume());
};

template <typename T>
struct await_result<T, 
    std::void_t<decltype(operator co_await(std::declval<T>()).await_resume())>>
    : await_result<decltype(operator co_await(std::declval<T>())), int> {};

template <typename T>
using await_result_t = typename await_result<T>::type;
Funnily C++ has every weapon in its arsenal to write highly generic code like this, computing the exact needed discriminated union type from the input function type parameters, despite having ergonomically inferior discriminated unions than most “modern” languages, because you can’t produce a discriminated union type on the fly in those “modern” languages like you can in C++ with variant.
Read less







Michael Taylor  May 5, 2022


  1  Collapse this comment
Copy link
In your first batch of code that isn't really a timeout to me. You're simply blocking until either the operation completes or some time has elapsed. The task you originally started is still going to run to completion. That seems wasteful of resources but I guess if you have that requirement.
For the second batch of code though that seems like overkill. Maybe I'm missing something here but you don't need to create a custom function...Read moreIn your first batch of code that isn’t really a timeout to me. You’re simply blocking until either the operation completes or some time has elapsed. The task you originally started is still going to run to completion. That seems wasteful of resources but I guess if you have that requirement.
For the second batch of code though that seems like overkill. Maybe I’m missing something here but you don’t need to create a custom function and throw an exception to timeout something as it would just be easier to cancel the request. That is the normal behavior, in my experience, anyway. [CancellationTokenSource](https://docs.microsoft.com/en-us/dotnet/api/system.threading.cancellationtokensource.cancelafter?view=net-6.0) has a method for just that purpose. So in every case where I need to only have a task run for a specific amount of time and then have it abort I just pass in a `CancellationToken` created by the source with the timeout specified. The task either completes in time or is automatically cancelled.
Read less







switchdesktopwithfade@hotmail.com  May 5, 2022
· Edited

  0  Collapse this comment
Copy link
I might be wrong but I imagine the final version of this pattern would be:
<code>
A new cancellation token linked to the first parameter would be temporarily created inside this method just to represent this operation. Each delegate receives the linked CancellationTokenSource. When any of the delegates complete, the linked CancellationTokenSource is canceled to stop the other delegates. Any OperationCanceledExceptions are swallowed.
Example:
<code>
EDIT: Changed TaskCompletionSource to CancellationTokenSource.
Read moreI might be wrong but I imagine the final version of this pattern would be:
Task WaitAny(
    CancellationToken cancellationToken,
    params Func<CancellationToken, Task>[] actions);
A new cancellation token linked to the first parameter would be temporarily created inside this method just to represent this operation. Each delegate receives the linked CancellationTokenSource. When any of the delegates complete, the linked CancellationTokenSource is canceled to stop the other delegates. Any OperationCanceledExceptions are swallowed.
Example:
await WaitAny(
    source.token,
    t => o.GetSomethingAsync().AsTask(t),
    t => Task.Delay(TimeSpan.FromSeconds(1), t));
EDIT: Changed TaskCompletionSource to CancellationTokenSource.
Read less







anonymous  May 5, 2022
· Edited

  0  Collapse this comment
Copy link
this comment has been deleted.