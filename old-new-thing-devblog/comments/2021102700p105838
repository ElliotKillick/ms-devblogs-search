紅樓鍮  October 28, 2021
· Edited

  0  Collapse this comment
Copy link
This one looks better:
<code>
where  is defined as
<code>
Can be adapted to use tag types other than .  With CNTTP for example, one may wish to use compile-time strings to tag callbacks.
Read moreThis one looks better:

template <int I>
using tag = std::integral_constant<int, I>;

struct Widget final
    : IWidget, icallbacks<Widget, 1, 2> {
  HRESULT operator()(tag<1>) { /* callback 1 code */ }
  HRESULT operator()(tag<2>) { /* callback 2 code */ }

  HRESULT RegisterCallback() {
    SetCallback1(icallback<1>());
    SetCallback2(icallback<2>());
  }
};

where icallbacks is defined as

template <typename D, int I>
class icb_impl : public ICallback {
  /* ... */
  HRESULT CallbackMethod()
  { return static_cast<D &>(*this)(tag<I>{}); }
};

template <typename D, int... Is>
class icallbacks : public icb_impl<D, Is>... {
protected:
  template <int I>
  ICallback *icallback()
  { return static_cast<icb_impl<D, I> *>(this); }
};

Can be adapted to use tag types other than std::integral_constant.  With CNTTP for example, one may wish to use compile-time strings to tag callbacks.
Read less