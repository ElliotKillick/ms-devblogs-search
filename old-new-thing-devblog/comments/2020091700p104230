GL  September 17, 2020


  0  Collapse this comment
Copy link
I have expected the two free-standing `capture` to receive the `pv` in a local `void *`, and only create the `com_ref` (in fact, why not `com_ptr`) upon `return` after `check_hresult`. This would save the hassle of constructing and (more importantly) destructing the empty `com_ref` when `check_hresult` throws.





紅樓鍮  September 17, 2020


  0  Collapse this comment
Copy link
Raymond, weren’t you gonna link “it contains its own private redeclaration” to your /ALTERNATENAME article?
Bonus chatter: For some reason I can’t conceive C++/WinRT is extremely unwilling to use perfect forwarding in generic functions.  It may be easy to forget to forward the lambda being invoked, but it doesn’t even forward args either…





Raymond Chen Author
September 17, 2020


  0  Collapse this comment
Copy link
Good idea on the link, added. As for perfect forwarding: Capturing is intended for ABI interop, and at the ABI, there are no rvalue references. Perfect forwarding is a complex nop.





紅樓鍮  September 17, 2020


  0  Collapse this comment
Copy link
Unforwarded args also appears in delegate-related code where the args may be heavy objects.





Raymond Chen Author
September 17, 2020


  0  Collapse this comment
Copy link
That’s on purpose. In the Windows Runtime, the delegate receiver always gets a copy of the parameters.



紅樓鍮  September 17, 2020


  0  Collapse this comment
Copy link
Whenever I hear “functor” I always think of Functors in Haskell.  I think “functor”s in C++ are officially called Callables, which is the term I unconditionally use in any C++ settings.