Louis Wilson  May 31, 2023


  0  Collapse this comment
Copy link
Even this is insufficient in the face of non-type template parameters: consider something like
template <typename T, typename Alloc = ..., int AbiVersion = 1> class vector;
. I don’t believe there is a way to generically handle arbitrary combinations of type and non-type template parameters.





Bengt Gustafsson  June 2, 2023


  0  Collapse this comment
Copy link
This is one reason that we are pursuing Universal Template Parameters in P1985. Univeral template parameters match any template argument kind and with a pack of them you can match anything!




A A  May 30, 2023
· Edited

  0  Collapse this comment
Copy link
Why doesn’t the `Extra…` code work? I’ve written quite a lot of template / consteval code in the recent years, and I still don’t understand what’s the problem here.
Also, why is this error diagnosed during the first pass, before the template is even instantiated? That’s broken. It shouldn’t exist until instantiated, and compiler shouldn’t check it when it doesn’t exist.





紅樓鍮  May 30, 2023


  0  Collapse this comment
Copy link
However, this does not actually accept any vector specialization.
I think you meant “this does not actually accept all vector specializations”.





George Tokmaji  May 30, 2023
· Edited

  0  Collapse this comment
Copy link
Wouldn’t std::tuple_element_t<0, std::tuple<Args…>> also work to recover value_type? (and 1 for allocator_type)