Marcus Rahilly  April 27, 2022


  0  Collapse this comment
Copy link
Apologies as this is unrelated to this post but is related to https://devblogs.microsoft.com/oldnewthing/20210809-00/?p=105539
    MessageDialog msgdlg{ L”Choose a color”, L”Async example” };
    msgdlg.Commands().Append(UICommand{ L”Red”, nullptr, box_value(Colors::Red()) });
    IUICommand showTask = co_await msgdlg.ShowAsync(); // C2039 promise_type
I am getting a C2039 promise_type coroutine error when winrt/Windows.Foundation.h is included. Should I include some other implementation header?





Martin Bonner  April 15, 2022


  0  Collapse this comment
Copy link
In the final approach, isn’t there a race?  widgetOperation completes after just before the timeout, the wait_any returns – but by the time you check if the timeout has completed it has.  (I suppose this isn’t much of a problem, if means in a very rare condition you will think the operation timed out when it had succeeded )





紅樓鍮  April 15, 2022
· Edited

  0  Collapse this comment
Copy link
I wonder whether it would be more useful to have a when_any function that returns a low-overhead awaitable instead of an IAsyncOperation (you can always recover an IAsyncOperation by wrapping it inside a coroutine lambda or member function), and that await_resume()s a std::variant to indicate which input awaitable succeeded (which IAsyncOperation can’t do).