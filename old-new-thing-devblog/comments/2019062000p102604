Stuart Dootson  June 20, 2019


  0  Collapse this comment
Copy link
How about using the fact that std::visit will extract values from multiple variant parameters:
bool are_equivalent(my_variant const& l, my_variant const& r){   return (l.index() == r.index()) &&      std::visit([&](auto const& l, auto const& r) { return are_equivalent(l, r); },                    l, r);}
I think that does what you're wanting (obligatory Godbolt link...)
Read moreHow about using the fact that std::visit will extract values from multiple variant parameters:
bool are_equivalent(my_variant const& l, my_variant const& r){   return (l.index() == r.index()) &&      std::visit([&](auto const& l, auto const& r) { return are_equivalent(l, r); },                    l, r);}
I think that does what you’re wanting (obligatory Godbolt link…)
Read less







Pierre Baillargeon  June 20, 2019


  0  Collapse this comment
Copy link
I feel like there could be solution involving template using integer values instead of types, but I'd need to fire up a compiler to find the proper incantation. That would allow supporting variants with repeated types. It would basically encode the first solution but converting the switch to a recursive template? I'm pretty sure there is a templated way to get the number of types in a variant to begin the chain. I think the...Read moreI feel like there could be solution involving template using integer values instead of types, but I’d need to fire up a compiler to find the proper incantation. That would allow supporting variants with repeated types. It would basically encode the first solution but converting the switch to a recursive template? I’m pretty sure there is a templated way to get the number of types in a variant to begin the chain. I think the code would be slower though as it would amount to a series of comparison instead of the potentially faster switch.
Read less







sballard@netreach.com  June 20, 2019


  0  Collapse this comment
Copy link
Welp, I've got truly nerd-sniped by this - I don't even really know C++, but I can't resist giving it a try. Hopefully the blog software doesn't screw with the formatting TOO much... template<int N, typename... Args>bool are_equiv_helper( const std::variant<Args...>& left, const std::variant<Args...>& right){ if (left.index() == N - 1) return are_equivalent(std::get<N - 1>(left), std::get<N - 1>(right)); else return are_equiv_helper<N - 1, Args...>(left, right);}// Specialize to end the recursiontemplate<typename... Args>bool are_equiv_helper<0, Args...>( const std::variant<Args...>& left,...Read moreWelp, I’ve got truly nerd-sniped by this – I don’t even really know C++, but I can’t resist giving it a try. Hopefully the blog software doesn’t screw with the formatting TOO much… template<int N, typename… Args>bool are_equiv_helper( const std::variant<Args…>& left, const std::variant<Args…>& right){ if (left.index() == N – 1) return are_equivalent(std::get<N – 1>(left), std::get<N – 1>(right)); else return are_equiv_helper<N – 1, Args…>(left, right);}// Specialize to end the recursiontemplate<typename… Args>bool are_equiv_helper<0, Args…>( const std::variant<Args…>& left, const std::variant<Args…>& right){ return false;}template<typename… Args>bool are_equivalent( const std::variant<Args…>& left, const std::variant<Args…>& right){ if (left.index() != right.index()) return false; return are_equiv_helper<std::variant_size<std::variant<Args…>>::value, Args…>(left, right);}
Aaand since it did mess up the formatting, maybe this will help
Read less