Yanfang Liu  June 10, 2022


  0  Collapse this comment
Copy link
I have a WIFIDirect question. But I don't know where to ask. Can I ask here?
I am building a WIFIDirect APP with WinRT in C++. I can start an Auto GO(not legacy softAP mode) without problem and I can see the SSID by doing WIFI Scan with my phone. I want send this Auto GO's SSID to another device through BT or BLE(not just by eyes), but I can't find an API to query...Read moreI have a WIFIDirect question. But I donâ€™t know where to ask. Can I ask here?
I am building a WIFIDirect APP with WinRT in C++. I can start an Auto GO(not legacy softAP mode) without problem and I can see the SSID by doing WIFI Scan with my phone. I want send this Auto GOâ€™s SSID to another device through BT or BLE(not just by eyes), but I canâ€™t find an API to query this local Auto GOâ€™s SSID. I wonder if this API is exist in WRT or not. If yes, what it is. If not, is there any plan MS will provide it?
Read less







pete.d  June 9, 2022


  0  Collapse this comment
Copy link
I get that the clipboard API is old, but damn these are some creaky, unsatisfying workarounds.
I wonder if it ever occurred to Microsoft to update the clipboard API so that it had some actual, reliable, event-driven mechanism for dealing with the deferred-rendering scenario.





MGetz  June 10, 2022


  0  Collapse this comment
Copy link
Realistically you have two options:
Generally speaking (1) is the preferred outcome ðŸ˜… in my experience. The WinRT wrappers aren't bad and deal with most of the 'event driven' for you (it provides a Clipboard.ContentChanged event, not linking the docs as that requires Raymond's direct approval).
Read moreRealistically you have two options:

Keep backwards compat and wrap the existing API (what WinRT does and this is the API Iâ€™ve been using going forwards)
Break all the things and ensure nobody uses it except in rare cases

Generally speaking (1) is the preferred outcome ðŸ˜… in my experience. The WinRT wrappers arenâ€™t bad and deal with most of the â€˜event drivenâ€™ for you (it provides a Clipboard.ContentChanged event, not linking the docs as that requires Raymondâ€™s direct approval).
Read less







Rutger Ellen  June 9, 2022


  0  Collapse this comment
Copy link
Well having a format take 30+ seconds to render would make your end user wait 30+ seconds after pressing paste. Not sure how an event driven API would fix that. Show a progress bar? Most people expect a paste to be instantaneous. I hope Raymond will take the 30 seconds out of the equation tomorrow





pete.d  June 13, 2022


  0  Collapse this comment
Copy link
Asynchronous event-driven APIs are a thing. Indeed, Microsoft has been pushing hard with the whole async thing, especially on WinRT/UWP/etc.
Some will complain about it being a whole new API that doesn't get used as much as the old one. But when an API is broken enough, that kind of complaint is weak. There are numbers of examples, even in Windows, where a new API has supplanted and older API that was deprecated, and where the...Read moreAsynchronous event-driven APIs are a thing. Indeed, Microsoft has been pushing hard with the whole async thing, especially on WinRT/UWP/etc.
Some will complain about it being a whole new API that doesnâ€™t get used as much as the old one. But when an API is broken enough, that kind of complaint is weak. There are numbers of examples, even in Windows, where a new API has supplanted and older API that was deprecated, and where the new API has been adopted widely enough to be worthwhile.
In this particular example, it should be a given that other Microsoft products, like Excel, would adopt the new API. Then if youâ€™re one of the consumers of the API that wants a better experience, you have that option.
I will grant that in this scenario (as Raymond notes later), itâ€™s even better to avoid the clipboard altogether. But the fact is that doing so doesnâ€™t really circumvent the underlying issue, that moving large amounts of data takes a long time. COM interop (the suggested improvement over the clipboard approach) still tends to be single-threaded and will still cause both processes to appear to lock up until itâ€™s done. Itâ€™s a significant amount of work to avoid that.
The real problem in this example is the use of Excel as a database or other repository of a huge amount of data. Of course, in the real world this is something that happens. But itâ€™s already the wrong thing to do, so nitpicking about other relatively minor details that could also be considered the wrong thing to do (like using the clipboard to move large amounts of data) misses the point. If users arenâ€™t supposed to move large amounts of data with the clipboard, then attempting to do so should provide the user with more direct feedback than just having a copy/paste operation mysteriously fail.
Read less






Jonathan Wilson  June 9, 2022


  0  Collapse this comment
Copy link
Guessing backwards compatibility concerns make doing too much with the clipboard APIs difficult.