Adam Jensen  April 9, 2022
· Edited

  0  Collapse this comment
Copy link
Are compilers allowed to deduce noexcept’ness of a function? Are they actually doing it?





Kevin Norris  April 10, 2022


  0  Collapse this comment
Copy link
Sort of, maybe, if you squint a lot?
Under the as-if rule, the compiler may perform any optimization that does not change the program's observable behavior. If the compiler can prove that a function never throws, then the compiler can make all of the optimizations which would otherwise be permitted by noexcept(true). This does not allow the compiler to change the return value of the noexcept operator, which is only allowed to tell you whether the...Read moreSort of, maybe, if you squint a lot?
Under the as-if rule, the compiler may perform any optimization that does not change the program’s observable behavior. If the compiler can prove that a function never throws, then the compiler can make all of the optimizations which would otherwise be permitted by noexcept(true). This does not allow the compiler to change the return value of the noexcept operator, which is only allowed to tell you whether the function is declared noexcept (or falls into a handful of cases where noexcept(true) is implied). However, the compiler is allowed to look at your implementation, see that you are calling the XYZ function (which is not declared noexcept), and then propagate any deductions it may have made about XYZ to your function, if it is so inclined.
Any heap allocation can throw std::bad_alloc, so in practice, the opportunities for this sort of thing should be fairly limited. I don’t know if any compiler bothers with it, especially since non-allocating functions tend to be relatively straightforward and easy for humans to hand-annotate.
Read less







紅樓鍮  April 10, 2022
· Edited

  0  Collapse this comment
Copy link
Lambda expressions, if I remember correctly, have deduced noexceptness by default.  Certain Boost or Boost-style libraries (e. g. Boost.Hana) use global lambdas pervasively in lieu of plain old functions.  If you also adopt this lambda-first coding style, you may be able to reduce the need for noexcept(noexcept(...)) as well (but probably not a lot unless your code is also template-heavy).




Adam Rowell  April 8, 2022
· Edited

  0  Collapse this comment
Copy link
Very similarly you have the “Repeat yourself thrice” idiom when wrapping a function call:
template <typename... Args>
auto wrap_call(Args&&... args) 
 -> decltype(call(std::forward<Args...>(args)...))
noexcept(noexcept(call(std::forward<Args...>(args)...)))
{
    return call(std::forward<Args...>(args)...);
}





anonymous  April 8, 2022
· Edited

  0  Collapse this comment
Copy link
this comment has been deleted.