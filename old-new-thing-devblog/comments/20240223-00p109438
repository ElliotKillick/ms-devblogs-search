Joe Beans  February 24, 2024
· Edited

  0  Collapse this comment
Copy link
I learned that in order to keep my limited-lifespan UI thread dispatchers running long enough, I have to ref-count them.
For each such thread in C# I have a [ThreadStatic] Task that's connected to a countdown, it "signals" when the count is zero. I have a static helper method that returns an opaque IDisposable. When it's called, it increments the count, and when the handle is disposed, it decrements the count. When I decide to terminate...Read moreI learned that in order to keep my limited-lifespan UI thread dispatchers running long enough, I have to ref-count them.
For each such thread in C# I have a [ThreadStatic] Task that’s connected to a countdown, it “signals” when the count is zero. I have a static helper method that returns an opaque IDisposable. When it’s called, it increments the count, and when the handle is disposed, it decrements the count. When I decide to terminate the thread I post a custom work item which awaits on that Task in the message loop for the count to be zero before exiting and terminating the dispatcher.
So each async call from the UI thread:
await DoSomethingAsync();
Becomes:
using (KeepCurrentThreadAlive())
{
    await DoSomethingAsync();
}
Read less







Neil Rashbrook  February 24, 2024


  1  Collapse this comment
Copy link
Wouldn’t it be easier to make the call fail to shut down the current thread? I would have thought that the resulting exception would make it blindingly obvious that you’re trying to do something that’s not going to work.





pete.d  February 23, 2024
· Edited

  0  Collapse this comment
Copy link
You can also, instead of explicitly moving the call to shut down to a background thread, just call
ConfigureAwait(false)
 on the task returned by the call. This will disconnect the task from its synchronization context and allow the continuation to be handled elsewhere.





Raymond Chen Author
February 23, 2024


  0  Collapse this comment
Copy link
This does configure the task to resume on any thread, but that’s not good enough. Because the thread that it chooses might be the dying thread! (And in fact, the way the ShutdownQueueAsync method is implemented, it will always choose the dying thread.) After the ConfigureAwait(false), you also have to do an explicit switch to get off the dying thread.