Werner Henze  May 9, 2022
· Edited

  0  Collapse this comment
Copy link
Regarding Exercise 2: the lambdas in cleanup will take references to first and second. Then winrt::when_any(std::forward(first), std::forward(rest)…) might move from first and second. So when the lambdas are run in the constructor they are accessing the moved from first and second. That sounds dangerous. The C++ standard does not guarantee that to work. Whether that works depends on the classes used.





Neil Rashbrook  May 7, 2022


  0  Collapse this comment
Copy link
My guess for exercise 1 is that auto won’t work properly for some reason.





紅樓鍮  May 6, 2022
· Edited

  0  Collapse this comment
Copy link
Answer to Exercise 2: It would've been OK if  didn't take its parameters by reference.
Bonus Chatter: Obviously, the intention is that  will only ever be called from inside another coroutine, which would have, according to the guidelines, accepted all its parameters by value to avoid any cross-suspension point lifetime issues.  But aren't most non--returning coroutines also supposed to work that way — immediately awaited inside a coroutine?
If anyone is calling an -returning...Read moreAnswer to Exercise 2: It would’ve been OK if when_any didn’t take its parameters by reference.
Bonus Chatter: Obviously, the intention is that when_any will only ever be called from inside another coroutine, which would have, according to the guidelines, accepted all its parameters by value to avoid any cross-suspension point lifetime issues.  But aren’t most non-fire_and_forget-returning coroutines also supposed to work that way — immediately awaited inside a coroutine?
If anyone is calling an IAsync*-returning function outside of a coroutine, then they’re most probably using the Completed() method to supply an explicit continuation, which I think is niche enough a use case to justify offloading all obligations of lifetime auditing to.
Read less