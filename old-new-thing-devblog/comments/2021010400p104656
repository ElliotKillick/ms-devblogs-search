Robin Krom  January 11, 2021


  0  Collapse this comment
Copy link
For those who need something like this in .NET / C#, I wrote some "modern" abstractions for doing low level Win32 things in my open source project here: https://github.com/dapplo/Dapplo.Windows
This has some most of the low level code implemented for you and is using reactive extensions, making this a bit more functional.
For example, tracking the location could be done like this:
<code>
If you are done, dispose the observable and the registration is removed for you.
Create...Read moreFor those who need something like this in .NET / C#, I wrote some “modern” abstractions for doing low level Win32 things in my open source project here: https://github.com/dapplo/Dapplo.Windows
This has some most of the low level code implemented for you and is using reactive extensions, making this a bit more functional.
For example, tracking the location could be done like this:

            // Register the events
            var winEventObservable = WinEventHook.Create(WinEvents.EVENT_OBJECT_LOCATIONCHANGE)
                // As there is minimal information coming from the observable, we like to get details on the window
                .Select(info => InteropWindowFactory.CreateFor(info.Handle).Fill())
                // Only process those where the caption (title) is set
                .Where(interopWindow => !string.IsNullOrEmpty(interopWindow?.Caption))
                // Do something with the information
                .Subscribe(interopWindow =>
                {
                    // Check if the window has any information
                    if (interopWindow.Info.HasValue)
                    {
                        Debug.WriteLine($"Window title change: handle {interopWindow.Handle} - Title: {interopWindow.Caption} moved to: {interopWindow.Info.Value.Bounds}");
                    }
                });

If you are done, dispose the observable and the registration is removed for you.
Create a ticket on github if there are any questions.
P.S.
Registering to WinEventProc only works if you have a message pump, for console applications this doesn’t work.
If you need to have it in a console application, there is also a fairly simple solution for that…
Read less







switchdesktopwithfade@hotmail.com  January 6, 2021


  0  Collapse this comment
Copy link
I integrated this with my thumbnail code and now it updates great. Thanks!





Peter Cooper Jr.  January 4, 2021


  0  Collapse this comment
Copy link
At the risk of being completely off topic, did 2020 not have an end-of-year link clearance post? It’s something I look forward to each year and I’d hate to see it go. Thanks!





Raymond Chen Author
January 4, 2021


  0  Collapse this comment
Copy link
I forgot to save links in 2020, so I had nothing to clear out. It was that kind of year.





Peter Cooper Jr.  January 4, 2021


  0  Collapse this comment
Copy link
Fair enough! Thanks.



紅樓鍮  January 4, 2021


  0  Collapse this comment
Copy link
Is there a list of all the macros that I should define before including Windows.h?  I knew  UNICODE, WIN32_LEAN_AND_MEAN and NOMINMAX, but was not aware of STRICT.





skSdnW  January 4, 2021


  0  Collapse this comment
Copy link
STRICT is on by default these days (not sure when that changed). You now use NO_STRICT if you don’t want STRICT. See https://docs.microsoft.com/en-us/windows/win32/winprog/disabling-strict





Ivan K  January 4, 2021


  0  Collapse this comment
Copy link
I was reminded of a fact about C, HANDLE, and STRICT over the holidays: there is no STRICT "struct typedef" for straight HANDLEs (probably for a reason I can't spend time to think of right now). I wrote a little personal utility DLL that's about 80% Win32 calls and so decided to use straight C in MSVC 2019 out of dice roll or nostalgia or whatever. I defined STRICT before winapi includes and enabled level...Read moreI was reminded of a fact about C, HANDLE, and STRICT over the holidays: there is no STRICT “struct typedef” for straight HANDLEs (probably for a reason I can’t spend time to think of right now). I wrote a little personal utility DLL that’s about 80% Win32 calls and so decided to use straight C in MSVC 2019 out of dice roll or nostalgia or whatever. I defined STRICT before winapi includes and enabled level all the warnings and code analysis rules. Even with that there are no warnings in C (any of the language standard settings) if you do, for example:
BOOL ret = DeviceIoControl(/* _In_ HANDLE */ "Hello, World!", IOCTL_whatever, blah...);
C++ would of course complain.
Read less