Bruce Davidson  September 15, 2023


  1  Collapse this comment
Copy link
I haven’t used an uninstaller program in years. Probably not since I stopped using Windows. Seems like poor OS design is the cause of this.





Marek Knápek  September 13, 2023


  0  Collapse this comment
Copy link
I was thinking about such uninstaller recently. And came up with an idea: Uninstaller is a DLL, because running EXE cannot be deleted. That DLL gets loaded by rundll.exe. When invoked it allocates executable memory and copies (part of) itself over there. Possibly also allocates and copies both read-only and read-write sections of itself. Does pointer relocation fixups, jumps to the new code. Now the new code can unload the old self (the DLL to...Read moreI was thinking about such uninstaller recently. And came up with an idea: Uninstaller is a DLL, because running EXE cannot be deleted. That DLL gets loaded by rundll.exe. When invoked it allocates executable memory and copies (part of) itself over there. Possibly also allocates and copies both read-only and read-write sections of itself. Does pointer relocation fixups, jumps to the new code. Now the new code can unload the old self (the DLL to be deleted), delete itself from disk and finally exit the rundll.exe process. This is maybe too much overcomplicated, but I cannot see any reason why this could not work. I didn’t implement this, yet.
Read less







Raymond Chen Author
September 14, 2023


  0  Collapse this comment
Copy link
And then when there’s a problem with the code, there will be a spike of crashes in rundll.exe, and I will have to investigate them and come to the conclusion that they are coming from another “sufficiently advanced uninstaller”.





Joshua Hudson  September 14, 2023


  1  Collapse this comment
Copy link
I actually did this. The 32 bit version builds a ROP chain and uses a single ASM instruction to enter it. All code frames are inside kernel32.dll (now kernelbase.dll) This works because in 32 bit, all arguments are on the stack so I can just return into the entry point of the next function.
The 64 bit version however can't do that, so the asm code is allocated with VirtualAlloc and looks like this:
```
 ...Read moreI actually did this. The 32 bit version builds a ROP chain and uses a single ASM instruction to enter it. All code frames are inside kernel32.dll (now kernelbase.dll) This works because in 32 bit, all arguments are on the stack so I can just return into the entry point of the next function.
The 64 bit version however can’t do that, so the asm code is allocated with VirtualAlloc and looks like this:
“`
   push rbp
   mov rbp, rsp
   sub rsp, 32
   mov rbi, rcx
.x mov rax, [rbx]
   mov rcx, [rbx + 8]
   call rax
   add rbx, 16
   jmp short .x
“`
The problem is there’s no way to register this function for dynamic execution because the unwind is not encodable in the tables at all. (It looks like you could encode correct the stack, pop rbp, and return but you can’t because the after the fist call instruction the next stack frame is *gone*.) SInce crash the process is the right thing to do if there’s any exception thrown from `FreeLibrary`, `DeleteFile`, `RemoveDirctory`, or `ExitProcess`, it doesn’t actually matter.
As the guy said above, RemoveSelf() would have been a decent API; however I don’t _quite_ favor that route. Better would be to add IMAGE_FILE_RUN_FROM_SWAP to go with IMAGE_FILE_NET_RUN_FROM_SWAP that means always copy this binary to swap and run from there; *never* keep a lock on this binary while it’s running.
Note that the wscript version doesn’t work reliably because wscript might not be there, or the code may be running from the service desktop or something more exotic.
Read less





Youfu Zhang  September 13, 2023


  1  Collapse this comment
Copy link
I don’t like the idea of invoking wscript from uninstaller. Windows Script Host may be disabled on some hardened PC.
Under HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows Script Host\Settings, create a new DWORD value named “Enabled” and set the value data to “0”.
A pop up will show that “Windows Script Host access is disabled on this computer. Contact your administrator for details.”





Dan Bugglin  September 13, 2023
· Edited

  0  Collapse this comment
Copy link
If a jscript dependency is somehow a concern, you can fairly easily rewrite the script in batch. Then all you need is cmd.exe which everyone has.
A bit of IF EXISTS, a bit of DEL, a GOTO loop and label, and finally run cmd.exe with no window to keep things nice and tidy.
The only bit that could be trouble is there's no built in delay function. But it's fairly easy to find a command that implements...Read moreIf a jscript dependency is somehow a concern, you can fairly easily rewrite the script in batch. Then all you need is cmd.exe which everyone has.
A bit of IF EXISTS, a bit of DEL, a GOTO loop and label, and finally run cmd.exe with no window to keep things nice and tidy.
The only bit that could be trouble is there’s no built in delay function. But it’s fairly easy to find a command that implements a delay itself and abuse the hell out of it for our own purposes.
ping.exe will work just fine. You just need to craft a command you know will always fail via timeout, and do a single ping with your desired delay as the timeout.
Turns out localhost subnet’s multicast IP address works fine for this. Multicast addresses are reserved and can’t actually point to a single device. And apparently ICMP doesn’t multicast, I guess.
ping -n 1 -w [delay in milliseconds] 127.255.255.255
Another completely unrelated approach is to use MoveFileEx with no new file name and MOVEFILE_DELAY_UNTIL_REBOOT flag, to indicate the file should be deleted next boot (If you’re patient.)
Read less







Chris Iverson  September 13, 2023


  0  Collapse this comment
Copy link
“The only bit that could be trouble is there’s no built in delay function.”
No built-in delay function? Does the TIMEOUT command not work, for some reason?




Shawn Van Ness  September 12, 2023


  0  Collapse this comment
Copy link
Is there really no registry key or API to call, to have Windows cleanup the last bits, after custom uninstall process completes?  I suppose I always assumed there was..  but I’ve never implemented an uninstaller, obvs.





Dan Bugglin  September 13, 2023
· Edited

  0  Collapse this comment
Copy link
MoveFileEx can, but it defers to next boot though. This is mostly useful for removing or replacing files that are in use at the time you’re trying to remove/replace them . Many installers or uninstallers use it for that purpose (any installer that asks you to reboot usually does so because it has done this, especially if you find the app in question does not work until you actually reboot).




Marcus André  September 12, 2023


  0  Collapse this comment
Copy link
Insane way for simple tasks, lol. Usually in my case I just call the cmd with an safe timeout to delete the remaining files and never got trouble.





Richard Deeming  September 12, 2023


  1  Collapse this comment
Copy link
Who needs JavaScript when you can have a self-deleting batch file? 🙂
https://stackoverflow.com/a/20333575/124386
(goto) 2>nul & del "%~f0"





Georg Rottensteiner  September 11, 2023
· Edited

  0  Collapse this comment
Copy link
Noone?
I’ve always used the age old method of the self deleting batch file to finally remove the uninstaller and then itself.
Write a batch file to the temp folder, do your work and as last line a del on itself, without(!) line break.
Voilá, everything gone, as intended.
Works a treat since Win 3.x.





skSdnW  September 15, 2023


  0  Collapse this comment
Copy link
Batch files can be disabled by Group Policy.




Brian Friesen  September 11, 2023


  0  Collapse this comment
Copy link
Could a process mark itself for deletion using SetFileInformationByHandle() with FileDispositionInfo?  I have not tried this, but if it worked when the last handle for the process was closed the system would delete the file.  The same as if the file were created/opened with FILE_DELETE_ON_CLOSE.  I don't think this requires special permissions either, as long as you could delete the file if it wasn't busy then you should be able to mark...Read moreCould a process mark itself for deletion using SetFileInformationByHandle() with FileDispositionInfo?  I have not tried this, but if it worked when the last handle for the process was closed the system would delete the file.  The same as if the file were created/opened with FILE_DELETE_ON_CLOSE.  I don’t think this requires special permissions either, as long as you could delete the file if it wasn’t busy then you should be able to mark it for deletion on close when it is busy.
Read less







skSdnW  September 11, 2023


  0  Collapse this comment
Copy link
If FileDispositionInfo or FILE_DELETE_ON_CLOSE worked on a running exe file then neither this blog post nor the injection code would exist in the first place.
CreateProcess does not open the file with FILE_SHARE_DELETE to stop you from doing this in the name of compatibility (with DOS?, Windows 3.x?).





LB  September 11, 2023


  0  Collapse this comment
Copy link
You can create an executable file with the flag set to delete it on close, and then before closing the last handle to it, you can execute it. Then you can exit your own process, and that executable you created will be deleted once it exits too since that will close the last handle.



Michael Taylor  September 11, 2023


  0  Collapse this comment
Copy link
In my experience most IT groups block VBS on machines because of security issues.
Personally I always found it easier to just start a new batch script (or perhaps PS these days) that polled the desired file into it could be deleted. But that is only for cases where I needed the file deleted ASAP.
I think the preferred approach is to use `PendingFileRenameOperations` to schedule the file for removal on restart. If the user opts to...Read moreIn my experience most IT groups block VBS on machines because of security issues.
Personally I always found it easier to just start a new batch script (or perhaps PS these days) that polled the desired file into it could be deleted. But that is only for cases where I needed the file deleted ASAP.
I think the preferred approach is to use `PendingFileRenameOperations` to schedule the file for removal on restart. If the user opts to remove the file before a reboot then that is up to them but it will eventually get cleaned up and works as the system was intending. It is also not reliant on script settings.
Read less







skSdnW  September 11, 2023


  1  Collapse this comment
Copy link
PendingFileRenameOperations (MoveFileEx) only works for administrators since it needs to write to HKLM, not usable for things installed in FOLDERID_UserProgramFiles.





Michael Taylor  September 11, 2023


  0  Collapse this comment
Copy link
As does most other approaches that need to clean up files. Since there was no contextual information about user privileges the solution I used to use (pre per-user installs) is sufficient. Note that in modern IT systems you also cannot run scripts of any sort without being an admin (and even then) and JS doesn't work outside the sandbox unless you have Java installed (which, again most computers won't for security reasons). So the solution...Read moreAs does most other approaches that need to clean up files. Since there was no contextual information about user privileges the solution I used to use (pre per-user installs) is sufficient. Note that in modern IT systems you also cannot run scripts of any sort without being an admin (and even then) and JS doesn’t work outside the sandbox unless you have Java installed (which, again most computers won’t for security reasons). So the solution you are recommending doesn’t work for a normal user either.
Read less







Raymond Chen Author
September 11, 2023


  3  Collapse this comment
Copy link
Not sure what you mean by “JS doesn’t work outside the sandbox unless you have Java installed.” The wscript program happily runs JS outside any sandbox. Go ahead and create a FileSystemObject like the one in the article. (And Java is completely unrelated to Javascript.)