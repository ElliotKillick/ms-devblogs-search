Yuri Khan  August 2, 2023


  0  Collapse this comment
Copy link
Are there any constraints that preclude vector implementations storing begin, size and capacity, and calculating end() as begin + size?





Raymond Chen Author
August 2, 2023


  0  Collapse this comment
Copy link
An implementation is welcome to store those three pieces of information in any way it likes, as long as it can eventually produce that information when necessary. The point is that the standard requires a contiguous block of memory, with the initial portion used and the trailing portion unused.





Michael Taylor  August 2, 2023
· Edited

  0  Collapse this comment
Copy link
From a performance POV I think that would be a step backwards. When iterating the elements you start at first and then continue until `first == last`. When adding an element you first determine if `last == end`. Simple pointer comparison. If you stored the count instead then iteration may behave the same (depends I think) but adding an element would require `last == (first + size)`. I would suspect that `size` is rarely needed,...Read moreFrom a performance POV I think that would be a step backwards. When iterating the elements you start at first and then continue until `first == last`. When adding an element you first determine if `last == end`. Simple pointer comparison. If you stored the count instead then iteration may behave the same (depends I think) but adding an element would require `last == (first + size)`. I would suspect that `size` is rarely needed, such as when needing to resize, and probably almost never outside the type itself. But I’m just guessing here as it’s been years so I’ve had to implement vectors in languages that didn’t support them.
Also, just guessing here again, `size` would need to be a 64-bit integral to allow arbitrarily large arrays. On x86 that isn’t an issue and would waste 4 bytes per vector. Pointers are more efficient and allow arbitrary sizing.
Read less







Yuri Khan  August 2, 2023
· Edited

  0  Collapse this comment
Copy link
I’d expect a Sufficiently Smart Compiler™ to hoist the end() calculation out of the loop.
Comparing last == end to determine if you need a reallocation could be equivalently replaced with size == capacity.
Sizes have to be the same bitness as pointers anyway, because std::vector<char>::size() has to work. first/last/end takes 3 * sizeof(T*) = 24 bytes (on a 64-bit platform); begin/size/capacity takes sizeof(T*) + 2 * sizeof(size_t) = also 24 bytes. (Although at least once I’ve...Read moreI’d expect a Sufficiently Smart Compiler™ to hoist the end() calculation out of the loop.
Comparing last == end to determine if you need a reallocation could be equivalently replaced with size == capacity.
Sizes have to be the same bitness as pointers anyway, because std::vector<char>::size() has to work. first/last/end takes 3 * sizeof(T*) = 24 bytes (on a 64-bit platform); begin/size/capacity takes sizeof(T*) + 2 * sizeof(size_t) = also 24 bytes. (Although at least once I’ve wanted (but not really felt like implementing) a vector-like container that is represented with a 64-bit begin and 32-bit size/capacity, so that I could save 8 bytes per vector at the expense of not being able to have huge element counts.)
Read less







Alexander Shalimov  August 3, 2023


  0  Collapse this comment
Copy link
“I’d expect a Sufficiently Smart Compiler™ to hoist the end() calculation out of the loop” — I don’t think this is possible for non-const iterators, because you can call erase() inside the loop which changes end().





Jan Ringoš  August 2, 2023


  0  Collapse this comment
Copy link
I’d argue the opposite: If item size isn’t power of 2, then doing `(last – first)` requires DIV instruction. While getting `last` from `first + size` needs MUL which is usually way faster. Then again, one DIV is surely faster than many MULs, and I don’t have any profiling numbers from any real world software on this.