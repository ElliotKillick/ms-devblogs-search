Paulo Pinto  March 9, 2023


  0  Collapse this comment
Copy link
It is interesting that WRL keeps being used by plenty of developers, despite of its deprecation, most likely because C++/WinRT hardly adds any value to the Visual Studio developer experience.





George Tokmaji  March 10, 2023
· Edited

  0  Collapse this comment
Copy link
It's classic COM, WRL is just as good an option as C++/WinRT is (or _com_ptr, if you're willing to deal with some of its gotchas). C++/WinRT gives you more helpers to make life easier - I consider <code> + exception handling to be more readable than <code> - but that doesn't make it a game changer.
On the other hand, try consuming Windows Runtime classes with WRL... (And if you already might be using the Windows...Read moreIt’s classic COM, WRL is just as good an option as C++/WinRT is (or _com_ptr, if you’re willing to deal with some of its gotchas). C++/WinRT gives you more helpers to make life easier – I consider
winrt::capture(&SHCreateItemFromParsingName, L"http://msn.com/", nullptr);
 + exception handling to be more readable than
Microsoft::WRL::ComPtr item;
THROW_EXCEPTION_IF_FAILED(SHCreateItemFromParsingName(L"http://msn.com/", nullptr, IID_PPV_ARGS(&item)));
 – but that doesn’t make it a game changer.
On the other hand, try consuming Windows Runtime classes with WRL… (And if you already might be using the Windows Runtime, why not use C++/WinRT in the frist place instead of WRL and C++/WinRT?)
Read less







Me Gusta  March 10, 2023


  0  Collapse this comment
Copy link
Is WRL deprecated? I know that it was superseded by C++/WinRT, but I don’t remember seeing any mention of it being deprecated.
Isn’t it also only superseded on the Windows Runtime side of things? Since the interfaces used in this post are classic COM interfaces then WRL is just as good an option.





Paulo Pinto  March 11, 2023


  0  Collapse this comment
Copy link
It is, check its documentation, it is quite hard to miss the big pink square,
https://learn.microsoft.com/en-us/cpp/cppcx/wrl/windows-runtime-cpp-template-library-wrl?view=msvc-170
While it says superseded, and not deprecated, it is really the same, as it is clear where development budget is being spent.
However since, having the one true library was never a WinDev in regards to COM, not only you can use MFC, ATL, WRL, C++/CX, C++/WinRT, there is WIL as well,
https://github.com/microsoft/wil
With exception of MFC, they all share one common thread, bad...Read moreIt is, check its documentation, it is quite hard to miss the big pink square,
https://learn.microsoft.com/en-us/cpp/cppcx/wrl/windows-runtime-cpp-template-library-wrl?view=msvc-170
While it says superseded, and not deprecated, it is really the same, as it is clear where development budget is being spent.
However since, having the one true library was never a WinDev in regards to COM, not only you can use MFC, ATL, WRL, C++/CX, C++/WinRT, there is WIL as well,
https://github.com/microsoft/wil
With exception of MFC, they all share one common thread, bad developer experience for COM authoring and lack of Visual Studio tooling for IDL files, maybe that is where budget could be spent, instead of replacing C++ frameworks for COM every couple of years.
Read less







Me Gusta  March 12, 2023


  3  Collapse this comment
Copy link
Then no, you are incorrect on this matter.
Supersede and deprecate have completely different meanings. That big pink box states that it has been superseded and then provides reasons for why C++/WinRT should be used. It does not provide any kind of disapproval of WRL though. There is a big difference between "you shouldn't use this" and "you would find using that to be a much better experience". When Microsoft deprecate things, they don't just...Read moreThen no, you are incorrect on this matter.
Supersede and deprecate have completely different meanings. That big pink box states that it has been superseded and then provides reasons for why C++/WinRT should be used. It does not provide any kind of disapproval of WRL though. There is a big difference between “you shouldn’t use this” and “you would find using that to be a much better experience”. When Microsoft deprecate things, they don’t just have it in the documentation in one little pink box that states Note, they make it really obvious. For example:
NOT_BUILD_WINDOWS_DEPRECATE BOOL GetVersionExA(
  [in, out] LPOSVERSIONINFOA lpVersionInformation
);
Advocating for better development tooling is one thing. Using this post in the way you did was completely off of the mark.
Read less