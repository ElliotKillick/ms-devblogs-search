word merchant  August 15, 2020


  0  Collapse this comment
Copy link
Of course this is one of the fantastic things about open source – smart people in the wider community can contribute improvements one way or the other.





‪ ‪  August 15, 2020


  0  Collapse this comment
Copy link
That’s not the developer shutdown I know.
https://docs.microsoft.com/windows/win32/shell/debugging-with-the-shell





Me Gusta  August 15, 2020


  0  Collapse this comment
Copy link
It is more or less the Vista one, but they probably had to move it due to the start changes in Windows 8+. Or it always worked on the task bar but nobody mentioned that.




Piotr Siódmak  August 14, 2020


  0  Collapse this comment
Copy link
I would expect a shell extension crash to cause a bluescreen. I think I read somewhere (old MSDN?) that they run on the kernel, but it was looong ago, so probably a mistake.
It would be interesting to see how you tracked that stack trace to Contoso. Did you have to instruct WER to gather more information? What kind of memory dump was it?





skSdnW  August 14, 2020


  0  Collapse this comment
Copy link
Why would you expect this? Explorer.exe is a usermode process. Besides, shell extensions will load in any application with a open/save dialog etc.





Piotr Siódmak  August 15, 2020


  0  Collapse this comment
Copy link
I think it was specifically about taskbar extensions and why they removed them after vista (if I remember correctly). Like the little mini windows media player control bar – I miss that one. The problem might have been related to the fact that people started loading multiple versions of .net into the shell (I vaguely recall discussions on how to use silverlight on the taskbar).




switchdesktopwithfade@hotmail.com  August 14, 2020


  0  Collapse this comment
Copy link
>I would expect a shell extension crash to cause a bluescreen.
Sounds like a myth being spread in the Linux community.





Joshua Hudson  August 17, 2020


  0  Collapse this comment
Copy link
It was real, in Windows 98. Certain failure modes would trash the 16 bit heap, and that’s all she wrote.



Sebastiaan Dammann  August 14, 2020


  0  Collapse this comment
Copy link
> Perform a developer shutdown of Explorer; Ctrl+Shift+RightClick, Exit Explorer.
That is a nice trick! You should do a blog post with a few of these 😀





Simon Clarkstone  August 17, 2020


  0  Collapse this comment
Copy link
Ctrl+Shift+Right click where?
I found an article https://docs.microsoft.com/en-gb/windows/win32/shell/debugging-with-the-shell that claims it should be on the right side of the start menu, but that doesn’t make a menu pop up, so I don’t know where you and Raymond are right-clicking.





Alex Martin  August 17, 2020


  0  Collapse this comment
Copy link
On the taskbar, apparently. I just tested it on Windows 10 1909.



Alex Martin  August 14, 2020


  0  Collapse this comment
Copy link
It’s slightly odd to be using the Contoso name when you did, in fact, identify the product in question.





Joshua Hudson  August 14, 2020


  0  Collapse this comment
Copy link
It’s quite possible to blame this one on MS anyway, but explorer isn’t the problem at all. Here we have yet another case of an application jumping through hoops because it can’t delete a file that contains running code.
I know MS doesn’t want to use such functionality, but it makes so much extra work because it’s not there for those that do. And now you’ve had to pay a piece of it.





Kythyria Tieran  August 14, 2020


  0  Collapse this comment
Copy link
If you don't want to be admin or leave a watcher behind, just force the user to log out. Since it's not a reboot it's *clearly* not any kind of downtime. /s
The actual problem here is that the file *is* being "successfully" unloaded (and probably getting replaced on disk just fine). It's just leaving some dangling pointers behind. If you only replaced the file on disk you'd still have to either unload the original somehow...Read moreIf you don’t want to be admin or leave a watcher behind, just force the user to log out. Since it’s not a reboot it’s *clearly* not any kind of downtime. /s
The actual problem here is that the file *is* being “successfully” unloaded (and probably getting replaced on disk just fine). It’s just leaving some dangling pointers behind. If you only replaced the file on disk you’d still have to either unload the original somehow or make explorer restart without unloading the DLL.
Read less







Me Gusta  August 14, 2020


  0  Collapse this comment
Copy link
Do you know that at the very least you can move files that contain running code? Sure, this moves the problem from how to replace the file that is in use with how to delete the files after they unloaded, but at the very least this situation can be easily prevented anyway.





Joshua Hudson  August 14, 2020


  0  Collapse this comment
Copy link
> how to delete the files after they unloaded
Got a solution that doesn’t require admin rights and doesn’t require a process to be left running waiting for the file to become unlocked?





Me Gusta  August 14, 2020


  0  Collapse this comment
Copy link
In this case? Let the setup program deal with it after explorer was restarted. But I would also say that since this is dealing with explorer, you are going to be using a setup program with admin rights anyway so using MoveFile with delay until reboot is an option.
In general? The Windows task scheduler. The requirements for this is only as much as is needed to execute the command and access what you want...Read moreIn this case? Let the setup program deal with it after explorer was restarted. But I would also say that since this is dealing with explorer, you are going to be using a setup program with admin rights anyway so using MoveFile with delay until reboot is an option.
In general? The Windows task scheduler. The requirements for this is only as much as is needed to execute the command and access what you want to clean up.
Read less