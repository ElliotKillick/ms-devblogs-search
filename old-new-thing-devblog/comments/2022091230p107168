Márton Balassa  September 18, 2022


  0  Collapse this comment
Copy link
Isn’t an asynchronous locking pattern more natural for this? Eg. Nito.AsyncEx.





Stuart Ballard  September 12, 2022


  0  Collapse this comment
Copy link
Is there a reason to write
return QueueTaskAsync(() => StartWorkerAsync());
 as opposed to
return QueueTaskAsync(StartWorkerAsync);
? I would assume the first version adds an extra layer of indirection and overhead but behaves exactly the same as the second version, but I’m never quite sure if there’s some subtle behavioral difference that makes the latter preferable.





Toke N.  September 14, 2022


  0  Collapse this comment
Copy link
Actually, up until .NET 7 the latter is slower as well (as I understood it) – see: https://devblogs.microsoft.com/dotnet/performance_improvements_in_net_7/ and search for: M(i => Work(i))





Raymond Chen Author
September 14, 2022


  0  Collapse this comment
Copy link
I think the M(Work) transformation under discussion in that part of the article applies only to static methods, because instance methods cannot be cached. The next part of the article confirms this: The compiler internally optimizes disposeAction = () => disposable.Dispose(); to disposeAction = disposable.Dispose;.




Raymond Chen Author
September 12, 2022


  2  Collapse this comment
Copy link
Your simplification fails if StartWorkerAsync takes any parameters. The lambda works in the general case, which pre-empts follow-up questions from people trying to use it with functions that take parameters.