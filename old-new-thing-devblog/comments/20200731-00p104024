Jonathan Wilson  August 3, 2020


  0  Collapse this comment
Copy link
The question I have is why C++/WinRT needs to support being used without windows.h in the first place…
What’s the use case for that?





Raymond Chen Author
August 3, 2020


  0  Collapse this comment
Copy link
windows.h is a huge header file, and UWP apps can get a lot done using only the classes provided by the Windows Runtime. It also allows C++/WinRT to be compiled by a wider range of compilers, and it permits C++/WinRT to be more easily ported to other platforms.




紅樓鍮  August 3, 2020


  0  Collapse this comment
Copy link
How does C++/WinRT, being part of the compilation unit, issue a pragma for the linker if the linker may be invoked separately from the compiler?





Ivan K  August 3, 2020


  0  Collapse this comment
Copy link
Looking at the coff .obj format, there is a “.drectve” section that can contain linker directives (from pragmas or whatever)… or maybe rather “Lnker” directives, snce ‘s seem to be at a premum.
This WinRT library may only be headers, but there should still be object files created by project compilation.




Dzmitry Konanka  August 1, 2020


  0  Collapse this comment
Copy link
Hm, it seems it looks, sweems and quacks like GCC’s weak symbols + aliases. See:
void default_function ()
{
 .....
}
void weak_function () __attribute__ ((weak, alias ("default_function")));





word merchant  July 31, 2020


  0  Collapse this comment
Copy link
So, to summarise: one team in Microsoft has added a universal hack so that at least two other teams who surely could’ve settled all this up over beer and pizza now don’t have to talk to each other. If you scale this scenario up sufficiently, you can imagine the development process that lead to Teams.





Tim Weis  August 1, 2020


  0  Collapse this comment
Copy link
I’m curious, how would you have addressed the use-case of a header-only library, that needs to use symbols that may or may not be declared outside the library?