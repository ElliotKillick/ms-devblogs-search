Al Grant  April 22, 2022


  0  Collapse this comment
Copy link
We used TASC to compile a program that optimized the component placement sequence for surface mount robots. This was mission critical for a large factory, and so large that all the comments were kept in a separate file (one benefit of BASIC having numbers on every line!). Somehow TASC fit in alongside it. TASC took half an hour to compile the program, but it was rock solid.
Good points about compiled code making much use of...Read moreWe used TASC to compile a program that optimized the component placement sequence for surface mount robots. This was mission critical for a large factory, and so large that all the comments were kept in a separate file (one benefit of BASIC having numbers on every line!). Somehow TASC fit in alongside it. TASC took half an hour to compile the program, but it was rock solid.
Good points about compiled code making much use of calls to helper primitives (3 bytes per primitive). It was not unlike a stack machine. FORTH cut out the JMPs and stored just the addresses of the primitives (2 bytes). Performance was about even with compiled BASIC since all the heavy lifting was done in the primitives. I guess the main performance benefit that came from TASC was eliminating syntax analysis, symbol lookup and line number lookup – with effectively no registers, there would have been little benefit from the mid-end and back-end optimizations we spend so much time on these days.
Read less







Dave Gzorple  April 19, 2022


  0  Collapse this comment
Copy link
Was it TASC or the Apple Pascal compiler that was nondeterministic, you got a different output every time you ran it?  What you had to do was keep re-running the compile until you got a compiled program that didn’t crash when run.  It’s been way too long, but from memory it was TASC because I remember having to wait ages for it to run repeatedly.





Georg Rottensteiner  April 19, 2022


  0  Collapse this comment
Copy link
Small memory leads to really fun stuff. For a C64 game (also on the 6510, quite similar to 6502) I had common routines in lower memory, and for the loaded stages (from disk, taking half a minute or more to load in) a "reserved" block of memory. Albeit the zero page was mostly used for a few shared variables, since they can be accessed a bit faster (and with smaller opcodes)
Thanks to todays cross...Read moreSmall memory leads to really fun stuff. For a C64 game (also on the 6510, quite similar to 6502) I had common routines in lower memory, and for the loaded stages (from disk, taking half a minute or more to load in) a “reserved” block of memory. Albeit the zero page was mostly used for a few shared variables, since they can be accessed a bit faster (and with smaller opcodes)
Thanks to todays cross assembling tools I could share symbols with a little rebuild and was able to directly call the common routines.
I have the utmost respect for the people that did it back then with all the restraints, waiting for half an hour per compile, etc.
Read less







Antonio Rodríguez  April 20, 2022


  0  Collapse this comment
Copy link
You worked with tight memory and CPU time constraints, but development used to be way more interactive (and rewarding) than today. Most programs were written in machine code or in Basic, and both were interactive: you could just type (or edit) a sentence or instruction, and run it immediately, or inspect or modify memory and variables and continue execution. And in the case of assembler, you could patch the program after hitting a breakpoint and...Read moreYou worked with tight memory and CPU time constraints, but development used to be way more interactive (and rewarding) than today. Most programs were written in machine code or in Basic, and both were interactive: you could just type (or edit) a sentence or instruction, and run it immediately, or inspect or modify memory and variables and continue execution. And in the case of assembler, you could patch the program after hitting a breakpoint and resume execution after it. You could even do the patching by typing assembly code which got translated immediately to opcodes, thanks to the MiniAssembler built into the firmware. Basic compilers, lite the TASC, gave you the best of both worlds: quick development in the interactive environment of Basic, and, when the program was polished, great performance in the binary. Compiling was quite slow, but you only had to compile once for each release!
Read less






Paul Topping  April 19, 2022


  0  Collapse this comment
Copy link
I worked for a GUI Computer Aided Design software company in the late 70's. It was my first job out of college. The system we worked on, like TASC, had a lot more code than would fit into memory on the minicomputers we were using, Data General Eclipse and the like. Until now, I never heard the term "chaining" applied to the technique of swapping in code from disk into a running program. We used...Read moreI worked for a GUI Computer Aided Design software company in the late 70’s. It was my first job out of college. The system we worked on, like TASC, had a lot more code than would fit into memory on the minicomputers we were using, Data General Eclipse and the like. Until now, I never heard the term “chaining” applied to the technique of swapping in code from disk into a running program. We used the term “core load” to refer to each chunk. (Core as in core memory, of course.) We linked each one (there were hundreds) as if it was a single executable. They all had the same code and data below a certain address and an entry point at that address, or a constant distance above it. The lower, common code chunk obviously contained the code to read the desired core load from disk and jump to the entry point. Interesting times!
Read less







Antonio Rodríguez  April 19, 2022


  0  Collapse this comment
Copy link
In the Apple II, chaining was common for large programs, but it only worked in Wozniak's Integer Basic. IIRC, that was because Integer Basic stored the variables in the lower end of memory and the program in the higher end, so it was trivial to load a new program without destroying the variables. When Applesoft arrived, it swapped things around, and placed the program at the lower end, followed by the variables. The location of...Read moreIn the Apple II, chaining was common for large programs, but it only worked in Wozniak’s Integer Basic. IIRC, that was because Integer Basic stored the variables in the lower end of memory and the program in the higher end, so it was trivial to load a new program without destroying the variables. When Applesoft arrived, it swapped things around, and placed the program at the lower end, followed by the variables. The location of the variables varied with the length of the program, so you had to move all the variables and fix the internal pointers (array and string variables were just descriptors which pointed to the actual data – in fact, Applesoft implementation of strings was very similar to COM’s BSTR [guess where the “B” comes from?], but I’m getting off-track). It wasn’t until the introduction of ProDOS in 1983 that Applesoft gained a CHAIN command. By the time ProDOS became common, most newer Apple II models were being sold with 128 KB of RAM, which allowed you to store program segments in the /RAM/ disk, and also use it for storing and recalling entire variable sets. That allowed you to switch from one program to another seamlessly, in a few seconds and without touching disk. Magic!
Read less







Paul Topping  April 19, 2022


  0  Collapse this comment
Copy link
I see from Wikipedia that they call the technique I mention, “overlays”. Chaining is reserved for the practice of replacing the whole program. From the distance of time, it all amounts to the same thing.




Henry Skoglund  April 19, 2022


  0  Collapse this comment
Copy link
The constraints of the 6502 also affected the designs of games, for example did you know why the Apple ][ version of Space Invaders, the Apple Invader game has a "decoration pane" to the right, i.e. why the playing field does not occupy the full width of the screen?
Because the screen width is 280 pixels but handling more than 256 pixels was too much of a stretch for the 6502 (it would have been...Read moreThe constraints of the 6502 also affected the designs of games, for example did you know why the Apple ][ version of Space Invaders, the Apple Invader game has a “decoration pane” to the right, i.e. why the playing field does not occupy the full width of the screen?
Because the screen width is 280 pixels but handling more than 256 pixels was too much of a stretch for the 6502 (it would have been too slow).
Read less







Vincent Weaver  April 20, 2022
· Edited

  0  Collapse this comment
Copy link
as someone who has done a lot of Apple II hi-res programming recently, while it is a minor pain drawing past 256 pixels, in general it's one of the least weird issues with that graphics mode.  Since the framebuffer is grouped in chunks of 7 pixels (or 3.5 depending on how you look at it) it's often easier to keep co-ordinates in a divided by 7 framework since any standard putpixel routine would have...Read moreas someone who has done a lot of Apple II hi-res programming recently, while it is a minor pain drawing past 256 pixels, in general it’s one of the least weird issues with that graphics mode.  Since the framebuffer is grouped in chunks of 7 pixels (or 3.5 depending on how you look at it) it’s often easier to keep co-ordinates in a divided by 7 framework since any standard putpixel routine would have to do a divide by 7 anyway (not particularly easy to do in a fast or compact way on 6502).
in the end though if Microsoft was that concerned about address space on the Apple II they wouldn’t have wasted a number of bytes in the ROM for the backwards/EOR encrypted “MICROSOFT!” string they hid just after the sine tables
Read less







Paradice .  April 20, 2022


  0  Collapse this comment
Copy link
“Wasted”? They were probably the most valuable 10 bytes in the code from MS’ perspective.