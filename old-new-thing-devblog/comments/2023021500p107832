Martin Ba  February 20, 2023


  0  Collapse this comment
Copy link
Side question:
I've been waiting for a I/O related post to plug a question regarding CopyFileEx / COPY_FILE_OPEN_SOURCE_FOR_WRITE.  üòá
https://stackoverflow.com/questions/75388794/what-is-the-purpose-of-copyfileexs-copy-file-open-source-for-write
(I'd have commented on the very fitting "How can I perform a CopyFile, but also ..." post https://devblogs.microsoft.com/oldnewthing/20221007-00/?p=107261 from last Oct, but "comments are closed" there.)
Does anybody know what the actual use case (not the implemented behavior) of COPY_FILE_OPEN_SOURCE_FOR_WRITE is?
Read moreSide question:
I‚Äôve been waiting for a I/O related post to plug a question regarding CopyFileEx / COPY_FILE_OPEN_SOURCE_FOR_WRITE.  üòá
https://stackoverflow.com/questions/75388794/what-is-the-purpose-of-copyfileexs-copy-file-open-source-for-write
(I‚Äôd have commented on the very fitting ‚ÄúHow can I perform a CopyFile, but also ‚Ä¶‚Äù post https://devblogs.microsoft.com/oldnewthing/20221007-00/?p=107261 from last Oct, but ‚Äúcomments are closed‚Äù there.)
Does anybody know what the actual use case (not the implemented behavior) of COPY_FILE_OPEN_SOURCE_FOR_WRITE is?
Read less







Malcolm Smith (AZURE)  February 22, 2023


  1  Collapse this comment
Copy link
It's to support MoveFileWithProgress, specifically when the file being moved is moving across volumes and is the target of a shortcut.  There's a whole infrastructure for shortcut target tracking (see Distributed Link Tracking Service.)  It works, in part, by having object IDs on the shortcut target.  Once a file is "moved" to a new volume, this information is removed from the source of the move and applied to the target of the...Read moreIt‚Äôs to support MoveFileWithProgress, specifically when the file being moved is moving across volumes and is the target of a shortcut.  There‚Äôs a whole infrastructure for shortcut target tracking (see Distributed Link Tracking Service.)  It works, in part, by having object IDs on the shortcut target.  Once a file is ‚Äúmoved‚Äù to a new volume, this information is removed from the source of the move and applied to the target of the move, then the source is deleted.  Removing from the source is a modification.  The flag is just due to how the code is structured, where copy opens the handles.
Read less







Martin Ba  February 23, 2023


  0  Collapse this comment
Copy link
Malcom, thanks a bunch.
So, if I understand you correctly, the MoveFileWithProgress shenanigans will use this flag to have CopyFileEx *try* to open the source file in a writable way so that its callback handler can potentially do some modifying operations on the source handle once it gets to the finished state?
So the general use case could be phrased: Use this flag if your callback handler wants to modify something on the source file. But there's...Read moreMalcom, thanks a bunch.
So, if I understand you correctly, the MoveFileWithProgress shenanigans will use this flag to have CopyFileEx *try* to open the source file in a writable way so that its callback handler can potentially do some modifying operations on the source handle once it gets to the finished state?
So the general use case could be phrased: Use this flag if your callback handler wants to modify something on the source file. But there‚Äôs no guarantee (that is no failure on the side CopyFileEx itself) that the source file will be opened in write mode, it‚Äôs just best effort.
Read less







Malcolm Smith (AZURE)  February 23, 2023


  1  Collapse this comment
Copy link
Yeah, kinda.  When the code was written, it performed this update in the callback handler, so depended on copy to open handles for write.  It doesn't do that anymore, but that's still the reason the flag was added.
As far as the way it "tries" to open the handles for write, see also MOVEFILE_FAIL_IF_NOT_TRACKABLE.  Since the case for this is very narrow, most of the time write access isn't required, so downgrading to...Read moreYeah, kinda.  When the code was written, it performed this update in the callback handler, so depended on copy to open handles for write.  It doesn‚Äôt do that anymore, but that‚Äôs still the reason the flag was added.
As far as the way it ‚Äútries‚Äù to open the handles for write, see also MOVEFILE_FAIL_IF_NOT_TRACKABLE.  Since the case for this is very narrow, most of the time write access isn‚Äôt required, so downgrading to read only is completely benign.  MoveFile can discover that it doesn‚Äôt have write access and fail later for this specific case, although by that point, it‚Äôs already copied the data.
So the remaining public use for this is exactly as you describe: you can update the source in a callback handler, but must be prepared to detect access denied conditions and perform appropriate error handling at the time.
Read less





Greg Lolo  February 16, 2023


  0  Collapse this comment
Copy link
The documentation of ReadFile says:
lpNumberOfBytesRead {‚Ä¶] ReadFile sets this value to zero *before* doing any work or error checking
(Emphasis mine.) Either the documentation is wrong or your sketch of the ReadFile internals is wrong. Why should ReadFile set that value to zero again before returning?





Greg Lolo  February 15, 2023


  0  Collapse this comment
Copy link
The documentation of GetOverlappedResult defines the behavior of GetOverlappedResult only for the case that ReadFile (etc.) failed with ERROR_IO_PENDING. If lpNumberOfBytesRead of ReadFile is NULL and ReadFile manages to read synchronously and thus does not fail with ERROR_IO_PENDING and GetOverlappedResult cannot be called in that case: how do I get the number of bytes read? I guess the documentation of GetOverlappedResult is wrong (or I'm not reading it correctly). See also https://devblogs.microsoft.com/oldnewthing/20140206-00/?p=1853
Read moreThe documentation of GetOverlappedResult defines the behavior of GetOverlappedResult only for the case that ReadFile (etc.) failed with ERROR_IO_PENDING. If lpNumberOfBytesRead of ReadFile is NULL and ReadFile manages to read synchronously and thus does not fail with ERROR_IO_PENDING and GetOverlappedResult cannot be called in that case: how do I get the number of bytes read? I guess the documentation of GetOverlappedResult is wrong (or I‚Äôm not reading it correctly). See also https://devblogs.microsoft.com/oldnewthing/20140206-00/?p=1853
Read less







Joshua Hudson  February 15, 2023
¬∑ Edited

  0  Collapse this comment
Copy link
Very odd behavior of ReadFile. I would have expected if it‚Äôs going to treat lpNumberOfBytesWritten as an out parameter you would have *lpNumberOfBytesWritten = 0 near the top of the function and just not write to it again if it‚Äôs going down the asynchronous pathway.