紅樓鍮  May 22, 2024
· Edited

  0  Collapse this comment
Copy link
An alternative to v.resize(n) followed by transforming into v.begin() is v.reserve(n) followed by transforming into std::back_inserter(v).





Raymond Chen Author
May 23, 2024


  0  Collapse this comment
Copy link
back_inserter doesn’t know that there will always be sufficient capacity, so there will still be resize code in the inner loop.




紅樓鍮  May 22, 2024
· Edited

  0  Collapse this comment
Copy link
The parameter to v.Append() is always copied; there is no concept of a “move” operation at the ABI.
Read moreThe parameter to v.Append() is always copied; there is no concept of a “move” operation at the ABI.

Does the C++/WinRT projection of IVector<hstring>::Append only accept const hstring &, not hstring or hstring &&?
Since HSTRINGs are reference-counted, I’d call passing an HSTRING without incrementing its reference count an ABI-level move operation. (The situation is made complex in the case of HSTRINGs by fast-pass strings, so maybe even moving an HSTRING must incur a call to WindowsDuplicateString in order to be memory-safe? But regular COM pointers don’t have this problem.)

Read less