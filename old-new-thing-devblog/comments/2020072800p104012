Scarlet Manuka  July 30, 2020


  0  Collapse this comment
Copy link
Ooooh, can we talk about overlays now?





Alexis Ryan  July 29, 2020


  0  Collapse this comment
Copy link
Surely the  NEAR and FAR macros can be removed by now





Daniel Neely  July 29, 2020


  0  Collapse this comment
Copy link
This post takes me back.  I did mixed mode programming in highschool using Turbo Pascal.  The code for my never finished top scrolling shooter expanded above 64k so I had multiple code segments. 64,000 byte graphics buffers (320x240x8bit color) not playing nicely with 64k memory segments were what originally forced me to start using pointers for non-school work purposes.  IIRC outside of those all my data did fit into a single segment.





Mystery Man  July 29, 2020


  0  Collapse this comment
Copy link
I remember. When programs on the large model didn’t work, I used to tell people to make sure EMM386.EXE was loaded. Trouble is, I don’t remember why. I may have noticed a trend in how they worked.





David Streeter  July 29, 2020


  0  Collapse this comment
Copy link
> EMM386.exe
*twitches uncontrollably*
*sits in corner and gibbers incomprehensibly about expanded vs extended memory*




Neil Rashbrook  July 29, 2020


  0  Collapse this comment
Copy link
The MSVC compiler didn’t really like the memory model I wanted to use for Win16 DLLs, which used 16-bit pointers for both data and stack but to different segments (which segment was which was encoded in the type of the pointer).





Jonathan Wilson  July 29, 2020


  0  Collapse this comment
Copy link
Too bad IBM didn’t go with the Motorola 68000 like some on the hardware team were pushing for, if they had done that we would have had a nice flat memory space and not needed to worry about segments and offsets and code/data sizes and such (yes I know there were very good reasons why IBM didn’t pick the Motorola 🙂





smf  August 4, 2020


  0  Collapse this comment
Copy link
It’s too bad that Motorola refused to make a version of the 68000 that would work on an 8 bit bus until it was too late (the engineers have admitted they were stubborn about this). IBM wanted an 8 bit data bus.
It was also too bad that Motorola took so long from announcing the 68000 before it was available in quantity.
IBM really had no choice.





Jason Swain  August 10, 2020


  0  Collapse this comment
Copy link
Meanwhile (probably a little later than the PC development), Burrell Smith was building Mac prototypes, the earlier ones had a 68000 connected to 8-bit RAM and I/O. He used some external logic to  do this, but it wasn’t hard. This was for the 64k version, when they increased the RAM to 128k there was no reason to stick with 8-bit data bus.




Alex Martin  July 29, 2020


  0  Collapse this comment
Copy link
I frequently see people calling the 68000 a 16-bit processor, which irritates me to no end. It may have a 16-bit data bus, but it has 32-bit registers and 32-bit addressing (though truncated to 24 bits externally). It's a 32-bit processor, just a partially crippled one. By the 68020, they were fully 32-bit, and guess what? No backwards-incompatible 32-bit mode (though a lot of software wouldn't work with full 32-bit addressing for various reasons). It...Read moreI frequently see people calling the 68000 a 16-bit processor, which irritates me to no end. It may have a 16-bit data bus, but it has 32-bit registers and 32-bit addressing (though truncated to 24 bits externally). It’s a 32-bit processor, just a partially crippled one. By the 68020, they were fully 32-bit, and guess what? No backwards-incompatible 32-bit mode (though a lot of software wouldn’t work with full 32-bit addressing for various reasons). It really was a superior chip to the 8086 by a long way, but of course IBM had to get the PC out as fast as possible and couldn’t wait for Motorola to fix their issues…
Read less






Marek Knápek  July 28, 2020


  0  Collapse this comment
Copy link
I guess FAR / NEAR pointers is reason why do we have allocators in C++’s STL.





John Wiltshire  July 28, 2020


  0  Collapse this comment
Copy link
Didn’t we all just decide that Tiny model was easiest and got the hardware guys to make it work that way?





Alex Martin  July 29, 2020


  0  Collapse this comment
Copy link
Yep. All of these memory models are still possible in protected mode (and still useful on the 286). But when the first OSes written for the 386 showed up, they basically all decided to make all the segments† 4GB large covering the entire (virtual) address space, which is technically the same as the Tiny model. Then when AMD designed x86-64 long mode, they pretty much deleted support for the other models. It doesn't matter nowadays,...Read moreYep. All of these memory models are still possible in protected mode (and still useful on the 286). But when the first OSes written for the 386 showed up, they basically all decided to make all the segments† 4GB large covering the entire (virtual) address space, which is technically the same as the Tiny model. Then when AMD designed x86-64 long mode, they pretty much deleted support for the other models. It doesn’t matter nowadays, because the segments point into the same virtual address space, so the other models really don’t have much benefit except for a very small number of edge cases.
† In protected mode, segments are regions of memory described by descriptors in the GDT or LDT and identified by selectors loaded into the *S registers; that’s my position on the terminology as backed up by the Intel IA-32 Architecture Software Developer’s Manual, Raymond.
Read less







Azarien  July 30, 2020


  0  Collapse this comment
Copy link
In pmode there are still segments, you just get to define your own segments. Also, the CS, DS, … registers are always called “segment registers”, never “selector registers”.



Alex Martin  July 28, 2020


  0  Collapse this comment
Copy link
> MS-DOS
:]