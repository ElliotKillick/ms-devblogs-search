Paul Topping  December 13, 2021


  0  Collapse this comment
Copy link
I prefer to use all explicit names line FunctionNameA or FunctionNameW. It's too bad windows.h doesn't have a macro that forces this by suppressing all the unadorned names like FunctionName. I understand that the unadorned names allow one to switch between Unicode and non-Unicode versions by changing a single macro definition but that's rarely practical anyway. Of course, my new macro (#define NO_UNICODE_NAMES?) wouldn't prevent anyone from doing that if that's what they wanted.
Read moreI prefer to use all explicit names line FunctionNameA or FunctionNameW. It’s too bad windows.h doesn’t have a macro that forces this by suppressing all the unadorned names like FunctionName. I understand that the unadorned names allow one to switch between Unicode and non-Unicode versions by changing a single macro definition but that’s rarely practical anyway. Of course, my new macro (#define NO_UNICODE_NAMES?) wouldn’t prevent anyone from doing that if that’s what they wanted.
Read less







Neil Rashbrook  December 11, 2021


  0  Collapse this comment
Copy link
When you invent that time machine, change LPARAM into an LPTSTR. Problem solved. While you’re there, make the header detect C++ and use overloaded functions to automatically select the right A or W function depending on the type of the arguments.





Raymond Chen Author
December 13, 2021


  0  Collapse this comment
Copy link
C++ is not an ABI, however. Different compilers decorate differently. The overloads would have to be inline functions, but that creates function identity problems.





Me Gusta  December 13, 2021


  0  Collapse this comment
Copy link
If I remember correctly, changing LPARAM and overloading that wouldn’t really fix the problem anyway because the window expecting ANSI/UNICODE is a property of the HWND. For example, if you register the class using RegisterClass(Ex)A and then use W functions after that, you would still have problems.



Harold H  December 10, 2021


  0  Collapse this comment
Copy link
The ANSI version of a function is called “FunctionNameA”.  Why is the Unicode version of a function called “FunctionNameW”  and not “FunctionNameU” ?





MNGoldenEagle  December 14, 2021


  0  Collapse this comment
Copy link
The A/W dichotomy existed back in Windows 3.1, with the W functions being failing stubs (for most regions).  Given that Windows 3.1 predated Unicode’s existence as a standard, that’s probably part of the reason why.  Microsoft knew they wanted “wide character” support, but what charset they were going to use wasn’t defined yet, and wouldn’t be until the release of Windows NT which used UCS-2.





Me Gusta  December 11, 2021
· Edited

  0  Collapse this comment
Copy link
Having a bit of a prod around the Windows NT SDK (yes, the SDK for the original version of Windows NT), UCHAR is defined as a typedef for unsigned char. So it may have been a bit iffy to use U in that case.
But IIRC, this kind of naming came from the fact that characters that were made up of single byte units like ASCII (ISO 646), ISO 2022, ISO 8859 and the like...Read moreHaving a bit of a prod around the Windows NT SDK (yes, the SDK for the original version of Windows NT), UCHAR is defined as a typedef for unsigned char. So it may have been a bit iffy to use U in that case.
But IIRC, this kind of naming came from the fact that characters that were made up of single byte units like ASCII (ISO 646), ISO 2022, ISO 8859 and the like were (maybe retroactively) seen as narrow characters, and characters that are made up of two or more bytes are seen as wide characters.
Now, while it was officially added to the C standard library in 1995, the wchar_t type was being informally used for quite a while. Again that Windows NT SDK from 1992 had the wchar.h and wctype.h headers. Since this is actually getting into the region where I am too young to remember anything more than this, I would guess that wchar_t was informally added prior to NT and it was just repurposed for UCS-2 since it was convenient.
But I would have to do a bit more digging to see, and that would finding and downloading the Microsoft C compiler from the late 80s to see how things were.
Read less







Michael Taylor  December 10, 2021


  0  Collapse this comment
Copy link
Yes the `W` stands for wide since the character set is known as the `wide character` and hence Windows uses `WCHAR` as the type. Why didn't they use `U` and `UCHAR` then? Couple of possibilities.
1) While most people think of Unicode as 16-bits it is in fact either 8 or 16-bits depending upon whether you're using UTF-8 or UTF-16. `WCHAR` is for UTF-16, hence wide. A `FuncU` function could potentially be called with either a...Read moreYes the `W` stands for wide since the character set is known as the `wide character` and hence Windows uses `WCHAR` as the type. Why didn’t they use `U` and `UCHAR` then? Couple of possibilities.
1) While most people think of Unicode as 16-bits it is in fact either 8 or 16-bits depending upon whether you’re using UTF-8 or UTF-16. `WCHAR` is for UTF-16, hence wide. A `FuncU` function could potentially be called with either a UTF-8 or UTF-16 string if it meant “Unicode string”.
2) `unsigned char` is a valid type in C/C++. `UCHAR` might be misinterpreted as unsigned char.
Read less







Solomon Ucko  December 14, 2021


  0  Collapse this comment
Copy link
Or 32 bits per code unit for UTF-32.




Solomon Ucko  December 10, 2021


  0  Collapse this comment
Copy link
I’m pretty sure it stands for “wide” or “wchar” but I’m not sure why the inconsistency.