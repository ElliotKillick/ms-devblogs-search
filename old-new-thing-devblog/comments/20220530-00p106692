Sukru Tikves  June 2, 2022


  0  Collapse this comment
Copy link
The rule might make sense for lists as iterables, but for maps, I would have preferred to keep them as just generic IMaps
The reason is, by definition, Lists are a collection of items, with no specific order. (Of course we can sort them, but that is a different story).
On the other hand Maps are used for efficient lookups, possibly in O(logN) or O(1) time (tree or hashtable). Converting that to a generic iterable of KVPs...Read moreThe rule might make sense for lists as iterables, but for maps, I would have preferred to keep them as just generic IMaps
The reason is, by definition, Lists are a collection of items, with no specific order. (Of course we can sort them, but that is a different story).
On the other hand Maps are used for efficient lookups, possibly in O(logN) or O(1) time (tree or hashtable). Converting that to a generic iterable of KVPs is significantly inefficient.
Read less







Raymond Chen Author
June 2, 2022
· Edited

  0  Collapse this comment
Copy link
In practice, Windows Runtime methods usually read all the keys and values. For example, you pass a map of things to convert to JSON. The JSON converter has to process the entire contents of the map. Or it's a map of option names and values. The method has to process the entire contents of the map to make sure it honored every option. The lookup efficiency is immaterial because the consumer never performs a lookup.
By...Read moreIn practice, Windows Runtime methods usually read all the keys and values. For example, you pass a map of things to convert to JSON. The JSON converter has to process the entire contents of the map. Or it’s a map of option names and values. The method has to process the entire contents of the map to make sure it honored every option. The lookup efficiency is immaterial because the consumer never performs a lookup.
By analogy, when you pass a list of things to the Windows Runtime, it rarely uses the random-access feature of vectors. It just enumerates the entire vector contents. The only thing it really requires is iterability.
Read less






Jonathan Pryor  May 31, 2022


  0  Collapse this comment
Copy link
Typo in the C++/CX block: you have `Iiterable` when you want `IIterable`:
using IAttributeIterable = IIterable<IKeyValuePair>;





Hans van Leuken - Melis  May 31, 2022


  0  Collapse this comment
Copy link
There seems to be a parenthesis/curly brackets mismatch in the code.

auto d1 = ref new AttributeMap{ { "foo", fooValue } };
auto d2 = ref new AttributeMap( { "bar", barValue } };