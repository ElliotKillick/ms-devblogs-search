


	
        STRICT_TYPED_ITEMIDS is the shell namespace version of the STRICT macro used by USER and GDI          Raymond Chen        
            
            January 24th, 20130 0
		
        Starting with the Windows Vista PlatformSDK, defining the symbol STRICT_TYPED_ITEM­IDS before including shell header files changes declarations that previously had simply used ITEM­ID­LIST now use  one of various types which are more clear about what type of ID list is being used.
 Think of it as the STRICT macro for the shell. 
 The more precise names emphasize the form of the ID list: 

ITEM­ID_CHILD represents an item ID     relative to some implied shell folder.     The item ID is followed by a null terminator     and is therefore exactly one SH­ITEM­ID long.     In file-system speak, this is a “file name.” 
ID­LIST_RELATIVE represents     an item ID list relative to some implied shell folder.     It can consist of any number of     SH­ITEM­ID structures concatenated     together, followed by a null terminator.     This item ID list must be used in conjunction with the     IShell­Folder it is associated with.     In file-system speak, this is a “relative path.” 
ID­LIST_ABSOLUTE represents     an item ID list relative to the desktop root folder.     It too can be any length.     This item ID list must be used in conjunction with the     IShell­Folder returned by     SH­Get­Desktop­Folder.     In file-system speak, this is a “fully-qualified absolute path.”     (An absolute ID list is the special case of a relative     ID list where the implied shell folder is the desktop root folder.) 
ITEM­ID_CHILD_ARRAY represents     an array of pointers to ITEM­ID_CHILD     objects, where all of the ITEM­ID_CHILD     objects are children of the same shell folder parent.     The array must be used in conjunction with that parent shell folder. 

 These new types were introduced to help catch common programming errors when using the shell namespace. For example, if you try to pass an array of absolute pidls to IShell­Folder::Get­UI­Object­Of, you will get a type mismatch compiler error because that method takes an ITEM­ID_CHILD_ARRAY, and the thing you passed is not an array of ITEM­ID_CHLD pointers. 
 You are encouraged to turn on strict mode when compiling code that uses the shell namespace, but to preserve source code backward compatibility, the setting is off by default. 

        
                

        
		
                

            
            
                
                    Raymond Chen                
                
            
            

                
        
            Follow 
          
                
            
        
                
            
    
   

        

            

            
       
        
	




	

		Tagged Code
	

