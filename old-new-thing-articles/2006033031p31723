


	
        How would you solve this compatibility problem: Network interoperability          Raymond Chen        
            
            March 30th, 20060 0
		
        Okay, everybody, here’s your chance to solve a compatibility problem. There is no answer yet; I’m looking to see how you folks would attack it. This is a real bug in the Windows Vista database.
 A beta tester reported that Explorer fails to show more than about a hundred files per directory from file servers running a particular brand of the file server software. The shell and networking teams investigated the problem together and tracked it down to the server incorrectly handling certain types of directory queries. Although the server claims to support both slow and fast queries, if you try a fast query, it returns only the first hundred or so files and then gives up with a strange error code. On the other hand, if Explorer switches to the slow query, then everything works fine. (Windows XP always used the slow query.) Additional data: An update to the server software was released earlier this year which claims to fix the bug. However (as of this writing), all of the vendor’s distributors continue to ship the buggy version of the driver.
 What should we do? Here are some options. Choose of of the below or make up your own!
Do nothing
 Make no accomodation for this particular buggy protocol implementation. People who are running that particular implementation will get incomplete directory listings. Publish a Knowledge Base article describing the problem and directing customers to contact the vendor for an updated driver.
 Advantages:

Operating system remains “pure”, unsullied by compatibility hacks. 

 Disadvantages:

Customers with this problem may not even realize that they have it. 
Even if customers notice something wrong, they won’t necessarily     know to search for the vendor’s name (as opposed to the distributor’s name)     in the Knowledge Base to see     if there are any known interoperability problems with it. 
And even if the customer finds the Knowledge Base article, they     will have to bypass their distributor and get the driver directly     from the vendor.     This may invalidate their support contract with the distributor. 
If the file server software is running on network attached storage,     the user likely doesn’t even know what driver is running inside     the sealed plastic case.     Upgrading the server software will have to wait for the distributor     to issue a firmware upgrade.     Until then, the user will experience temporary data loss.     (Those files beyond the first hundred are invisible.) 
If the customer does not own the file server, the best they can do     is ask the file server’s administrator to upgrade their driver     and hope the administrator agrees to do so. 
Since Windows XP didn’t use fast queries,     it didn’t have this problem.     Users will interpret it as a bug in Windows Vista. 

Auto-detect the buggy driver and put up a warning dialog
 Explorer should recognize the strange error code and display an error message to the user saying, “The server \\servername appears to be running an old version of the XYZ driver that does not report the contents of large directories properly. Not all items in the directory are shown here. Please contact the administrator of the machine \\servername to have the driver upgraded.” (Possibly with a “Don’t show this dialog again” check-box.)
 Advantages:

Users are told why they are getting incomplete results. 

 Disadvantages:

There’s not much the user can do about the incomplete results.     It looks like a “Ha ha, you lose” dialog. 
Users often don’t know who the administrators of a file server     are, so telling them to contact the administrator merely leads     to a frustrated, “And who is that, huh?”,     or even worse, “That’s me! And I have no idea what this dialog     box is telling me to do.”     (Consider the network attached storage device.) 
The administrator of that machine might have his/her reasons for     not upgrading the driver (for example, because it voids the support     contract), but they will keep getting pestered by users thanks     to this new dialog. 
Since Windows XP didn’t use fast queries,     it didn’t have this problem.     Users will interpret it as a bug in Windows Vista. 

Auto-detect the buggy driver and work around it next time
 Explorer should recognize the strange error code and say, “Oh, this server must have the buggy driver. It’s too late to do anything about the current directory information, but I’ll remember that I should do things the slow way in the future when talking to this server.”
 To avoid denial-of-service attacks, remember only the last 16 (say) servers that exhibit the problem. (If the list of “known bad” servers were unbounded, then an attacker could consume all the memory on your computer by creating a server that responded to a billion different names and using HTTP redirects to get you to visit all of those servers in turn.)
 Advantages:

Windows auto-detects the problem and works around it. 

 Disadvantages:

The first directory listing of a large directory from     a buggy server will be incorrect.     If that first directory listing is for something that has a long     lifetime (for example, Explorer’s folder tree),     then the incorrect data will persist for a long time. 
If you regularly visit more than 16 (say) buggy servers,     then when you visit the seventeenth, the first one falls out of the     cache and will return incorrect data the first time you visit a     large directory. 
May also have to develop and test     a mechanism so that network administrators     can deploy a “known bad list” of servers to all the computers on     their network.     In this way, servers on the “known bad list” won’t have the     “first directory listing is bad” problem. 
Since Windows XP didn’t use fast queries,     it didn’t have this problem.     Users will interpret it as a bug in Windows Vista. 

Have a configuration setting to put the network client into “slow mode”
 Add a configuration setting to the Windows network client to tell it “If somebody asks whether a server supports fast queries, always say No, even if the server says Yes.” In this manner, no program will attempt to use fast queries; they will all use slow queries. Directory queries will run slower, but at least they will work.
 Advantages:

With the setting set to “slow mode”, you never get any     incomplete directory listings. 

 Disadvantages:

Since the detection is not automatic, you have many of the same     problems as “Do nothing”.     Customers have to know that they have a problem and know what     to search for before they can find the configuration setting     in the Knowledge Base.     Until then, the behavior looks like a bug in Windows Vista. 
This punishes file servers that are not buggy     by making them use slow queries     even though they support fast queries. 

Have a configuration setting to put Explorer into “slow mode”
 Add a configuration setting to Explorer to tell it “Always issue slow queries; never issue fast queries.” Directory queries will run slower, but at least they will work. But this affects only Explorer; other programs which ask the server “Do you support fast queries?” will receive an affirmative response and attempt to use fast queries, only to rediscover the problem that Explorer worked around.
 Advantages:

With the setting set to “slow mode”, you never get any     incomplete directory listings. 

 Disadvantages:

Every program that uses fast queries must have their own setting     for disabling fast queries and running in “slow mode”. 
Plus all the     same disadvantages as putting the setting in the network client. 

Disable “fast mode” by default
 Stop supporting “fast mode” in the network client since it is unreliable; there are some servers that don’t handle “fast mode” correctly. This forces all programs to use “slow mode”. Optionally, have a configuration setting to re-enable “fast mode”.
 Advantages: 

All directory listings are complete.     Everything just works. 

 Disadvantages: 

The “fast mode” feature may as well never have been created:     It’s off by default and nobody will bother turning it on     since everything works “well enough”. 
People will accuse Microsoft of unfair business practices     since the client will run in “slow mode”     even if the server says it supports “fast mode”.     “Obviously, Microsoft did this in order to boost sales of     its competing product which doesn’t have this artificial     and gratuitous speed limiter.” 

Something else
 Be creative. Make sure to list both advantages and disadvantages of your proposal. 

        
                

        
		
                

            
            
                
                    Raymond Chen                
                
            
            

                
        
            Follow 
          
                
            
        
                
            
    
   

        

            

            
       
        
	




	

		Tagged Other
	

