


	
        Stop cherry-picking, start merging, Part 6: Replacing the temporary fix with the permanent fix          Raymond Chen        
            
            March 19th, 20180 0
		
         Continuing our exploration of using merges as a replacement for cherry-picking, here’s another scenario you can now solve:
How do I make a change in the master branch that will be automatically reverted when the feature branch merges in?
For this scenario, you have a starting commit A from which you create a feature branch. Both the master branch and feature branch add additional commits M1 and F1, respectively, and then you discover a problem that is common to both branches. You want to apply a temporary fix to the master branch while you work on a permanent fix in the feature branch. How do you arrange so that the temporary fix in the master branch will be reverted automatically when the permanent fix merges in?
Okay, first the thing that doesn’t work: Make the temporary fix in the master branch, cherry-pick it into the feature branch, and then revert it in the feature branch. This doesn’t work because you have essentially created  the ABA problem.
One way to solve this problem is to use the patch branch technique to apply the temporary fix to both branches, and then immediately revert it in the feature branch. This is basically explicitly creating an ABA situation, but doing so in a way that will cause the A to be the winner during the eventual merge.
Another way to solve the problem is to skip the patch+revert step and replace it with an ignore (which is basically what the patch+revert is). Create the patch branch as usual, merge it into the master branch as usual, but instead of performing a normal merge into the feature branch, ignore the change.
 
 



 
 
apple
 
 
 
berry


 
 
M1
← ← ←
M2
 
master


apple
↙︎
 
 
berry
↙︎


A
← ← ←
P
 
 
 
patch


 
↖︎
 
 
 
↖︎


 
 
F1
← ← ←
F2
 
feature


 
 
apple
 
 
 
apple



We create a patch branch from the common commit A and apply the temporary fix to it (changing apple to berry), producing commit P. We merge that branch into the master branch (producing commit M2 with the temporary fix), and we also merge it into the feature branch with -s ours to indicate that we don’t want any code changes from this merge; we are creating it only for bookkeeping purposes. The line remains apple in the feature branch, so that you can continue debugging the problem and developing a permanent fix.
When the two branches merge, the patch branch will be used as the merge base, and relative to that choice of merge base, the master branch didn’t change anything, whereas the feature branch “changed” it to apple. The merge will therefore change the line back to apple. Presumably you won’t perform this merge until you have a permanent fix in the feature branch!
If you use an online service to manage your pull requests, and that online service doesn’t provide a way to override the merge algorithm, then you can use the pre-merge technique described earlier.
What if I already made a change in the master branch that I want to be automatically reverted when the feature branch merges in? Can I create a patch branch retroactively?
Yes, you can still create a patch branch retroactively, using the same technique we have been using throughout this series. Create a patch branch with a copy of the temporary fix, merge it into the master branch (where it will do nothing because the temporary fix is already in the master branch), and also merge it into the feature branch with -s ours to indicate that you want no code change, just bookkeeping.
We continue with another question  next time.


window.addEventListener("load", function() {
  var fullFF = getComputedStyle(document.body).fontFamily;
  var simpleFF = fullFF.replace(/ Emoji/g, "");
  // break up "style" to prevent wordpress from injecting random junk
  document.getElementById("p20180319_head").innerHTML =
`<s` + `tyle>
body { font-family: ${simpleFF}; }
.emoji { font-family: ${fullFF}; }
.entry-content th { padding: 1px; } /* stylesheet workaround */
.entry-content td { padding: 1px; } /* stylesheet workaround */
</s` + `tyle>`;
}); // wacky comment to prevent wordpress from injecting random junk
(function() {
  var svg = {
    defs: `<svg width="0" height="0">
 <defs>
  <marker id="arrowhead" markerWidth="5" markerHeight="5" refX="-2" refY="0"
    viewBox="-6 -6 12 12" orient="auto">
    <polygon points="-2,0 -5,5 5,0 -5,-5" fill="black" stroke="black"
      stroke-dasharray="1 0" />
  </marker>
  <path id="larr" d="M20,10 L3,10" stroke="black"
   marker-end="url(#arrowhead)" />
  <path id="larr3" d="M98,10 L3,10" stroke="black"
   marker-end="url(#arrowhead)" />
  <path id="nwarr" d="M20,20 L3,3" stroke="black"
   marker-end="url(#arrowhead)" />
  <path id="swarr" d="M20,2 L3,17" stroke="black"
   marker-end="url(#arrowhead)" />
 </defs>
</svg>`,
    larr: `<svg width="20" height="20"><use href="#larr"/></svg>`,
    larr3: `<svg width="98" height="20"><use href="#larr3"/></svg>`,
    nwarr: `<svg width="20" height="20"><use href="#nwarr"/></svg>`,
    swarr: `<svg width="20" height="20"><use href="#swarr"/></svg>`,
    blank: `<svg width="20" height="20"></svg>`,
    svg01: `<svg width="50" height="20" style="overflow: visible">
     <path d="M138,-15 L-17,27" fill="transparent" stroke="black" marker-end="url(#arrowhead)" />
    </svg>`
  };
  Object.keys(svg).forEach(function (key) {
    Array.prototype.forEach.call(document.querySelectorAll("#p20180319_" + key),
      function (e) {
        e.innerHTML = svg[key];
      });
  });
})();


        
                

        
		
                

            
            
                
                    Raymond Chen                
                
            
            

                
        
            Follow 
          
                
            
        
                
            
    
   

        

            

            
       
        
	




	

		Tagged Other
	

