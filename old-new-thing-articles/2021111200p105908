


	
        Another way of looking at C++ reverse iterators          Raymond Chen        
            
            November 12th, 20217 0
		
        C++ has this thing called a reverse_iterator that takes a regular iterator and goes in the opposite direction. You might think that an iterator and its reverse point to the same thing, and it’s just the increment and decrement operators that are reversed, but that’s not true. An iterator and its reverse point to different things.
This reason for this comes down to a quirk of the C++ language: You are allowed to have a pointer “one past the end” of a collection, but you are not allowed to have a pointer “one before the beginning” of a collection.
When moving forward through a collection, you can use the “one past the end” pointer as the sentinel that means “you’re done.”



 
•
•
•
•
•
•
 


 

↑
begin


↑
ok


↑
ok


↑
ok


↑
ok


↑
ok


↑
end




But you don’t have such a luxury when going backward:



 
•
•
•
•
•
•
 



↑
oops


↑
ok


↑
ok


↑
ok


↑
ok


↑
ok


↑
begin

 



You want to create an end sentinel value immediately before the first element, but you can’t because the C++ language forbids it.
The standard library finesses the problem by making the reverse iterator “off by one”: The element referenced by the iterator is the one before the one it nominally points to.



 
•
•
•
•
•
•
 


 

↑
end


↑
ok


↑
ok


↑
ok


↑
ok


↑
ok


↑
begin




This off-by-one behavior is a bit tricky to wrap your brain around, but here’s a way of looking at it that’s a bit less wacky: View the pointer as pointing, not at the center of an element, but at its start. When iterating forward, you look to the element in front of the pointer, and when iterating backward, you look to the element in back of the pointer. In both cases, you look in the direction of motion.



 
•
•
•
•
•
•
 


 

↑begin


↑ok


↑ok


↑ok


↑ok


↑ok


↑end







 
•
•
•
•
•
•
 



end↑


ok↑


ok↑


ok↑


ok↑


ok↑


begin↑

 



Now the off-by-one behavior is easier to see. A pointer when interpreted as a forward iterator looks forward one element, but when interpreted as a reverse iterator looks backward one element.



 
•
•
•
•
•
•
 



rev
end
↑

fwd
begin

 
 
 
 
 
 


 

rev
ok
↑

fwd
ok

 
 
 
 
 


 
 

rev
ok
↑

fwd
ok

 
 
 
 


 
 
 

rev
ok
↑

fwd
ok

 
 
 


 
 
 
 

rev
ok
↑

fwd
ok

 
 


 
 
 
 
 

rev
ok
↑

fwd
ok

 


 
 
 
 
 
 

rev
begin
↑

fwd
end






(function() {
  var single = (function() {
    var colorRows = [];
    var arrowRows = [];
    var length;
    function addTable(id, start0, reverse0, start1, reverse1) {
        var table = document.getElementById(id);
        var cells = table.rows[0].cells;
        length = cells.length - 1;
        var row = Array.prototype.slice.call(cells, start0, start0 + length);
        if (reverse0) row.reverse();
        colorRows.push(row);
        cells = table.rows[1].cells;
        row = Array.prototype.slice.call(cells, start1, start1 + length);
        if (reverse1) row.reverse();
        arrowRows.push(row);
    }
    addTable("p20211112_forward_iterator_animation", 1, false, 1, false);
    addTable("p20211112_forward_iterator_animation2", 1, false, 1, false);
    addTable("p20211112_reverse_iterator_animation", 0, true, 0, true);
    addTable("p20211112_reverse_iterator_animation2", 0, true, 1, true);
    addTable("p20211112_reverse_iterator_animation3", 0, true, 0, true);
    var current = length - 1;
    var hold = false;
    function step() {
        if (hold) {
            hold = false;
        } else {
            colorRows.forEach(function (row) {
                row[current].style.backgroundColor = "inherit";
            });
            arrowRows.forEach(function (row) {
                row[current].firstElementChild.style.display = "none";
            });
            ++current;
            hold = (current == length - 1);
            if (current == length) { current = 0; }
            colorRows.forEach(function (row) {
                var cell = row[current];
                cell.style.backgroundColor = cell.innerText ? "#dbf0f7" : "inherit";
            });
            arrowRows.forEach(function (row) {
                row[current].firstElementChild.style.display = "block";
            });
        }
    }
    return step;
  })();
  var bidir = (function() {
    var tbl = document.getElementById("p20211112_combo_iterator_animation");
    var rows = Array.prototype.slice.call(tbl.rows, 1, tbl.rows.length);
    var indices = [ 0, 1, 2, 3, 4, 5, 6, 6, 6, 5, 4, 3, 2, 1, 0, 0 ];
    var current = indices.length - 1;
    function step() {
        rows[indices[current]].style.display = "none";
        ++current;
        if (current == indices.length) current = 0;
        rows[indices[current]].style.display = "";
    }
    return step;
  })();
    function step() {
        single();
        bidir();
    }
    step();
    setInterval(step, 500);
})();


        
                

        
		
                

            
            
                
                    Raymond Chen                
                
            
            

                
        
            Follow 
          
                
            
        
                
            
    
   

        

            

            
       
        
	




	

		Tagged Code
	

