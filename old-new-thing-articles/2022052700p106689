


	
        Why do rescued stack traces often have instability at the start?          Raymond Chen        
            
            May 27th, 20220 0
		
        When you try to recover a lost stack trace, and you make a guess as to where things should resume, sometimes you get a few stack frames of garbage before things finally settle down into a proper stack trace. Why does that happen?
Recall that the stack frame chain is a linked list of stack frames. If you draw the stack left-to-right and growing to the right, it might look like this:
 
 
Each stack frame consists of the return address (R) and a pointer to the previous stack frame. The current stack frame is marked with a star. The space between stack frames contains other stack things, like saved registers, stack-based function parameters, and local variables.
When a function is called, a new stack frame is added to the linked list, and when a function returns, its frame is popped off the linked list.
But even though the frame has been popped off the linked list, it still remains in memory until overwritten.
Sometimes, the memory for an expired frame is reused right away, but sometimes it lingers. For example, the next function might decide to use that memory for a variable which hasn’t yet been written to. And maybe through the course of the function, it never gets written to: Maybe the variable is used in a branch that was not taken, or the variable is a large buffer, and only part of the buffer was needed.
If you dump the stack, you may see these ghosts of long-ago stack frames still haunting the stack memory. What happens if you ask the debugger to dump the stack starting at one of these ghost stack frames?
The debugger doesn’t know it’s a ghost. The debugger just follows the linked list. If the list is badly corrupted, the resulting stack trace is complete nonsense. But if the list is only slightly corrupted, you could see a few frames of garbage, and then a good stack trace emerges.
Why does a good stack trace emerge?
The thing about the ghost frames is that they are not total fabrications. They were at one time valid frames, and that means that their pointer did point to the previous function on the stack.
Here’s a time-lapse of what happens to the stack frame chain as functions are called and return. At the start of our story, we have a call stack with three frames.
 
Now, suppose that the current function calls a new function. This pushes a new frame onto the stack:
 
That function now returns, popping it off the stack but leaving a ghost behind, which I will draw in gray.
 
And the we call another function:
 
Eventually that function returns:
 
And say the returned-to function also returns.
 
And then the first function in our diagram calls some new function.
 
Now suppose you didn’t know that the stack frame chain began with the starred element F. What happens if you try each of the different possible starting points?
For example, if we started at the element labeled C, then we would get C, then follow the arrow to B (which is a dotted arrow but we don’t know that), and then follow the arrow again to A, yielding a stack trace of C-B-A.
Here’s what you get for all of the possible starting points.



Starting point
Result


A
A–…


B
B–A–…


C
C–B–A–…


D
D–C–B–A–…


E
E–C–B–A–…


F
F–B–A–…



Notice that each one gives you a stack trace for what was the stack at the point the frame was last alive. And once you get to a live frame (A or B), the stack backtrace is all good.
Some of the labels or arrows for ghost stack frames become corrupted because the memory was reused for some other purpose. Depending on how severe the corruption is, the stack trace could turn into complete nonsense, or it could still produce a trace but with a little bit of corruption. The corruption is possible up until the ghost stack trace reaches far back enough to hit a live stack frame, at which point everything from that point onward is still good.
In practice, most ghost frames get overwritten relatively quickly, so if you find a ghost frame, there’s a good chance that it’s only a few frames away from a live frame, and a reasonable chance that none of the ghost frames leading to the live frame have been corrupted too badly.
That’s why, if you ask for a stack trace starting from the wrong place, and you are sufficiently lucky, you get a few frames of garbage followed by a good stack trace.


(function() {
  var svg = {
    defs: `<svg width="0" height="0">
<defs>
    <marker id="arrowheadb" markerWidth="7" markerHeight="7" refX="-2" refY="0"
        viewBox="-6 -6 12 12" orient="auto">
        <polygon points="-2,0 -5,5 5,0 -5,-5" fill="black" stroke="black" />
    </marker>
    <marker id="arrowheadg" markerWidth="7" markerHeight="7" refX="-2" refY="0"
        viewBox="-6 -6 12 12" orient="auto">
        <polygon points="-2,0 -5,5 5,0 -5,-5" fill="gray" stroke="gray" />
    </marker>
    <g id="linkb">
        <circle cx="12" cy="12" r="3" fill="black" />
    </g>
    <g id="linkg">
        <circle cx="12" cy="12" r="3" fill="gray" />
    </g>
    <g id="star">
        <text x="12" y="12" text-anchor="middle" dominant-baseline="central" fill="black">&#x2605;</text>
    </g>
    <g id="grid">
        <line x1="0" y1="24.5" x2="480" y2="24.5" stroke="black" />
        <line x1="0" y1="48.5" x2="480" y2="48.5" stroke="black" />
        <line x1="0.5" y1="24" x2="0.5" y2="48" stroke="black" />
        <line x1="24.5" y1="24" x2="24.5" y2="48" stroke="black" />
        <line x1="48.5" y1="24" x2="48.5" y2="48" stroke="black" />
        <line x1="72.5" y1="24" x2="72.5" y2="48" stroke="black" />
        <line x1="96.5" y1="24" x2="96.5" y2="48" stroke="black" />
        <line x1="120.5" y1="24" x2="120.5" y2="48" stroke="black" />
        <line x1="144.5" y1="24" x2="144.5" y2="48" stroke="black" />
        <line x1="168.5" y1="24" x2="168.5" y2="48" stroke="black" />
        <line x1="192.5" y1="24" x2="192.5" y2="48" stroke="black" />
        <line x1="216.5" y1="24" x2="216.5" y2="48" stroke="black" />
        <line x1="240.5" y1="24" x2="240.5" y2="48" stroke="black" />
        <line x1="264.5" y1="24" x2="264.5" y2="48" stroke="black" />
        <line x1="288.5" y1="24" x2="288.5" y2="48" stroke="black" />
        <line x1="312.5" y1="24" x2="312.5" y2="48" stroke="black" />
        <line x1="336.5" y1="24" x2="336.5" y2="48" stroke="black" />
        <line x1="360.5" y1="24" x2="360.5" y2="48" stroke="black" />
        <line x1="384.5" y1="24" x2="384.5" y2="48" stroke="black" />
        <line x1="408.5" y1="24" x2="408.5" y2="48" stroke="black" />
        <line x1="432.5" y1="24" x2="432.5" y2="48" stroke="black" />
        <line x1="456.5" y1="24" x2="456.5" y2="48" stroke="black" />
    </g>
</defs>
</svg>`,
    svg1: `<svg width="485" height="50" xstyle="border: solid black 1px">
    <use href="#grid" />
    <use href="#linkb" x="0" y="24" />
    <text x="36" y="36" text-anchor="middle" dominant-baseline="central" fill="black">R</text>
    <use href="#linkb" x="72" y="24" />
    <text x="108" y="36" text-anchor="middle" dominant-baseline="central" fill="black">R</text>
    <path d="M80,20 C80,0 20,0 16,20" stroke="black" fill="none" marker-end="url(#arrowheadb)" />
    <use href="#linkb" x="240" y="24" />
    <text x="278" y="36" text-anchor="middle" dominant-baseline="central" fill="black">R</text>
    <path d="M248,20 C248,0 92,0 88,20" stroke="black" fill="none" marker-end="url(#arrowheadb)" />
    <use href="#star" x="408" y="24" />
    <text x="444" y="36" text-anchor="middle" dominant-baseline="central" fill="black">R</text>
    <path d="M416,20 C416,0 260,0 256,20" stroke="black" fill="none" marker-end="url(#arrowheadb)" />
</svg>`,
    svg2: `<svg width="485" height="50" xstyle="border: solid black 1px">
    <use href="#grid" />
    <use href="#linkb" x="0" y="24" />
    <text x="36" y="36" text-anchor="middle" dominant-baseline="central" fill="black">A</text>
    <use href="#linkb" x="72" y="24" />
    <text x="108" y="36" text-anchor="middle" dominant-baseline="central" fill="black">B</text>
    <path d="M80,20 C80,0 20,0 16,20" stroke="black" fill="none" marker-end="url(#arrowheadb)" />
    <use href="#star" x="240" y="24" />
    <text x="276" y="36" text-anchor="middle" dominant-baseline="central" fill="black">C</text>
    <path d="M248,20 C248,0 92,0 88,20" stroke="black" fill="none" marker-end="url(#arrowheadb)" />
</svg>`,
    svg3: `<svg width="485" height="50" xstyle="border: solid black 1px">
    <use href="#grid" />
    <use href="#linkb" x="0" y="24" />
    <text x="36" y="36" text-anchor="middle" dominant-baseline="central" fill="black">A</text>
    <use href="#linkb" x="72" y="24" />
    <text x="108" y="36" text-anchor="middle" dominant-baseline="central" fill="black">B</text>
    <path d="M80,20 C80,0 20,0 16,20" stroke="black" fill="none" marker-end="url(#arrowheadb)" />
    <use href="#linkb" x="240" y="24" />
    <text x="276" y="36" text-anchor="middle" dominant-baseline="central" fill="black">C</text>
    <path d="M248,20 C248,0 92,0 88,20" stroke="black" fill="none" marker-end="url(#arrowheadb)" />
    <use href="#star" x="408" y="24" />
    <text x="444" y="36" text-anchor="middle" dominant-baseline="central" fill="black">D</text>
    <path d="M416,20 C416,0 260,0 256,20" stroke="black" fill="none" marker-end="url(#arrowheadb)" />
</svg>`,
    svg4: `<svg width="485" height="50" xstyle="border: solid black 1px">
    <use href="#grid" />
    <use href="#linkb" x="0" y="24" />
    <text x="36" y="36" text-anchor="middle" dominant-baseline="central" fill="black">A</text>
    <use href="#linkb" x="72" y="24" />
    <text x="108" y="36" text-anchor="middle" dominant-baseline="central" fill="black">B</text>
    <path d="M80,20 C80,0 20,0 16,20" stroke="black" fill="none" marker-end="url(#arrowheadb)" />
    <use href="#star" x="240" y="24" />
    <text x="276" y="36" text-anchor="middle" dominant-baseline="central" fill="black">C</text>
    <path d="M248,20 C248,0 92,0 88,20" stroke="black" fill="none" marker-end="url(#arrowheadb)" />
    <use href="#linkg" x="408" y="24" />
    <text x="444" y="36" text-anchor="middle" dominant-baseline="central" fill="gray">D</text>
    <path d="M416,20 C416,0 260,0 256,20" stroke="gray" fill="none" stroke-dasharray="4 4" marker-end="url(#arrowheadg)" />
</svg>`,
    svg5: `<svg width="485" height="50" xstyle="border: solid black 1px">
    <use href="#grid" />
    <use href="#linkb" x="0" y="24" />
    <text x="36" y="36" text-anchor="middle" dominant-baseline="central" fill="black">A</text>
    <use href="#linkb" x="72" y="24" />
    <text x="108" y="36" text-anchor="middle" dominant-baseline="central" fill="black">B</text>
    <path d="M80,20 C80,0 20,0 16,20" stroke="black" fill="none" marker-end="url(#arrowheadb)" />
    <use href="#linkb" x="240" y="24" />
    <text x="276" y="36" text-anchor="middle" dominant-baseline="central" fill="black">C</text>
    <path d="M248,20 C248,0 92,0 88,20" stroke="black" fill="none" marker-end="url(#arrowheadb)" />
    <use href="#star" x="336" y="24" />
    <text x="372" y="36" text-anchor="middle" dominant-baseline="central" fill="black">E</text>
    <path d="M344,20 C344,0 260,0 256,20" stroke="black" fill="none" marker-end="url(#arrowheadb)" />
    <use href="#linkg" x="408" y="24" />
    <text x="444" y="36" text-anchor="middle" dominant-baseline="central" fill="gray">D</text>
    <path d="M416,20 C416,0 260,0 256,20" stroke="gray" fill="none" stroke-dasharray="4 4" marker-end="url(#arrowheadg)" />
</svg>`,
    svg6: `<svg width="485" height="50" xstyle="border: solid black 1px">
    <use href="#grid" />
    <use href="#linkb" x="0" y="24" />
    <text x="36" y="36" text-anchor="middle" dominant-baseline="central" fill="black">A</text>
    <use href="#linkb" x="72" y="24" />
    <text x="108" y="36" text-anchor="middle" dominant-baseline="central" fill="black">B</text>
    <path d="M80,20 C80,0 20,0 16,20" stroke="black" fill="none" marker-end="url(#arrowheadb)" />
    <use href="#star" x="240" y="24" />
    <text x="276" y="36" text-anchor="middle" dominant-baseline="central" fill="black">C</text>
    <path d="M248,20 C248,0 92,0 88,20" stroke="black" fill="none" marker-end="url(#arrowheadb)" />
    <use href="#linkg" x="336" y="24" />
    <text x="372" y="36" text-anchor="middle" dominant-baseline="central" fill="gray">E</text>
    <path d="M344,20 C344,0 260,0 256,20" stroke="gray" fill="none" stroke-dasharray="4 4" marker-end="url(#arrowheadg)" />
    <use href="#linkg" x="408" y="24" />
    <text x="444" y="36" text-anchor="middle" dominant-baseline="central" fill="gray">D</text>
    <path d="M416,20 C416,0 260,0 256,20" stroke="gray" fill="none" stroke-dasharray="4 4" marker-end="url(#arrowheadg)" />
</svg>`,
    svg7: `<svg width="485" height="50" xstyle="border: solid black 1px">
    <use href="#grid" />
    <use href="#linkb" x="0" y="24" />
    <text x="36" y="36" text-anchor="middle" dominant-baseline="central" fill="black">A</text>
    <use href="#star" x="72" y="24" />
    <text x="108" y="36" text-anchor="middle" dominant-baseline="central" fill="black">B</text>
    <path d="M80,20 C80,0 20,0 16,20" stroke="black" fill="none" marker-end="url(#arrowheadb)" />
    <use href="#linkg" x="240" y="24" />
    <text x="276" y="36" text-anchor="middle" dominant-baseline="central" fill="gray">C</text>
    <path d="M248,20 C248,0 92,0 88,20" stroke="gray" fill="none" stroke-dasharray="4 4" marker-end="url(#arrowheadg)" />
    <use href="#linkg" x="336" y="24" />
    <text x="372" y="36" text-anchor="middle" dominant-baseline="central" fill="gray">E</text>
    <path d="M344,20 C344,0 260,0 256,20" stroke="gray" fill="none" stroke-dasharray="4 4" marker-end="url(#arrowheadg)" />
    <use href="#linkg" x="408" y="24" />
    <text x="444" y="36" text-anchor="middle" dominant-baseline="central" fill="gray">D</text>
    <path d="M416,20 C416,0 260,0 256,20" stroke="gray" fill="none" stroke-dasharray="4 4" marker-end="url(#arrowheadg)" />
</svg>`,
    svg8: `<svg width="485" height="50" xstyle="border: solid black 1px">
    <use href="#grid" />
    <use href="#linkb" x="0" y="24" />
    <text x="36" y="36" text-anchor="middle" dominant-baseline="central" fill="black">A</text>
    <use href="#linkb" x="72" y="24" />
    <text x="108" y="36" text-anchor="middle" dominant-baseline="central" fill="black">B</text>
    <path d="M80,20 C80,0 20,0 16,20" stroke="black" fill="none" marker-end="url(#arrowheadb)" />
    <use href="#star" x="168" y="24" />
    <text x="204" y="36" text-anchor="middle" dominant-baseline="central" fill="black">F</text>
    <path d="M176,20 C176,0 92,0 88,20" stroke="black" fill="none" marker-end="url(#arrowheadb)" />
    <use href="#linkg" x="240" y="24" />
    <text x="276" y="36" text-anchor="middle" dominant-baseline="central" fill="gray">C</text>
    <path d="M248,20 C248,0 92,0 88,20" stroke="gray" fill="none" stroke-dasharray="4 4" marker-end="url(#arrowheadg)" />
    <use href="#linkg" x="336" y="24" />
    <text x="372" y="36" text-anchor="middle" dominant-baseline="central" fill="gray">E</text>
    <path d="M344,20 C344,0 260,0 256,20" stroke="gray" fill="none" stroke-dasharray="4 4" marker-end="url(#arrowheadg)" />
    <use href="#linkg" x="408" y="24" />
    <text x="444" y="36" text-anchor="middle" dominant-baseline="central" fill="gray">D</text>
    <path d="M416,20 C416,0 260,0 256,20" stroke="gray" fill="none" stroke-dasharray="4 4" marker-end="url(#arrowheadg)" />
</svg>`
  };
  Object.keys(svg).forEach(function (key) {
    Array.prototype.forEach.call(document.querySelectorAll("#p20220527_" + key),
      function (e) {
        e.innerHTML = svg[key];
      });
  });
})();


        
                

        
		
                

            
            
                
                    Raymond Chen                
                
            
            

                
        
            Follow 
          
                
            
        
                
            
    
   

        

            

            
       
        
	




	

		Tagged Code
	

