


	
        Stop cherry-picking, start merging, Part 8: How to merge a partial cherry-pick          Raymond Chen        
            
            March 21st, 20180 0
		
        Continuing our exploration of using merges as a replacement for cherry-picking, here’s another scenario you can now solve:
What if I want to take only part of a commit into another branch?
Well, if you haven’t committed the change yet, then you can follow the usual workflow: Create a patch branch, commit only the part that you want to go into both branches, and then merge that patch branch into the master and feature branches. Once that’s done, you can make additional commits in the feature branch for the parts of the change you don’t want to go into master immediately.
What if I already committed a change to my feature branch, and I want to take only part of it to the master branch?
You can follow the retroactive merge pattern described earlier under What if I already made the fix in my feature branch by committing directly to it, rather than creating a patch branch? Put into the patch branch the piece of the commit that you want to share with the master branch.
 
 



 
 
apple
apricot
 
 
 
berry
apricot


 
 
M1
← ← ←
M2
 
master


apple
apricot
↙︎
 
 
berry
apricot
↙︎


A
← ← ←
P
 
 
 
patch


 
↖︎
 
 
 
↖︎


 
 
F1
←
F1a
←
F2
 
feature


 
 
apple
apricot
 
berry
banana
 
berry
banana



From a starting commit A where the lines are apple and apricot, we create a feature branch. On the master and feature branches, we make unrelated commits M1 and F1, respectively, that don’t change either of the two lines. We then make a commit F1a on the feature branch that changes both lines to berry and banana. We want to propagate the berry part to the master branch, but not the banana part.
To do this, we create a patch branch starting at the common commit A. On the patch branch, we create a commit P that changes the first line from apple to berry, but leaves the second line unchanged; it remains apricot. We merge this patch branch into the master branch as M2, resulting in berry and apricot in the master branch. We also merge this patch branch into the feature branch as F2, resulting in no change in the feature branch because the first line is already berry; the lines in the feature branch are still berry and banana.
When this merges, the merge base will be berry apricot, which is identical to what’s in the master branch, which means that the change from the feature branch will be taken, resulting in berry banana.
But let’s not merge yet. Suppose that the master branch makes a commit M3 which changes berry to blackberry but leaves apricot unchanged.



 
 
apple
apricot
 
 
 
berry
apricot
 
blackberry
apricot


 
 
M1
← ← ←
M2
←
M3
 
master


apple
apricot
↙︎
 
 
berry
apricot
↙︎


A
← ← ←
P
 
patch


 
↖︎
 
 
 
↖︎


 
 
F1
←
F1a
←
F2
←
F3
 
feature


 
 
apple
apricot
 
berry
banana
 
berry
banana
 
berry
banana



What happens when we merge? Let’s look at the three-way merge:



 
 
blackberry
apricot


 
 
M3
 
master


berry
apricot
↙︎


P


 
↖︎


 
 
F3
 
feature


 
 
berry
banana



The three-way merge chooses commit P as the merge base, and in that commit, the lines are berry and apricot. In the master branch, the lines are blackberry and apricot: The net change is that the first line changed from berry to blackberry. In the feature branch, the lines are berry and banana: The net change is that the second line changed from apricot to banana.
Therefore, the merge of the two branches is to accept the change of the first line from the master branch and the change of the second line from the feature branch, resulting in blackberry and banana, as desired.



 
 
apple
apricot
 
 
 
berry
apricot
 
blackberry
apricot
 
blackberry
banana


 
 
M1
← ← ←
M2
←
M3
← ← ←
M4
 
master


apple
apricot
↙︎
 
 
berry
apricot
↙︎
 
 
 
↙︎
 


A
← ← ←
P
 
patch


 
↖︎
 
 
 
↖︎


 
 
F1
←
F1a
←
F2
←
F3
feature


 
 
apple
apricot
 
berry
banana
 
berry
banana
 
berry
banana





window.addEventListener("load", function() {
  var fullFF = getComputedStyle(document.body).fontFamily;
  var simpleFF = fullFF.replace(/ Emoji/g, "");
  // break up "style" to prevent wordpress from injecting random junk
  document.getElementById("p20180315_head").innerHTML =
`<s` + `tyle>
body { font-family: ${simpleFF}; }
.emoji { font-family: ${fullFF}; }
.entry-content th { padding: 1px; } /* stylesheet workaround */
.entry-content td { padding: 1px; } /* stylesheet workaround */
</s` + `tyle>`;
}); // wacky comment to prevent wordpress from injecting random junk
(function() {
  var svg = {
    defs: `<svg width="0" height="0">
 <defs>
  <marker id="arrowhead" markerWidth="5" markerHeight="5" refX="-2" refY="0"
    viewBox="-6 -6 12 12" orient="auto">
    <polygon points="-2,0 -5,5 5,0 -5,-5" fill="black" stroke="black"
      stroke-dasharray="1 0" />
  </marker>
  <path id="larr" d="M20,10 L3,10" stroke="black"
   marker-end="url(#arrowhead)" />
  <path id="larr3" d="M98,10 L3,10" stroke="black"
   marker-end="url(#arrowhead)" />
  <path id="nwarr" d="M20,20 L3,3" stroke="black"
   marker-end="url(#arrowhead)" />
  <path id="swarr" d="M20,2 L3,17" stroke="black"
   marker-end="url(#arrowhead)" />
  <path id="swarr3" d="M98,2 L6,57" stroke="black"
   marker-end="url(#arrowhead)" />
 </defs>
</svg>`,
    larr: `<svg width="20" height="20"><use href="#larr"/></svg>`,
    larr3: `<svg width="98" height="20"><use href="#larr3"/></svg>`,
    nwarr: `<svg width="20" height="20"><use href="#nwarr"/></svg>`,
    swarr: `<svg width="20" height="20"><use href="#swarr"/></svg>`,
    swarr3: `<svg width="98" height="60"><use href="#swarr3"/></svg>`,
    blank: `<svg width="20" height="20"></svg>`,
    svg01: `<svg width="98" height="20" style="overflow: visible">
     <path d="M98,-15 L50,-15 C30,-15 20,0 3,17" fill="transparent" stroke="black" marker-end="url(#arrowhead)" />
    </svg>`,
    svg02: `<svg width="98" height="20" style="overflow: visible">
     <path d="M98,35 L50,35 C30,35 20,20 3,3" fill="transparent" stroke="black" marker-end="url(#arrowhead)" />
    </svg>`
  };
  Object.keys(svg).forEach(function (key) {
    Array.prototype.forEach.call(document.querySelectorAll("#p20180315_" + key),
      function (e) {
        e.innerHTML = svg[key];
      });
  });
})();


        
                

        
		
                

            
            
                
                    Raymond Chen                
                
            
            

                
        
            Follow 
          
                
            
        
                
            
    
   

        

            

            
       
        
	




	

		Tagged Other
	

