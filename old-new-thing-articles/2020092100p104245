


	
        Git commit-tree parlor tricks, Part 8: I just rebased my branch, but now I realize that I should have merged          Raymond Chen        
            
            September 21st, 20205 0
		
        Suppose you created a feature branch in git and made some changes. Meanwhile, the main branch has also made some changes:
 
 



A
←
M1
←
M2
 
master


 
↖︎


 
 
F1
←
F2
 
feature



From a common ancestor commit A, we create a feature branch and make two commits, F1 and F2. Meanwhile, the master branch has received two commits M1 and M2.
You decide to rebase your topic branch onto the main branch. Many merge conflicts later, you finish with this:



A
←
M1
←
M2
 
 
 
 
 
master


 
 
 
 
 
↖︎


 
 
 
 
 
 
F1′
←
F2′
 
feature



The resulting graph is now linear, with the original commits A1, M1 and M2, followed by new commits F1′ and F2′.
And then you realize that what you really meant to do was merge, not rebase. Is there a way to convert the rebase into a merge without having to go back and deal with all those merge conflicts again?
Indeed there is.
We’ve seen something very similar before, when we  retroactively converted a squash to a merge. This is pretty much the same thing: We have a final result, and we want to manufacture a merge that has the same final result.
git commit-tree HEAD^{tree} -p M2 -p F2 -m comment

Note: If using the Windows cmd command prompt, you need to type
git commit-tree HEAD^^{tree} -p M2 -p F2 -m comment

for reasons  discussed earlier.
What we did was manufacture a new commit that contains the same results as F2′, but assigned it the parents M2 and F2. The first parent is the branch you want to pretend that you are merging to, and the second parent is the branch you want to pretend that you are merging from.



A
←
M1
←
M2
←
F2′
 
master


 
↖︎
 
 
 
↙︎


 
 
F1
←
F2
 
 
 
feature



The output of the git commit-tree command is a commit hash. You can now reset to that commit, and all will be forgiven.
git reset --soft 〈hash〉

Resetting in soft mode preserves all the changes you may have staged. Those staged changes are still valid because the starting point hasn’t changed: The commit you are resetting to has the same tree as the commit you are moving from.
Bonus chatter: If we had swapped the two parent commits, like this:
git commit-tree HEAD^{tree} -p F2 -p M2 -m comment

then the result would have been



A
←
M1
←
M2
 
 
 
master


 
↖︎
 
 
 
↙︎


 
 
F1
←
F2
←
F2′
 
feature




window.addEventListener("load", function() {
  var fullFF = getComputedStyle(document.querySelector("body")).fontFamily;
  var simpleFF = fullFF.replace(/ Emoji/g, "");
  // break up "style" to prevent wordpress from injecting random junk
  document.getElementById("p20200928_head").innerHTML =
`<s` + `tyle>
body { font-family: ${simpleFF}; }
.emoji { font-family: ${fullFF}; }
</s` + `tyle>`;
}); // wacky comment to prevent wordpress from injecting random junk
(function() {
  var svg = {
    defs: `<svg width="0" height="0">
 <defs>
  <marker id="arrowhead" markerWidth="5" markerHeight="5" refX="-2" refY="0"
    viewBox="-6 -6 12 12" orient="auto">
    <polygon points="-2,0 -5,5 5,0 -5,-5" fill="black" stroke="black"
      stroke-dasharray="1 0" />
  </marker>
  <path id="larr" d="M20,10 L3,10" stroke="black"
   marker-end="url(#arrowhead)" />
  <path id="nwarr" d="M20,20 L3,3" stroke="black"
   marker-end="url(#arrowhead)" />
  <path id="swarr" d="M20,2 L3,17" stroke="black"
   marker-end="url(#arrowhead)" />
  <path id="swarrd" d="M20,0 L3,17" stroke="black" stroke-dasharray="4 2"
   marker-end="url(#arrowhead)" />
 </defs>
</svg>`,
    larr: `<svg width="20" height="20"><use href="#larr"/></svg>`,
    nwarr: `<svg width="20" height="20"><use href="#nwarr"/></svg>`,
    swarr: `<svg width="20" height="20"><use href="#swarr"/></svg>`
  };
  Object.keys(svg).forEach(function (key) {
    Array.prototype.forEach.call(document.querySelectorAll("#p20200928_" + key),
      function (e) {
        e.innerHTML = svg[key];
      });
  });
})();


        
                

        
		
                

            
            
                
                    Raymond Chen                
                
            
            

                
        
            Follow 
          
                
            
        
                
            
    
   

        

            

            
       
        
	




	

		Tagged Other
	

